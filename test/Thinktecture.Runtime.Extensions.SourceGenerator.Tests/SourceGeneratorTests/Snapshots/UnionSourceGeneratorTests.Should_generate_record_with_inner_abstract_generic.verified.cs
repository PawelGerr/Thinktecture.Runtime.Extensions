// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

abstract partial record TestUnion<T>
{
   private TestUnion()
   {
   }

   /// <summary>
   /// Executes an action depending on the current type.
   /// </summary>
   /// <param name="third">The action to execute if the current type is <c>global::Thinktecture.Tests.TestUnion&lt;T&gt;.Third</c>.</param>
   /// <param name="first">The action to execute if the current type is <c>global::Thinktecture.Tests.TestUnion&lt;T&gt;.First</c>.</param>
   public void Switch(
      global::System.Action<global::Thinktecture.Tests.TestUnion<T>.Third> @third,
      global::System.Action<global::Thinktecture.Tests.TestUnion<T>.First> @first)
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion<T>.Third value:
            @third(value);
            return;
         case global::Thinktecture.Tests.TestUnion<T>.First value:
            @first(value);
            return;
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes an action depending on the current type.
   /// </summary>
   /// <param name="state">State to be passed to the callbacks.</param>
   /// <param name="third">The action to execute if the current type is <c>global::Thinktecture.Tests.TestUnion&lt;T&gt;.Third</c>.</param>
   /// <param name="first">The action to execute if the current type is <c>global::Thinktecture.Tests.TestUnion&lt;T&gt;.First</c>.</param>
   public void Switch<TState>(
      TState state,
      global::System.Action<TState, global::Thinktecture.Tests.TestUnion<T>.Third> @third,
      global::System.Action<TState, global::Thinktecture.Tests.TestUnion<T>.First> @first)
#if NET9_0_OR_GREATER
		where TState : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion<T>.Third value:
            @third(state, value);
            return;
         case global::Thinktecture.Tests.TestUnion<T>.First value:
            @first(state, value);
            return;
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes a function depending on the current type.
   /// </summary>
   /// <param name="third">The function to execute if the current type is <c>global::Thinktecture.Tests.TestUnion&lt;T&gt;.Third</c>.</param>
   /// <param name="first">The function to execute if the current type is <c>global::Thinktecture.Tests.TestUnion&lt;T&gt;.First</c>.</param>
   public TResult Switch<TResult>(
      global::System.Func<global::Thinktecture.Tests.TestUnion<T>.Third, TResult> @third,
      global::System.Func<global::Thinktecture.Tests.TestUnion<T>.First, TResult> @first)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion<T>.Third value:
            return @third(value);
         case global::Thinktecture.Tests.TestUnion<T>.First value:
            return @first(value);
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes a function depending on the current type.
   /// </summary>
   /// <param name="state">State to be passed to the callbacks.</param>
   /// <param name="third">The function to execute if the current type is <c>global::Thinktecture.Tests.TestUnion&lt;T&gt;.Third</c>.</param>
   /// <param name="first">The function to execute if the current type is <c>global::Thinktecture.Tests.TestUnion&lt;T&gt;.First</c>.</param>
   public TResult Switch<TState, TResult>(
      TState state,
      global::System.Func<TState, global::Thinktecture.Tests.TestUnion<T>.Third, TResult> @third,
      global::System.Func<TState, global::Thinktecture.Tests.TestUnion<T>.First, TResult> @first)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
		where TState : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion<T>.Third value:
            return @third(state, value);
         case global::Thinktecture.Tests.TestUnion<T>.First value:
            return @first(state, value);
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Maps current instance to an instance of type <typeparamref name="TResult"/>.
   /// </summary>
   /// <param name="third">The instance to return if the current type is <c>global::Thinktecture.Tests.TestUnion&lt;T&gt;.Third</c>.</param>
   /// <param name="first">The instance to return if the current type is <c>global::Thinktecture.Tests.TestUnion&lt;T&gt;.First</c>.</param>
   public TResult Map<TResult>(
      TResult @third,
      TResult @first)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion<T>.Third value:
               return @third;
         case global::Thinktecture.Tests.TestUnion<T>.First value:
               return @first;
            default:
               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
         }
   }
}
