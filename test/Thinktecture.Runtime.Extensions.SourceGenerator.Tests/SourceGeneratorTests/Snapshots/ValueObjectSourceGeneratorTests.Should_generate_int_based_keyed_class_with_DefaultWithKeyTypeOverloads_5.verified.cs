// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

partial class TestValueObject :
   global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestValueObject, global::Thinktecture.Tests.TestValueObject, bool>,
   global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestValueObject, int, bool>
{
      /// <summary>
      /// Compares two instances of <see cref="TestValueObject"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestValueObject? obj, global::Thinktecture.Tests.TestValueObject? other)
      {
         if (obj is null)
            return other is null;

         return obj.Equals(other);
      }

      /// <summary>
      /// Compares two instances of <see cref="TestValueObject"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestValueObject? obj, global::Thinktecture.Tests.TestValueObject? other)
      {
         return !(obj == other);
      }

      private static bool Equals(global::Thinktecture.Tests.TestValueObject? obj, int value)
      {
         if (obj is null)
            return false;

         return obj._value.Equals(value);
      }

      /// <summary>
      /// Compares an instance of <see cref="TestValueObject"/> with <see cref="int"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="value">Value to compare with.</param>
      /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestValueObject? obj, int value)
      {
         return Equals(obj, value);
      }

      /// <summary>
      /// Compares an instance of <see cref="TestValueObject"/> with <see cref="int"/>.
      /// </summary>
      /// <param name="value">Value to compare.</param>
      /// <param name="obj">Instance to compare with.</param>
      /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(int value, global::Thinktecture.Tests.TestValueObject? obj)
      {
         return Equals(obj, value);
      }

      /// <summary>
      /// Compares an instance of <see cref="TestValueObject"/> with <see cref="int"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="value">Value to compare with.</param>
      /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestValueObject? obj, int value)
      {
         return !(obj == value);
      }

      /// <summary>
      /// Compares an instance of <see cref="int"/> with <see cref="TestValueObject"/>.
      /// </summary>
      /// <param name="value">Value to compare.</param>
      /// <param name="obj">Instance to compare with.</param>
      /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(int value, global::Thinktecture.Tests.TestValueObject? obj)
      {
         return !(obj == value);
      }
}
