// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(ValueObjectJsonConverterFactory))]
partial class ComplexValueObject<T1, T2, T3>
{
   /// <summary>
   /// JSON converter for <c>ComplexValueObject&lt;T1, T2, T3&gt;</c>.
   /// </summary>
   public sealed class ValueObjectJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::Thinktecture.Tests.ComplexValueObject<T1, T2, T3>>
   {
      private readonly global::System.Text.Json.Serialization.JsonConverter<T1> _propertyConverter;
      private readonly string _propertyPropertyName;
      private readonly global::System.Text.Json.Serialization.JsonConverter<T2?> _nullablePropertyConverter;
      private readonly string _nullablePropertyPropertyName;
      private readonly global::System.Text.Json.Serialization.JsonConverter<T3> _structPropertyConverter;
      private readonly string _structPropertyPropertyName;
      private readonly global::System.Text.Json.Serialization.JsonConverter<T3?> _nullableStructPropertyConverter;
      private readonly string _nullableStructPropertyPropertyName;

      /// <summary>
      /// Initializes JSON converter for <c>ComplexValueObject&lt;T1, T2, T3&gt;</c>.
      /// </summary>
      public ValueObjectJsonConverter(global::System.Text.Json.JsonSerializerOptions options)
      {
         if(options is null)
            throw new global::System.ArgumentNullException(nameof(options));

         var namingPolicy = options.PropertyNamingPolicy;

         this._propertyConverter = (global::System.Text.Json.Serialization.JsonConverter<T1>)global::Thinktecture.Internal.JsonSerializerOptionsExtensions.GetCustomMemberConverter(options, typeof(T1));
         this._propertyPropertyName = namingPolicy?.ConvertName("Property") ?? "Property";
         this._nullablePropertyConverter = (global::System.Text.Json.Serialization.JsonConverter<T2?>)global::Thinktecture.Internal.JsonSerializerOptionsExtensions.GetCustomMemberConverter(options, typeof(T2?));
         this._nullablePropertyPropertyName = namingPolicy?.ConvertName("NullableProperty") ?? "NullableProperty";
         this._structPropertyConverter = (global::System.Text.Json.Serialization.JsonConverter<T3>)global::Thinktecture.Internal.JsonSerializerOptionsExtensions.GetCustomMemberConverter(options, typeof(T3));
         this._structPropertyPropertyName = namingPolicy?.ConvertName("StructProperty") ?? "StructProperty";
         this._nullableStructPropertyConverter = (global::System.Text.Json.Serialization.JsonConverter<T3?>)global::Thinktecture.Internal.JsonSerializerOptionsExtensions.GetCustomMemberConverter(options, typeof(T3?));
         this._nullableStructPropertyPropertyName = namingPolicy?.ConvertName("NullableStructProperty") ?? "NullableStructProperty";
      }

      /// <inheritdoc />
      public override global::Thinktecture.Tests.ComplexValueObject<T1, T2, T3>? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
      {
         if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return default;

         if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException($"Unexpected token \"{reader.TokenType}\" when trying to deserialize \"ComplexValueObject<T1, T2, T3>\". Expected token: \"{(global::System.Text.Json.JsonTokenType.StartObject)}\".");

         T1? @property = default;
         T2? @nullableProperty = default;
         T3 @structProperty = default;
         T3? @nullableStructProperty = default;

         var comparer = options.PropertyNameCaseInsensitive ? global::System.StringComparer.OrdinalIgnoreCase : global::System.StringComparer.Ordinal;

         while (reader.Read())
         {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
               break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
               throw new global::System.Text.Json.JsonException($"Unexpected token \"{reader.TokenType}\" when trying to deserialize \"ComplexValueObject<T1, T2, T3>\". Expected token: \"{(global::System.Text.Json.JsonTokenType.PropertyName)}\".");

            var propName = reader.GetString();

            if(!reader.Read())
               throw new global::System.Text.Json.JsonException($"Unexpected end of the JSON message when trying the read the value of \"{propName}\" during deserialization of \"ComplexValueObject<T1, T2, T3>\".");

            if (comparer.Equals(propName, this._propertyPropertyName))
            {
               @property = this._propertyConverter.Read(ref reader, typeof(T1), options);
            }
            else if (comparer.Equals(propName, this._nullablePropertyPropertyName))
            {
               @nullableProperty = this._nullablePropertyConverter.Read(ref reader, typeof(T2?), options);
            }
            else if (comparer.Equals(propName, this._structPropertyPropertyName))
            {
               @structProperty = this._structPropertyConverter.Read(ref reader, typeof(T3), options);
            }
            else if (comparer.Equals(propName, this._nullableStructPropertyPropertyName))
            {
               @nullableStructProperty = this._nullableStructPropertyConverter.Read(ref reader, typeof(T3?), options);
            }
            else
            {
               throw new global::System.Text.Json.JsonException($"Unknown member \"{propName}\" encountered when trying to deserialize \"ComplexValueObject<T1, T2, T3>\".");
            }
         }

         var validationError = global::Thinktecture.Tests.ComplexValueObject<T1, T2, T3>.Validate(
                                    @property!,
                                    @nullableProperty!,
                                    @structProperty!,
                                    @nullableStructProperty!,
                                    out var obj);

         if (validationError is not null)
            throw new global::System.Text.Json.JsonException(validationError.ToString() ?? "Unable to deserialize \"ComplexValueObject\".");

         return obj;
      }

      /// <inheritdoc />
      public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::Thinktecture.Tests.ComplexValueObject<T1, T2, T3> value, global::System.Text.Json.JsonSerializerOptions options)
      {
         writer.WriteStartObject();

         var ignoreNullValues = options.DefaultIgnoreCondition is global::System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull or global::System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault;
         var ignoreDefaultValues = options.DefaultIgnoreCondition == global::System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault;

         var @propertyPropertyValue = value.Property;

         if(!ignoreNullValues || @propertyPropertyValue is not null)
         {
            writer.WritePropertyName(this._propertyPropertyName);
            this._propertyConverter.Write(writer, @propertyPropertyValue, options);
         }
         var @nullablePropertyPropertyValue = value.NullableProperty;

         if(!ignoreNullValues || @nullablePropertyPropertyValue is not null)
         {
            writer.WritePropertyName(this._nullablePropertyPropertyName);
            this._nullablePropertyConverter.Write(writer, @nullablePropertyPropertyValue, options);
         }
         var @structPropertyPropertyValue = value.StructProperty;

         if(!ignoreDefaultValues || !@structPropertyPropertyValue.Equals(default(T3)))
         {
            writer.WritePropertyName(this._structPropertyPropertyName);
            this._structPropertyConverter.Write(writer, @structPropertyPropertyValue, options);
         }
         var @nullableStructPropertyPropertyValue = value.NullableStructProperty;

         if(!ignoreNullValues || @nullableStructPropertyPropertyValue is not null)
         {
            writer.WritePropertyName(this._nullableStructPropertyPropertyName);
            this._nullableStructPropertyConverter.Write(writer, @nullableStructPropertyPropertyValue, options);
         }
         writer.WriteEndObject();
      }
   }
}

file class ValueObjectJsonConverterFactory : global::System.Text.Json.Serialization.JsonConverterFactory
{
   public override bool CanConvert(global::System.Type typeToConvert)
   {
      if (!typeToConvert.IsGenericType || typeToConvert.IsGenericTypeDefinition)
         return false;

      return typeof(global::Thinktecture.Tests.ComplexValueObject<,,>) == typeToConvert.GetGenericTypeDefinition();
   }

   public override global::System.Text.Json.Serialization.JsonConverter CreateConverter(global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
   {
      if (typeToConvert is null)
         throw new global::System.ArgumentNullException(nameof(typeToConvert));

      if (options is null)
         throw new global::System.ArgumentNullException(nameof(options));

      var converterType = typeToConvert.GetNestedType("ValueObjectJsonConverter")
         ?? throw new global::System.Exception("Implementation of the json converter for the complex value object \"global::Thinktecture.Tests.ComplexValueObject<T1, T2, T3>\" not found.");

      converterType = converterType.MakeGenericType(typeToConvert.GenericTypeArguments);

      return (global::System.Text.Json.Serialization.JsonConverter?)global::System.Activator.CreateInstance(converterType, options)
         ?? throw new global::System.Exception($"Could not create an instance of json converter of type \"{converterType.FullName}\".");
   }
}
