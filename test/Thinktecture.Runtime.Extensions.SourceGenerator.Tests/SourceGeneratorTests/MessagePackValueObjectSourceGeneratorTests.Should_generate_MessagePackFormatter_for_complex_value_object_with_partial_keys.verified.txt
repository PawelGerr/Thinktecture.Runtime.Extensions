// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

[global::MessagePack.MessagePackFormatter(typeof(ValueObjectMessagePackFormatter))]
partial class ComplexValueObjectWithPartialKeys
{
   /// <summary>
   /// MassagePack formatter for <see cref="ComplexValueObjectWithPartialKeys"/>.
   /// </summary>
   public sealed class ValueObjectMessagePackFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Thinktecture.Tests.ComplexValueObjectWithPartialKeys?>
   {
      /// <inheritdoc />
      public global::Thinktecture.Tests.ComplexValueObjectWithPartialKeys? Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
      {
         if (reader.TryReadNil())
            return default;

         options.Security.DepthStep(ref reader);

         var count = reader.ReadArrayHeader();
         global::MessagePack.IFormatterResolver resolver = options.Resolver;

         decimal @property1 = default;
         string? @property2 = default;
         int @property3 = default;

         try
         {
            for (int i = 0; i < count; i++)
            {
               switch (i)
               {
                  case 6:
                  {
                     @property1 = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<decimal>(resolver).Deserialize(ref reader, options)!;
                     break;
                  }
                  case 5:
                  {
                     @property2 = reader.ReadString()!;
                     break;
                  }
                  case 7:
                  {
                     @property3 = reader.ReadInt32()!;
                     break;
                  }
                  default:
                     reader.Skip();
                     break;
               }
            }

            var validationError = global::Thinktecture.Tests.ComplexValueObjectWithPartialKeys.Validate(
                                       @property1!,
                                       @property2!,
                                       @property3!,
                                       out var obj);

            if (validationError is not null)
               throw new global::MessagePack.MessagePackSerializationException(validationError.ToString() ?? "Unable to deserialize \"ComplexValueObjectWithPartialKeys\".");

            return obj;
         }
         finally
         {
           reader.Depth--;
         }
      }

      /// <inheritdoc />
      public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Thinktecture.Tests.ComplexValueObjectWithPartialKeys? value, global::MessagePack.MessagePackSerializerOptions options)
      {
         if(value is null)
         {
            writer.WriteNil();
            return;
         }

         writer.WriteArrayHeader(8);

         var resolver = options.Resolver;
         writer.WriteNil();
         writer.WriteNil();
         writer.WriteNil();
         writer.WriteNil();
         writer.WriteNil();
         writer.Write(value.Property2);
         global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<decimal>(resolver).Serialize(ref writer, value.Property1, options);
         writer.Write(value.Property3);
      }
   }
}
