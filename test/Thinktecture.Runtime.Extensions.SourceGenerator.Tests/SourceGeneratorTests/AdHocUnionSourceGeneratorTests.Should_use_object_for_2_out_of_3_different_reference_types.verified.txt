// <auto-generated />
#nullable enable

namespace Thinktecture.Tests
{
   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
   sealed partial class TestUnion :
      global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
      global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>,
      global::Thinktecture.IDisallowDefaultValue,
      global::Thinktecture.Internal.IMetadataOwner
   {
      static global::Thinktecture.Internal.Metadata global::Thinktecture.Internal.IMetadataOwner.Metadata { get; }
         = new global::Thinktecture.Internal.Metadata.AdHocUnion(typeof(global::Thinktecture.Tests.TestUnion))
      {
         MemberTypes = new global::System.Collections.Generic.List<global::System.Type>
                       {
                           typeof(int),
                           typeof(string),
                           typeof(global::System.Collections.Generic.List<int>),
                           typeof(string)
                       }
                       .AsReadOnly()
      };

      private readonly int _valueIndex;

      private readonly int _int32;
      private readonly object? _obj;

      /// <summary>
      /// Indication whether the current value is of type <see cref="int"/>.
      /// </summary>
      public bool IsInt32 => this._valueIndex == 1;

      /// <summary>
      /// Indication whether the current value is of type <see cref="string"/>.
      /// </summary>
      public bool IsString1 => this._valueIndex == 2;

      /// <summary>
      /// Indication whether the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.
      /// </summary>
      public bool IsListOfInt32 => this._valueIndex == 3;

      /// <summary>
      /// Indication whether the current value is of type <see cref="string"/>.
      /// </summary>
      public bool IsString2 => this._valueIndex == 4;

      /// <summary>
      /// Gets the current value as <see cref="int"/>.
      /// </summary>
      /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <see cref="int"/>.</exception>
      public int AsInt32 => IsInt32 ? this._int32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

      /// <summary>
      /// Gets the current value as <see cref="string"/>.
      /// </summary>
      /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <see cref="string"/>.</exception>
      public string AsString1 => IsString1 ? ((string?)this._obj)! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

      /// <summary>
      /// Gets the current value as <c>global::System.Collections.Generic.List&lt;int&gt;</c>.
      /// </summary>
      /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</exception>
      public global::System.Collections.Generic.List<int> AsListOfInt32 => IsListOfInt32 ? ((global::System.Collections.Generic.List<int>?)this._obj)! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'List<int>'.");

      /// <summary>
      /// Gets the current value as <see cref="string"/>.
      /// </summary>
      /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <see cref="string"/>.</exception>
      public string AsString2 => IsString2 ? ((string?)this._obj)! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

      /// <summary>
      /// Gets the current value as <see cref="object"/>.
      /// </summary>
      public object Value => this._valueIndex switch
      {
         1 => this._int32,
         2 => this._obj!,
         3 => this._obj!,
         4 => this._obj!,
         _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
      };

      /// <summary>
      /// Initializes new instance with <paramref name="int32"/>.
      /// </summary>
      /// <param name="int32">Value to create a new instance for.</param>
      public TestUnion(int @int32)
      {
         this._int32 = @int32;
         this._valueIndex = 1;
      }

      private TestUnion(string? @value, int @valueIndex)
      {
         this._obj = @value;
         this._valueIndex = @valueIndex;
      }

      /// <summary>
      /// Initializes new instance with <paramref name="listOfInt32"/>.
      /// </summary>
      /// <param name="listOfInt32">Value to create a new instance for.</param>
      public TestUnion(global::System.Collections.Generic.List<int> @listOfInt32)
      {
         this._obj = @listOfInt32;
         this._valueIndex = 3;
      }

      /// <summary>
      /// Creates new instance with <paramref name="string1"/>.
      /// </summary>
      /// <param name="string1">Value to create a new instance for.</param>
      public static TestUnion CreateString1(string @string1)
      {
         return new TestUnion(@string1, 2);
      }

      /// <summary>
      /// Creates new instance with <paramref name="string2"/>.
      /// </summary>
      /// <param name="string2">Value to create a new instance for.</param>
      public static TestUnion CreateString2(string @string2)
      {
         return new TestUnion(@string2, 4);
      }

#pragma warning disable CS0436 // InstantHandleAttribute may come from a different assembly
      /// <summary>
      /// Executes an action depending on the current value.
      /// </summary>
      /// <param name="int32">The action to execute if the current value is of type <see cref="int"/>.</param>
      /// <param name="string1">The action to execute if the current value is of type <see cref="string"/>.</param>
      /// <param name="listOfInt32">The action to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</param>
      /// <param name="string2">The action to execute if the current value is of type <see cref="string"/>.</param>
      [global::System.Diagnostics.DebuggerStepThroughAttribute]
      public void Switch(
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<int> @int32,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<string> @string1,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::System.Collections.Generic.List<int>> @listOfInt32,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<string> @string2)
      {
         switch (this._valueIndex)
         {
            case 1:
               @int32(this._int32);
               return;
            case 2:
               @string1(((string?)this._obj)!);
               return;
            case 3:
               @listOfInt32(((global::System.Collections.Generic.List<int>?)this._obj)!);
               return;
            case 4:
               @string2(((string?)this._obj)!);
               return;
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }
#pragma warning restore CS0436 // InstantHandleAttribute may come from a different assembly

#pragma warning disable CS0436 // InstantHandleAttribute may come from a different assembly
      /// <summary>
      /// Executes an action depending on the current value.
      /// </summary>
      /// <param name="state">State to be passed to the callbacks.</param>
      /// <param name="int32">The action to execute if the current value is of type <see cref="int"/>.</param>
      /// <param name="string1">The action to execute if the current value is of type <see cref="string"/>.</param>
      /// <param name="listOfInt32">The action to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</param>
      /// <param name="string2">The action to execute if the current value is of type <see cref="string"/>.</param>
      [global::System.Diagnostics.DebuggerStepThroughAttribute]
      public void Switch<TState>(
         TState @state,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, int> @int32,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, string> @string1,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::System.Collections.Generic.List<int>> @listOfInt32,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, string> @string2)
#if NET9_0_OR_GREATER
		where TState : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               @int32(@state, this._int32);
               return;
            case 2:
               @string1(@state, ((string?)this._obj)!);
               return;
            case 3:
               @listOfInt32(@state, ((global::System.Collections.Generic.List<int>?)this._obj)!);
               return;
            case 4:
               @string2(@state, ((string?)this._obj)!);
               return;
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }
#pragma warning restore CS0436 // InstantHandleAttribute may come from a different assembly

#pragma warning disable CS0436 // InstantHandleAttribute may come from a different assembly
      /// <summary>
      /// Executes a function depending on the current value.
      /// </summary>
      /// <param name="int32">The function to execute if the current value is of type <see cref="int"/>.</param>
      /// <param name="string1">The function to execute if the current value is of type <see cref="string"/>.</param>
      /// <param name="listOfInt32">The function to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</param>
      /// <param name="string2">The function to execute if the current value is of type <see cref="string"/>.</param>
      [global::System.Diagnostics.DebuggerStepThroughAttribute]
      public TResult Switch<TResult>(
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<int, TResult> @int32,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<string, TResult> @string1,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::System.Collections.Generic.List<int>, TResult> @listOfInt32,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<string, TResult> @string2)
#if NET9_0_OR_GREATER
		   where TResult : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               return @int32(this._int32);
            case 2:
               return @string1(((string?)this._obj)!);
            case 3:
               return @listOfInt32(((global::System.Collections.Generic.List<int>?)this._obj)!);
            case 4:
               return @string2(((string?)this._obj)!);
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }
#pragma warning restore CS0436 // InstantHandleAttribute may come from a different assembly

#pragma warning disable CS0436 // InstantHandleAttribute may come from a different assembly
      /// <summary>
      /// Executes a function depending on the current value.
      /// </summary>
      /// <param name="state">State to be passed to the callbacks.</param>
      /// <param name="int32">The function to execute if the current value is of type <see cref="int"/>.</param>
      /// <param name="string1">The function to execute if the current value is of type <see cref="string"/>.</param>
      /// <param name="listOfInt32">The function to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</param>
      /// <param name="string2">The function to execute if the current value is of type <see cref="string"/>.</param>
      [global::System.Diagnostics.DebuggerStepThroughAttribute]
      public TResult Switch<TState, TResult>(
         TState @state,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, int, TResult> @int32,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, string, TResult> @string1,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::System.Collections.Generic.List<int>, TResult> @listOfInt32,
         [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, string, TResult> @string2)
#if NET9_0_OR_GREATER
		   where TResult : allows ref struct
		   where TState : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               return @int32(@state, this._int32);
            case 2:
               return @string1(@state, ((string?)this._obj)!);
            case 3:
               return @listOfInt32(@state, ((global::System.Collections.Generic.List<int>?)this._obj)!);
            case 4:
               return @string2(@state, ((string?)this._obj)!);
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }
#pragma warning restore CS0436 // InstantHandleAttribute may come from a different assembly

      /// <summary>
      /// Maps current value to an instance of type <typeparamref name="TResult"/>.
      /// </summary>
      /// <param name="int32">The instance to return if the current value is of type <see cref="int"/>.</param>
      /// <param name="string1">The instance to return if the current value is of type <see cref="string"/>.</param>
      /// <param name="listOfInt32">The instance to return if the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</param>
      /// <param name="string2">The instance to return if the current value is of type <see cref="string"/>.</param>
      [global::System.Diagnostics.DebuggerStepThroughAttribute]
      public TResult Map<TResult>(
         TResult @int32,
         TResult @string1,
         TResult @listOfInt32,
         TResult @string2)
#if NET9_0_OR_GREATER
		   where TResult : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               return @int32;
            case 2:
               return @string1;
            case 3:
               return @listOfInt32;
            case 4:
               return @string2;
            default:
               throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Implicit conversion from type <see cref="int"/>.
      /// </summary>
      /// <param name="int32">Value to covert from.</param>
      /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="int32"/>.</returns>
      public static implicit operator global::Thinktecture.Tests.TestUnion(int @int32)
      {
         return new global::Thinktecture.Tests.TestUnion(@int32);
      }

      /// <summary>
      /// Implicit conversion from type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.
      /// </summary>
      /// <param name="listOfInt32">Value to covert from.</param>
      /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="listOfInt32"/>.</returns>
      public static implicit operator global::Thinktecture.Tests.TestUnion(global::System.Collections.Generic.List<int> @listOfInt32)
      {
         return new global::Thinktecture.Tests.TestUnion(@listOfInt32);
      }

      /// <summary>
      /// Explicit conversion to type <see cref="int"/>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>Inner value of type <see cref="int"/>.</returns>
      /// <exception cref="System.InvalidOperationException">If the inner value is not a <see cref="int"/>.</exception>
      public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
      {
         return obj.AsInt32;
      }

      /// <summary>
      /// Explicit conversion to type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>Inner value of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</returns>
      /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</exception>
      public static explicit operator global::System.Collections.Generic.List<int>(global::Thinktecture.Tests.TestUnion obj)
      {
         return obj.AsListOfInt32;
      }

      /// <summary>
      /// Compares two instances of <see cref="TestUnion"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
      {
         if (obj is null)
            return other is null;

         return obj.Equals(other);
      }

      /// <summary>
      /// Compares two instances of <see cref="TestUnion"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
      {
         return !(obj == other);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestUnion? other)
      {
         if (other is null)
            return false;

         if (ReferenceEquals(this, other))
            return true;

         if (this._valueIndex != other._valueIndex)
            return false;

         return this._valueIndex switch
         {
            1 => this._int32.Equals(other._int32),
            2 => this._obj is null ? other._obj is null : this._valueIndex == other._valueIndex && ((string)this._obj!).Equals(((string?)other._obj), global::System.StringComparison.OrdinalIgnoreCase),
            3 => this._obj is null ? other._obj is null : this._valueIndex == other._valueIndex && ((global::System.Collections.Generic.List<int>)this._obj!).Equals(((global::System.Collections.Generic.List<int>?)other._obj)),
            4 => this._obj is null ? other._obj is null : this._valueIndex == other._valueIndex && ((string)this._obj!).Equals(((string?)other._obj), global::System.StringComparison.OrdinalIgnoreCase),
            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
         };
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return this._valueIndex switch
         {
            1 => this._int32.GetHashCode(),
            2 => ((string?)this._obj)?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0,
            3 => ((global::System.Collections.Generic.List<int>?)this._obj)?.GetHashCode() ?? 0,
            4 => ((string?)this._obj)?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0,
            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
         };
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this._valueIndex switch
         {
            1 => this._int32.ToString(),
            2 => ((string?)this._obj),
            3 => ((global::System.Collections.Generic.List<int>?)this._obj)?.ToString(),
            4 => ((string?)this._obj),
            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
         };
      }
   }
}
