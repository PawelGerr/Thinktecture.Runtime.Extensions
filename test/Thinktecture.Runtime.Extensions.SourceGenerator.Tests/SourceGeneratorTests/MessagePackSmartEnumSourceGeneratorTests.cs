using MessagePack;
using Thinktecture.CodeAnalysis;
using Thinktecture.Formatters;
using Xunit.Abstractions;

namespace Thinktecture.Runtime.Tests.SourceGeneratorTests;

public class MessagePackSmartEnumSourceGeneratorTests : SourceGeneratorTestsBase
{
   public MessagePackSmartEnumSourceGeneratorTests(ITestOutputHelper output)
      : base(output)
   {
   }

   [Fact]
   public void Should_generate_MessagePackFormatter_and_Attribute_if_Attribute_is_missing()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
	public partial class TestEnum : IEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new(""Item2"");
   }
}
";
      var output = GetGeneratedOutput<MessagePackSmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly, typeof(ValueObjectMessagePackFormatter<,>).Assembly, typeof(MessagePackFormatterAttribute).Assembly);

      AssertOutput(output, @"// <auto-generated />
#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using Thinktecture;

namespace Thinktecture.Tests
{
   [MessagePack.MessagePackFormatter(typeof(ValueObjectMessagePackFormatter))]
   partial class TestEnum
   {
      public class ValueObjectMessagePackFormatter : Thinktecture.Formatters.ValueObjectMessagePackFormatter<TestEnum, string>
      {
         public ValueObjectMessagePackFormatter()
            : base(TestEnum.Get, static obj => obj.Key)
         {
         }
      }
   }
}
");
   }

   [Fact]
   public void Should_generate_MessagePackFormatter_for_enum_without_namespace()
   {
      var source = @"
using System;
using Thinktecture;

public partial class TestEnum : IEnum<string>
{
   public static readonly TestEnum Item1 = new(""Item1"");
   public static readonly TestEnum Item2 = new(""Item2"");
}
";
      var output = GetGeneratedOutput<MessagePackSmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly, typeof(ValueObjectMessagePackFormatter<,>).Assembly, typeof(MessagePackFormatterAttribute).Assembly);

      AssertOutput(output, @"// <auto-generated />
#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using Thinktecture;

   [MessagePack.MessagePackFormatter(typeof(ValueObjectMessagePackFormatter))]
   partial class TestEnum
   {
      public class ValueObjectMessagePackFormatter : Thinktecture.Formatters.ValueObjectMessagePackFormatter<TestEnum, string>
      {
         public ValueObjectMessagePackFormatter()
            : base(TestEnum.Get, static obj => obj.Key)
         {
         }
      }
   }
");
   }

   [Fact]
   public void Should_generate_MessagePackFormatter_and_Attribute_for_struct_if_Attribute_is_missing()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
	public readonly partial struct TestEnum : IEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new(""Item2"");
   }
}
";
      var output = GetGeneratedOutput<MessagePackSmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly, typeof(ValueObjectMessagePackFormatter<,>).Assembly, typeof(MessagePackFormatterAttribute).Assembly);

      AssertOutput(output, @"// <auto-generated />
#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using Thinktecture;

namespace Thinktecture.Tests
{
   [MessagePack.MessagePackFormatter(typeof(ValueObjectMessagePackFormatter))]
   partial struct TestEnum
   {
      public class ValueObjectMessagePackFormatter : Thinktecture.Formatters.ValueObjectMessagePackFormatter<TestEnum, string>
      {
         public ValueObjectMessagePackFormatter()
            : base(TestEnum.Get, static obj => obj.Key)
         {
         }
      }
   }
}
");
   }

   [Fact]
   public void Should_not_generate_MessagePackFormatter_and_attribute_if_Attribute_is_present()
   {
      var source = @"
using System;
using MessagePack;

namespace Thinktecture.Tests
{
   public class TestEnumMessagePackFormatter : Thinktecture.Formatters.EnumMessagePackFormatter<TestEnum, string>
   {
      public TestEnumMessagePackFormatter()
         : base(TestEnum.Get)
      {
      }
   }

   [MessagePackFormatter(typeof(TestEnumMessagePackFormatter))]
	public partial class TestEnum : IEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new(""Item2"");
   }
}
";
      var output = GetGeneratedOutput<MessagePackSmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly, typeof(ValueObjectMessagePackFormatter<,>).Assembly, typeof(MessagePackFormatterAttribute).Assembly);

      output.Should().BeNull();
   }
}
