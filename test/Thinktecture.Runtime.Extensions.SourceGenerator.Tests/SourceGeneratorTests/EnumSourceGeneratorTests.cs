using Thinktecture.CodeAnalysis.SmartEnums;
using Xunit.Abstractions;

namespace Thinktecture.Runtime.Tests.SourceGeneratorTests;

public class EnumSourceGeneratorTests : SourceGeneratorTestsBase
{
   public EnumSourceGeneratorTests(ITestOutputHelper output)
      : base(output)
   {
   }

   private const string _GENERATED_HEADER = @"// <auto-generated />
#nullable enable
";

   private const string _OUTPUT_OF_SIMPLE_ENUM = _GENERATED_HEADER + @"
namespace Thinktecture.Tests
{
   public class TestEnum_EnumTypeConverter : global::Thinktecture.ValueObjectTypeConverter<global::Thinktecture.Tests.TestEnum, string>
   {
      /// <inheritdoc />
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      protected override global::Thinktecture.Tests.TestEnum? ConvertFrom(string? key)
      {
         if(key is null)
            return default;

         if(global::Thinktecture.Tests.TestEnum.TryGet(key, out var item))
            return item;

         throw new global::System.FormatException($""There is no item of type 'TestEnum' with the identifier '{key}'."");
      }

      /// <inheritdoc />
      protected override string GetKeyValue(global::Thinktecture.Tests.TestEnum item)
      {
         return item.Key;
      }
   }

   [global::Thinktecture.Internal.KeyedValueObject]
   [global::System.ComponentModel.TypeConverter(typeof(global::Thinktecture.Tests.TestEnum_EnumTypeConverter))]
   partial class TestEnum : global::Thinktecture.IEnum<string, global::Thinktecture.Tests.TestEnum>, global::System.IEquatable<global::Thinktecture.Tests.TestEnum?>
   {
      [global::System.Runtime.CompilerServices.ModuleInitializer]
      internal static void ModuleInit()
      {
         var convertFromKey = new global::System.Func<string?, global::Thinktecture.Tests.TestEnum?>(global::Thinktecture.Tests.TestEnum.Get);
         global::System.Linq.Expressions.Expression<global::System.Func<string?, global::Thinktecture.Tests.TestEnum?>> convertFromKeyExpression = static key => global::Thinktecture.Tests.TestEnum.Get(key);

         var convertToKey = new global::System.Func<global::Thinktecture.Tests.TestEnum, string>(static item => item.Key);
         global::System.Linq.Expressions.Expression<global::System.Func<global::Thinktecture.Tests.TestEnum, string>> convertToKeyExpression = static item => item.Key;

         var validate = new global::Thinktecture.Internal.Validate<global::Thinktecture.Tests.TestEnum, string>(global::Thinktecture.Tests.TestEnum.Validate);

         var enumType = typeof(global::Thinktecture.Tests.TestEnum);
         var metadata = new global::Thinktecture.Internal.ValueObjectMetadata(enumType, typeof(string), true, false, convertFromKey, convertFromKeyExpression, null, convertToKey, convertToKeyExpression, validate);

         global::Thinktecture.Internal.ValueObjectMetadataLookup.AddMetadata(enumType, metadata);
      }

      public static global::System.Collections.Generic.IEqualityComparer<string?> KeyEqualityComparer => global::System.StringComparer.OrdinalIgnoreCase;

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>> _itemsLookup
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>>(GetLookup);

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>> _items
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>>(() => global::System.Linq.Enumerable.ToList(_itemsLookup.Value.Values).AsReadOnly());

      /// <summary>
      /// Gets all valid items.
      /// </summary>
      public static global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum> Items => _items.Value;

      /// <summary>
      /// The identifier of the item.
      /// </summary>
      public string Key { get; }

      private readonly global::System.Lazy<int> _hashCode;

      private TestEnum(string key)
      {
         ValidateConstructorArguments(ref key);

         if (key is null)
            throw new global::System.ArgumentNullException(nameof(key));

         this.Key = key;
         this._hashCode = new global::System.Lazy<int>(() => typeof(global::Thinktecture.Tests.TestEnum).GetHashCode() * 397 ^ KeyEqualityComparer.GetHashCode(key));
      }

      static partial void ValidateConstructorArguments(ref string key);

      /// <summary>
      /// Gets the identifier of the item.
      /// </summary>
      string global::Thinktecture.IKeyedValueObject<string>.GetKey()
      {
         return this.Key;
      }

      /// <summary>
      /// Gets an enumeration item for provided <paramref name=""key""/>.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <returns>An instance of <see cref=""TestEnum"" /> if <paramref name=""key""/> is not <c>null</c>; otherwise <c>null</c>.</returns>
      /// <exception cref=""Thinktecture.UnknownEnumIdentifierException"">If there is no item with the provided <paramref name=""key""/>.</exception>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static global::Thinktecture.Tests.TestEnum? Get(string? key)
      {
         if (key is null)
            return default;

         if (!_itemsLookup.Value.TryGetValue(key, out var item))
         {
            throw new global::Thinktecture.UnknownEnumIdentifierException(typeof(global::Thinktecture.Tests.TestEnum), key);
         }

         return item;
      }

      /// <summary>
      /// Gets a valid enumeration item for provided <paramref name=""key""/> if a valid item exists.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns><c>true</c> if a valid item with provided <paramref name=""key""/> exists; <c>false</c> otherwise.</returns>
      public static bool TryGet([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::Thinktecture.Tests.TestEnum item)
      {
         if (key is null)
         {
            item = default;
            return false;
         }

         return _itemsLookup.Value.TryGetValue(key, out item);
      }

      /// <summary>
      /// Validates the provided <paramref name=""key""/> and returns a valid enumeration item if found.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns> <see cref=""System.ComponentModel.DataAnnotations.ValidationResult.Success""/> if a valid item with provided <paramref name=""key""/> exists; <see cref=""System.ComponentModel.DataAnnotations.ValidationResult""/> with an error message otherwise.</returns>
      public static global::System.ComponentModel.DataAnnotations.ValidationResult? Validate([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNull] out global::Thinktecture.Tests.TestEnum item)
      {
         return global::Thinktecture.Tests.TestEnum.TryGet(key, out item)
               ? global::System.ComponentModel.DataAnnotations.ValidationResult.Success
               : new global::System.ComponentModel.DataAnnotations.ValidationResult($""The enumeration item of type \""TestEnum\"" with identifier \""{key}\"" is not valid."");
      }

      /// <summary>
      /// Implicit conversion to the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""item"">Item to covert.</param>
      /// <returns>The <see cref=""TestEnum.Key""/> of provided <paramref name=""item""/> or <c>default</c> if <paramref name=""item""/> is <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""item"")]
      public static implicit operator string?(global::Thinktecture.Tests.TestEnum? item)
      {
         return item is null ? default : item.Key;
      }

      /// <summary>
      /// Explicit conversion from the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""key"">Value to covert.</param>
      /// <returns>An instance of <see cref=""TestEnum""/> if the <paramref name=""key""/> is a known item or implements <see cref=""Thinktecture.IValidatableEnum{TKey}""/>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static explicit operator global::Thinktecture.Tests.TestEnum?(string? key)
      {
         return global::Thinktecture.Tests.TestEnum.Get(key);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>true</c> if items are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestEnum? item1, global::Thinktecture.Tests.TestEnum? item2)
      {
         if (item1 is null)
            return item2 is null;

         return item1.Equals(item2);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>false</c> if items are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestEnum? item1, global::Thinktecture.Tests.TestEnum? item2)
      {
         return !(item1 == item2);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestEnum? other)
      {
         if (other is null)
            return false;

         if (!global::System.Object.ReferenceEquals(GetType(), other.GetType()))
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         return KeyEqualityComparer.Equals(this.Key, other.Key);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestEnum item && Equals(item);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return _hashCode.Value;
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this.Key.ToString();
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch(
         TestEnum testEnum1, global::System.Action testEnumAction1,
         TestEnum testEnum2, global::System.Action testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1();
         }
         else if (this == testEnum2)
         {
            testEnumAction2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch<TContext>(
         TContext context,
         TestEnum testEnum1, global::System.Action<TContext> testEnumAction1,
         TestEnum testEnum2, global::System.Action<TContext> testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1(context);
         }
         else if (this == testEnum2)
         {
            testEnumAction2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<T>(
         TestEnum testEnum1, global::System.Func<T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1();
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<TContext, T>(
         TContext context,
         TestEnum testEnum1, global::System.Func<TContext, T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<TContext, T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1(context);
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      private static global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum> GetLookup()
      {
         var lookup = new global::System.Collections.Generic.Dictionary<string, global::Thinktecture.Tests.TestEnum>(2, KeyEqualityComparer);

         void AddItem(global::Thinktecture.Tests.TestEnum item, string itemName)
         {
            if (item is null)
               throw new global::System.ArgumentNullException($""The item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (item.Key is null)
               throw new global::System.ArgumentException($""The \""Key\"" of the item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (lookup.ContainsKey(item.Key))
               throw new global::System.ArgumentException($""The type \""TestEnum\"" has multiple items with the identifier \""{item.Key}\""."");

            lookup.Add(item.Key, item);
         }

         AddItem(Item1, nameof(Item1));
         AddItem(Item2, nameof(Item2));

         return lookup;
      }
   }
}
";

   [Fact]
   public void Should_not_generate_if_class_is_not_partial()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
	public class TestEnum : IEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new(""Item2"");
   }
}
";
      var output = GetGeneratedOutput<SmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly);
      AssertOutput(output, null);
   }

   [Fact]
   public void Should_not_generate_if_generic()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
	public partial class TestEnum<T> : IEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new(""Item2"");
   }
}
";
      var output = GetGeneratedOutput<SmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly);
      AssertOutput(output, null);
   }

   [Fact]
   public void Should_generate_simple_class_which_implements_IEnum()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
	public partial class TestEnum : IEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new(""Item2"");
   }
}
";
      var output = GetGeneratedOutput<SmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly);
      AssertOutput(output, _OUTPUT_OF_SIMPLE_ENUM);
   }

   [Fact]
   public void Should_generate_smart_enum_with_base_class_and_non_default_constructors()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
   public class BaseClass
   {
      protected BaseClass(int value)
      {
      }

      protected BaseClass(string key)
      {
      }
   }

	public partial class TestEnum : BaseClass, IEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new(""Item2"");
   }
}
";
      var output = GetGeneratedOutput<SmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly);
      AssertOutput(output, _GENERATED_HEADER + @"
namespace Thinktecture.Tests
{
   public class TestEnum_EnumTypeConverter : global::Thinktecture.ValueObjectTypeConverter<global::Thinktecture.Tests.TestEnum, string>
   {
      /// <inheritdoc />
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      protected override global::Thinktecture.Tests.TestEnum? ConvertFrom(string? key)
      {
         if(key is null)
            return default;

         if(global::Thinktecture.Tests.TestEnum.TryGet(key, out var item))
            return item;

         throw new global::System.FormatException($""There is no item of type 'TestEnum' with the identifier '{key}'."");
      }

      /// <inheritdoc />
      protected override string GetKeyValue(global::Thinktecture.Tests.TestEnum item)
      {
         return item.Key;
      }
   }

   [global::Thinktecture.Internal.KeyedValueObject]
   [global::System.ComponentModel.TypeConverter(typeof(global::Thinktecture.Tests.TestEnum_EnumTypeConverter))]
   partial class TestEnum : global::Thinktecture.IEnum<string, global::Thinktecture.Tests.TestEnum>, global::System.IEquatable<global::Thinktecture.Tests.TestEnum?>
   {
      [global::System.Runtime.CompilerServices.ModuleInitializer]
      internal static void ModuleInit()
      {
         var convertFromKey = new global::System.Func<string?, global::Thinktecture.Tests.TestEnum?>(global::Thinktecture.Tests.TestEnum.Get);
         global::System.Linq.Expressions.Expression<global::System.Func<string?, global::Thinktecture.Tests.TestEnum?>> convertFromKeyExpression = static key => global::Thinktecture.Tests.TestEnum.Get(key);

         var convertToKey = new global::System.Func<global::Thinktecture.Tests.TestEnum, string>(static item => item.Key);
         global::System.Linq.Expressions.Expression<global::System.Func<global::Thinktecture.Tests.TestEnum, string>> convertToKeyExpression = static item => item.Key;

         var validate = new global::Thinktecture.Internal.Validate<global::Thinktecture.Tests.TestEnum, string>(global::Thinktecture.Tests.TestEnum.Validate);

         var enumType = typeof(global::Thinktecture.Tests.TestEnum);
         var metadata = new global::Thinktecture.Internal.ValueObjectMetadata(enumType, typeof(string), true, false, convertFromKey, convertFromKeyExpression, null, convertToKey, convertToKeyExpression, validate);

         global::Thinktecture.Internal.ValueObjectMetadataLookup.AddMetadata(enumType, metadata);
      }

      public static global::System.Collections.Generic.IEqualityComparer<string?> KeyEqualityComparer => global::System.StringComparer.OrdinalIgnoreCase;

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>> _itemsLookup
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>>(GetLookup);

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>> _items
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>>(() => global::System.Linq.Enumerable.ToList(_itemsLookup.Value.Values).AsReadOnly());

      /// <summary>
      /// Gets all valid items.
      /// </summary>
      public static global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum> Items => _items.Value;

      /// <summary>
      /// The identifier of the item.
      /// </summary>
      public string Key { get; }

      private readonly global::System.Lazy<int> _hashCode;

      private TestEnum(string key, int value)
         : base(value)
      {
         ValidateConstructorArguments(ref key, ref value);

         if (key is null)
            throw new global::System.ArgumentNullException(nameof(key));

         this.Key = key;
         this._hashCode = new global::System.Lazy<int>(() => typeof(global::Thinktecture.Tests.TestEnum).GetHashCode() * 397 ^ KeyEqualityComparer.GetHashCode(key));
      }

      static partial void ValidateConstructorArguments(ref string key, ref int value);

      private TestEnum(string key, string key1)
         : base(key1)
      {
         ValidateConstructorArguments(ref key, ref key1);

         if (key is null)
            throw new global::System.ArgumentNullException(nameof(key));

         this.Key = key;
         this._hashCode = new global::System.Lazy<int>(() => typeof(global::Thinktecture.Tests.TestEnum).GetHashCode() * 397 ^ KeyEqualityComparer.GetHashCode(key));
      }

      static partial void ValidateConstructorArguments(ref string key, ref string key1);

      /// <summary>
      /// Gets the identifier of the item.
      /// </summary>
      string global::Thinktecture.IKeyedValueObject<string>.GetKey()
      {
         return this.Key;
      }

      /// <summary>
      /// Gets an enumeration item for provided <paramref name=""key""/>.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <returns>An instance of <see cref=""TestEnum"" /> if <paramref name=""key""/> is not <c>null</c>; otherwise <c>null</c>.</returns>
      /// <exception cref=""Thinktecture.UnknownEnumIdentifierException"">If there is no item with the provided <paramref name=""key""/>.</exception>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static global::Thinktecture.Tests.TestEnum? Get(string? key)
      {
         if (key is null)
            return default;

         if (!_itemsLookup.Value.TryGetValue(key, out var item))
         {
            throw new global::Thinktecture.UnknownEnumIdentifierException(typeof(global::Thinktecture.Tests.TestEnum), key);
         }

         return item;
      }

      /// <summary>
      /// Gets a valid enumeration item for provided <paramref name=""key""/> if a valid item exists.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns><c>true</c> if a valid item with provided <paramref name=""key""/> exists; <c>false</c> otherwise.</returns>
      public static bool TryGet([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::Thinktecture.Tests.TestEnum item)
      {
         if (key is null)
         {
            item = default;
            return false;
         }

         return _itemsLookup.Value.TryGetValue(key, out item);
      }

      /// <summary>
      /// Validates the provided <paramref name=""key""/> and returns a valid enumeration item if found.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns> <see cref=""System.ComponentModel.DataAnnotations.ValidationResult.Success""/> if a valid item with provided <paramref name=""key""/> exists; <see cref=""System.ComponentModel.DataAnnotations.ValidationResult""/> with an error message otherwise.</returns>
      public static global::System.ComponentModel.DataAnnotations.ValidationResult? Validate([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNull] out global::Thinktecture.Tests.TestEnum item)
      {
         return global::Thinktecture.Tests.TestEnum.TryGet(key, out item)
               ? global::System.ComponentModel.DataAnnotations.ValidationResult.Success
               : new global::System.ComponentModel.DataAnnotations.ValidationResult($""The enumeration item of type \""TestEnum\"" with identifier \""{key}\"" is not valid."");
      }

      /// <summary>
      /// Implicit conversion to the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""item"">Item to covert.</param>
      /// <returns>The <see cref=""TestEnum.Key""/> of provided <paramref name=""item""/> or <c>default</c> if <paramref name=""item""/> is <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""item"")]
      public static implicit operator string?(global::Thinktecture.Tests.TestEnum? item)
      {
         return item is null ? default : item.Key;
      }

      /// <summary>
      /// Explicit conversion from the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""key"">Value to covert.</param>
      /// <returns>An instance of <see cref=""TestEnum""/> if the <paramref name=""key""/> is a known item or implements <see cref=""Thinktecture.IValidatableEnum{TKey}""/>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static explicit operator global::Thinktecture.Tests.TestEnum?(string? key)
      {
         return global::Thinktecture.Tests.TestEnum.Get(key);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>true</c> if items are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestEnum? item1, global::Thinktecture.Tests.TestEnum? item2)
      {
         if (item1 is null)
            return item2 is null;

         return item1.Equals(item2);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>false</c> if items are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestEnum? item1, global::Thinktecture.Tests.TestEnum? item2)
      {
         return !(item1 == item2);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestEnum? other)
      {
         if (other is null)
            return false;

         if (!global::System.Object.ReferenceEquals(GetType(), other.GetType()))
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         return KeyEqualityComparer.Equals(this.Key, other.Key);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestEnum item && Equals(item);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return _hashCode.Value;
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this.Key.ToString();
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch(
         TestEnum testEnum1, global::System.Action testEnumAction1,
         TestEnum testEnum2, global::System.Action testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1();
         }
         else if (this == testEnum2)
         {
            testEnumAction2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch<TContext>(
         TContext context,
         TestEnum testEnum1, global::System.Action<TContext> testEnumAction1,
         TestEnum testEnum2, global::System.Action<TContext> testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1(context);
         }
         else if (this == testEnum2)
         {
            testEnumAction2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<T>(
         TestEnum testEnum1, global::System.Func<T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1();
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<TContext, T>(
         TContext context,
         TestEnum testEnum1, global::System.Func<TContext, T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<TContext, T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1(context);
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      private static global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum> GetLookup()
      {
         var lookup = new global::System.Collections.Generic.Dictionary<string, global::Thinktecture.Tests.TestEnum>(2, KeyEqualityComparer);

         void AddItem(global::Thinktecture.Tests.TestEnum item, string itemName)
         {
            if (item is null)
               throw new global::System.ArgumentNullException($""The item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (item.Key is null)
               throw new global::System.ArgumentException($""The \""Key\"" of the item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (lookup.ContainsKey(item.Key))
               throw new global::System.ArgumentException($""The type \""TestEnum\"" has multiple items with the identifier \""{item.Key}\""."");

            lookup.Add(item.Key, item);
         }

         AddItem(Item1, nameof(Item1));
         AddItem(Item2, nameof(Item2));

         return lookup;
      }
   }
}
");
   }

   [Fact]
   public void Should_generate_simple_class_which_implements_IEnum_if_IEnum_is_fully_qualified()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
	public partial class TestEnum : Thinktecture.IEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new(""Item2"");
   }
}
";
      var output = GetGeneratedOutput<SmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly);
      AssertOutput(output, _OUTPUT_OF_SIMPLE_ENUM);
   }

   [Fact]
   public void Should_generate_simple_enum_which_has_no_namespace()
   {
      var source = @"
using System;
using Thinktecture;

public partial class TestEnum : IEnum<string>
{
   public static readonly TestEnum Item1 = new(""Item1"");
   public static readonly TestEnum Item2 = new(""Item2"");
}
";
      var output = GetGeneratedOutput<SmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly);
      AssertOutput(output, _GENERATED_HEADER + @"
   public class TestEnum_EnumTypeConverter : global::Thinktecture.ValueObjectTypeConverter<global::TestEnum, string>
   {
      /// <inheritdoc />
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      protected override global::TestEnum? ConvertFrom(string? key)
      {
         if(key is null)
            return default;

         if(global::TestEnum.TryGet(key, out var item))
            return item;

         throw new global::System.FormatException($""There is no item of type 'TestEnum' with the identifier '{key}'."");
      }

      /// <inheritdoc />
      protected override string GetKeyValue(global::TestEnum item)
      {
         return item.Key;
      }
   }

   [global::Thinktecture.Internal.KeyedValueObject]
   [global::System.ComponentModel.TypeConverter(typeof(global::TestEnum_EnumTypeConverter))]
   partial class TestEnum : global::Thinktecture.IEnum<string, global::TestEnum>, global::System.IEquatable<global::TestEnum?>
   {
      [global::System.Runtime.CompilerServices.ModuleInitializer]
      internal static void ModuleInit()
      {
         var convertFromKey = new global::System.Func<string?, global::TestEnum?>(global::TestEnum.Get);
         global::System.Linq.Expressions.Expression<global::System.Func<string?, global::TestEnum?>> convertFromKeyExpression = static key => global::TestEnum.Get(key);

         var convertToKey = new global::System.Func<global::TestEnum, string>(static item => item.Key);
         global::System.Linq.Expressions.Expression<global::System.Func<global::TestEnum, string>> convertToKeyExpression = static item => item.Key;

         var validate = new global::Thinktecture.Internal.Validate<global::TestEnum, string>(global::TestEnum.Validate);

         var enumType = typeof(global::TestEnum);
         var metadata = new global::Thinktecture.Internal.ValueObjectMetadata(enumType, typeof(string), true, false, convertFromKey, convertFromKeyExpression, null, convertToKey, convertToKeyExpression, validate);

         global::Thinktecture.Internal.ValueObjectMetadataLookup.AddMetadata(enumType, metadata);
      }

      public static global::System.Collections.Generic.IEqualityComparer<string?> KeyEqualityComparer => global::System.StringComparer.OrdinalIgnoreCase;

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::TestEnum>> _itemsLookup
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::TestEnum>>(GetLookup);

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::TestEnum>> _items
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::TestEnum>>(() => global::System.Linq.Enumerable.ToList(_itemsLookup.Value.Values).AsReadOnly());

      /// <summary>
      /// Gets all valid items.
      /// </summary>
      public static global::System.Collections.Generic.IReadOnlyList<global::TestEnum> Items => _items.Value;

      /// <summary>
      /// The identifier of the item.
      /// </summary>
      public string Key { get; }

      private readonly global::System.Lazy<int> _hashCode;

      private TestEnum(string key)
      {
         ValidateConstructorArguments(ref key);

         if (key is null)
            throw new global::System.ArgumentNullException(nameof(key));

         this.Key = key;
         this._hashCode = new global::System.Lazy<int>(() => typeof(global::TestEnum).GetHashCode() * 397 ^ KeyEqualityComparer.GetHashCode(key));
      }

      static partial void ValidateConstructorArguments(ref string key);

      /// <summary>
      /// Gets the identifier of the item.
      /// </summary>
      string global::Thinktecture.IKeyedValueObject<string>.GetKey()
      {
         return this.Key;
      }

      /// <summary>
      /// Gets an enumeration item for provided <paramref name=""key""/>.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <returns>An instance of <see cref=""TestEnum"" /> if <paramref name=""key""/> is not <c>null</c>; otherwise <c>null</c>.</returns>
      /// <exception cref=""Thinktecture.UnknownEnumIdentifierException"">If there is no item with the provided <paramref name=""key""/>.</exception>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static global::TestEnum? Get(string? key)
      {
         if (key is null)
            return default;

         if (!_itemsLookup.Value.TryGetValue(key, out var item))
         {
            throw new global::Thinktecture.UnknownEnumIdentifierException(typeof(global::TestEnum), key);
         }

         return item;
      }

      /// <summary>
      /// Gets a valid enumeration item for provided <paramref name=""key""/> if a valid item exists.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns><c>true</c> if a valid item with provided <paramref name=""key""/> exists; <c>false</c> otherwise.</returns>
      public static bool TryGet([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::TestEnum item)
      {
         if (key is null)
         {
            item = default;
            return false;
         }

         return _itemsLookup.Value.TryGetValue(key, out item);
      }

      /// <summary>
      /// Validates the provided <paramref name=""key""/> and returns a valid enumeration item if found.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns> <see cref=""System.ComponentModel.DataAnnotations.ValidationResult.Success""/> if a valid item with provided <paramref name=""key""/> exists; <see cref=""System.ComponentModel.DataAnnotations.ValidationResult""/> with an error message otherwise.</returns>
      public static global::System.ComponentModel.DataAnnotations.ValidationResult? Validate([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNull] out global::TestEnum item)
      {
         return global::TestEnum.TryGet(key, out item)
               ? global::System.ComponentModel.DataAnnotations.ValidationResult.Success
               : new global::System.ComponentModel.DataAnnotations.ValidationResult($""The enumeration item of type \""TestEnum\"" with identifier \""{key}\"" is not valid."");
      }

      /// <summary>
      /// Implicit conversion to the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""item"">Item to covert.</param>
      /// <returns>The <see cref=""TestEnum.Key""/> of provided <paramref name=""item""/> or <c>default</c> if <paramref name=""item""/> is <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""item"")]
      public static implicit operator string?(global::TestEnum? item)
      {
         return item is null ? default : item.Key;
      }

      /// <summary>
      /// Explicit conversion from the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""key"">Value to covert.</param>
      /// <returns>An instance of <see cref=""TestEnum""/> if the <paramref name=""key""/> is a known item or implements <see cref=""Thinktecture.IValidatableEnum{TKey}""/>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static explicit operator global::TestEnum?(string? key)
      {
         return global::TestEnum.Get(key);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>true</c> if items are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::TestEnum? item1, global::TestEnum? item2)
      {
         if (item1 is null)
            return item2 is null;

         return item1.Equals(item2);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>false</c> if items are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::TestEnum? item1, global::TestEnum? item2)
      {
         return !(item1 == item2);
      }

      /// <inheritdoc />
      public bool Equals(global::TestEnum? other)
      {
         if (other is null)
            return false;

         if (!global::System.Object.ReferenceEquals(GetType(), other.GetType()))
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         return KeyEqualityComparer.Equals(this.Key, other.Key);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::TestEnum item && Equals(item);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return _hashCode.Value;
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this.Key.ToString();
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch(
         TestEnum testEnum1, global::System.Action testEnumAction1,
         TestEnum testEnum2, global::System.Action testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1();
         }
         else if (this == testEnum2)
         {
            testEnumAction2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch<TContext>(
         TContext context,
         TestEnum testEnum1, global::System.Action<TContext> testEnumAction1,
         TestEnum testEnum2, global::System.Action<TContext> testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1(context);
         }
         else if (this == testEnum2)
         {
            testEnumAction2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<T>(
         TestEnum testEnum1, global::System.Func<T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1();
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<TContext, T>(
         TContext context,
         TestEnum testEnum1, global::System.Func<TContext, T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<TContext, T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1(context);
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      private static global::System.Collections.Generic.IReadOnlyDictionary<string, global::TestEnum> GetLookup()
      {
         var lookup = new global::System.Collections.Generic.Dictionary<string, global::TestEnum>(2, KeyEqualityComparer);

         void AddItem(global::TestEnum item, string itemName)
         {
            if (item is null)
               throw new global::System.ArgumentNullException($""The item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (item.Key is null)
               throw new global::System.ArgumentException($""The \""Key\"" of the item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (lookup.ContainsKey(item.Key))
               throw new global::System.ArgumentException($""The type \""TestEnum\"" has multiple items with the identifier \""{item.Key}\""."");

            lookup.Add(item.Key, item);
         }

         AddItem(Item1, nameof(Item1));
         AddItem(Item2, nameof(Item2));

         return lookup;
      }
   }
");
   }

   [Fact]
   public void Should_generate_enum_with_inner_derived_type_which_is_generic()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
	public partial class TestEnum : IEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new DerivedEnum<int>(""Item2"");
      public static readonly TestEnum Item3 = new DerivedEnum<decimal>(""Item3"");
      public static readonly TestEnum Item4 = new DerivedEnum<decimal>(""Item4"");

      private class DerivedEnum<T> : TestEnum
      {
         public DerivedEnum(string key)
            : base(key)
         {
         }
      }
   }
}
";
      var output = GetGeneratedOutput<SmartEnumSourceGenerator>(source, typeof(IEnum<>).Assembly);
      AssertOutput(output, _GENERATED_HEADER + @"
namespace Thinktecture.Tests
{
   public class TestEnum_EnumTypeConverter : global::Thinktecture.ValueObjectTypeConverter<global::Thinktecture.Tests.TestEnum, string>
   {
      /// <inheritdoc />
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      protected override global::Thinktecture.Tests.TestEnum? ConvertFrom(string? key)
      {
         if(key is null)
            return default;

         if(global::Thinktecture.Tests.TestEnum.TryGet(key, out var item))
            return item;

         throw new global::System.FormatException($""There is no item of type 'TestEnum' with the identifier '{key}'."");
      }

      /// <inheritdoc />
      protected override string GetKeyValue(global::Thinktecture.Tests.TestEnum item)
      {
         return item.Key;
      }
   }

   [global::Thinktecture.Internal.KeyedValueObject]
   [global::System.ComponentModel.TypeConverter(typeof(global::Thinktecture.Tests.TestEnum_EnumTypeConverter))]
   partial class TestEnum : global::Thinktecture.IEnum<string, global::Thinktecture.Tests.TestEnum>, global::System.IEquatable<global::Thinktecture.Tests.TestEnum?>
   {
      [global::System.Runtime.CompilerServices.ModuleInitializer]
      internal static void ModuleInit()
      {
         var convertFromKey = new global::System.Func<string?, global::Thinktecture.Tests.TestEnum?>(global::Thinktecture.Tests.TestEnum.Get);
         global::System.Linq.Expressions.Expression<global::System.Func<string?, global::Thinktecture.Tests.TestEnum?>> convertFromKeyExpression = static key => global::Thinktecture.Tests.TestEnum.Get(key);

         var convertToKey = new global::System.Func<global::Thinktecture.Tests.TestEnum, string>(static item => item.Key);
         global::System.Linq.Expressions.Expression<global::System.Func<global::Thinktecture.Tests.TestEnum, string>> convertToKeyExpression = static item => item.Key;

         var validate = new global::Thinktecture.Internal.Validate<global::Thinktecture.Tests.TestEnum, string>(global::Thinktecture.Tests.TestEnum.Validate);

         var enumType = typeof(global::Thinktecture.Tests.TestEnum);
         var metadata = new global::Thinktecture.Internal.ValueObjectMetadata(enumType, typeof(string), true, false, convertFromKey, convertFromKeyExpression, null, convertToKey, convertToKeyExpression, validate);

         global::Thinktecture.Internal.ValueObjectMetadataLookup.AddMetadata(enumType, metadata);
         global::Thinktecture.Internal.ValueObjectMetadataLookup.AddMetadata(typeof(global::Thinktecture.Tests.TestEnum.DerivedEnum<int>), metadata);
         global::Thinktecture.Internal.ValueObjectMetadataLookup.AddMetadata(typeof(global::Thinktecture.Tests.TestEnum.DerivedEnum<decimal>), metadata);
      }

      public static global::System.Collections.Generic.IEqualityComparer<string?> KeyEqualityComparer => global::System.StringComparer.OrdinalIgnoreCase;

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>> _itemsLookup
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>>(GetLookup);

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>> _items
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>>(() => global::System.Linq.Enumerable.ToList(_itemsLookup.Value.Values).AsReadOnly());

      /// <summary>
      /// Gets all valid items.
      /// </summary>
      public static global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum> Items => _items.Value;

      /// <summary>
      /// The identifier of the item.
      /// </summary>
      public string Key { get; }

      private readonly global::System.Lazy<int> _hashCode;

      private TestEnum(string key)
      {
         ValidateConstructorArguments(ref key);

         if (key is null)
            throw new global::System.ArgumentNullException(nameof(key));

         this.Key = key;
         this._hashCode = new global::System.Lazy<int>(() => typeof(global::Thinktecture.Tests.TestEnum).GetHashCode() * 397 ^ KeyEqualityComparer.GetHashCode(key));
      }

      static partial void ValidateConstructorArguments(ref string key);

      /// <summary>
      /// Gets the identifier of the item.
      /// </summary>
      string global::Thinktecture.IKeyedValueObject<string>.GetKey()
      {
         return this.Key;
      }

      /// <summary>
      /// Gets an enumeration item for provided <paramref name=""key""/>.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <returns>An instance of <see cref=""TestEnum"" /> if <paramref name=""key""/> is not <c>null</c>; otherwise <c>null</c>.</returns>
      /// <exception cref=""Thinktecture.UnknownEnumIdentifierException"">If there is no item with the provided <paramref name=""key""/>.</exception>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static global::Thinktecture.Tests.TestEnum? Get(string? key)
      {
         if (key is null)
            return default;

         if (!_itemsLookup.Value.TryGetValue(key, out var item))
         {
            throw new global::Thinktecture.UnknownEnumIdentifierException(typeof(global::Thinktecture.Tests.TestEnum), key);
         }

         return item;
      }

      /// <summary>
      /// Gets a valid enumeration item for provided <paramref name=""key""/> if a valid item exists.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns><c>true</c> if a valid item with provided <paramref name=""key""/> exists; <c>false</c> otherwise.</returns>
      public static bool TryGet([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::Thinktecture.Tests.TestEnum item)
      {
         if (key is null)
         {
            item = default;
            return false;
         }

         return _itemsLookup.Value.TryGetValue(key, out item);
      }

      /// <summary>
      /// Validates the provided <paramref name=""key""/> and returns a valid enumeration item if found.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns> <see cref=""System.ComponentModel.DataAnnotations.ValidationResult.Success""/> if a valid item with provided <paramref name=""key""/> exists; <see cref=""System.ComponentModel.DataAnnotations.ValidationResult""/> with an error message otherwise.</returns>
      public static global::System.ComponentModel.DataAnnotations.ValidationResult? Validate([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNull] out global::Thinktecture.Tests.TestEnum item)
      {
         return global::Thinktecture.Tests.TestEnum.TryGet(key, out item)
               ? global::System.ComponentModel.DataAnnotations.ValidationResult.Success
               : new global::System.ComponentModel.DataAnnotations.ValidationResult($""The enumeration item of type \""TestEnum\"" with identifier \""{key}\"" is not valid."");
      }

      /// <summary>
      /// Implicit conversion to the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""item"">Item to covert.</param>
      /// <returns>The <see cref=""TestEnum.Key""/> of provided <paramref name=""item""/> or <c>default</c> if <paramref name=""item""/> is <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""item"")]
      public static implicit operator string?(global::Thinktecture.Tests.TestEnum? item)
      {
         return item is null ? default : item.Key;
      }

      /// <summary>
      /// Explicit conversion from the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""key"">Value to covert.</param>
      /// <returns>An instance of <see cref=""TestEnum""/> if the <paramref name=""key""/> is a known item or implements <see cref=""Thinktecture.IValidatableEnum{TKey}""/>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static explicit operator global::Thinktecture.Tests.TestEnum?(string? key)
      {
         return global::Thinktecture.Tests.TestEnum.Get(key);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>true</c> if items are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestEnum? item1, global::Thinktecture.Tests.TestEnum? item2)
      {
         if (item1 is null)
            return item2 is null;

         return item1.Equals(item2);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>false</c> if items are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestEnum? item1, global::Thinktecture.Tests.TestEnum? item2)
      {
         return !(item1 == item2);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestEnum? other)
      {
         if (other is null)
            return false;

         if (!global::System.Object.ReferenceEquals(GetType(), other.GetType()))
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         return KeyEqualityComparer.Equals(this.Key, other.Key);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestEnum item && Equals(item);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return _hashCode.Value;
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this.Key.ToString();
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      /// <param name=""testEnum3"">The item to compare to.</param>
      /// <param name=""testEnumAction3"">The action to execute if the current item is equal to <paramref name=""testEnum3""/>.</param>
      /// <param name=""testEnum4"">The item to compare to.</param>
      /// <param name=""testEnumAction4"">The action to execute if the current item is equal to <paramref name=""testEnum4""/>.</param>
      public void Switch(
         TestEnum testEnum1, global::System.Action testEnumAction1,
         TestEnum testEnum2, global::System.Action testEnumAction2,
         TestEnum testEnum3, global::System.Action testEnumAction3,
         TestEnum testEnum4, global::System.Action testEnumAction4)
      {
         if (this == testEnum1)
         {
            testEnumAction1();
         }
         else if (this == testEnum2)
         {
            testEnumAction2();
         }
         else if (this == testEnum3)
         {
            testEnumAction3();
         }
         else if (this == testEnum4)
         {
            testEnumAction4();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      /// <param name=""testEnum3"">The item to compare to.</param>
      /// <param name=""testEnumAction3"">The action to execute if the current item is equal to <paramref name=""testEnum3""/>.</param>
      /// <param name=""testEnum4"">The item to compare to.</param>
      /// <param name=""testEnumAction4"">The action to execute if the current item is equal to <paramref name=""testEnum4""/>.</param>
      public void Switch<TContext>(
         TContext context,
         TestEnum testEnum1, global::System.Action<TContext> testEnumAction1,
         TestEnum testEnum2, global::System.Action<TContext> testEnumAction2,
         TestEnum testEnum3, global::System.Action<TContext> testEnumAction3,
         TestEnum testEnum4, global::System.Action<TContext> testEnumAction4)
      {
         if (this == testEnum1)
         {
            testEnumAction1(context);
         }
         else if (this == testEnum2)
         {
            testEnumAction2(context);
         }
         else if (this == testEnum3)
         {
            testEnumAction3(context);
         }
         else if (this == testEnum4)
         {
            testEnumAction4(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      /// <param name=""testEnum3"">The item to compare to.</param>
      /// <param name=""testEnumFunc3"">The function to execute if the current item is equal to <paramref name=""testEnum3""/>.</param>
      /// <param name=""testEnum4"">The item to compare to.</param>
      /// <param name=""testEnumFunc4"">The function to execute if the current item is equal to <paramref name=""testEnum4""/>.</param>
      public T Switch<T>(
         TestEnum testEnum1, global::System.Func<T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<T> testEnumFunc2,
         TestEnum testEnum3, global::System.Func<T> testEnumFunc3,
         TestEnum testEnum4, global::System.Func<T> testEnumFunc4)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1();
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2();
         }
         else if (this == testEnum3)
         {
            return testEnumFunc3();
         }
         else if (this == testEnum4)
         {
            return testEnumFunc4();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      /// <param name=""testEnum3"">The item to compare to.</param>
      /// <param name=""testEnumFunc3"">The function to execute if the current item is equal to <paramref name=""testEnum3""/>.</param>
      /// <param name=""testEnum4"">The item to compare to.</param>
      /// <param name=""testEnumFunc4"">The function to execute if the current item is equal to <paramref name=""testEnum4""/>.</param>
      public T Switch<TContext, T>(
         TContext context,
         TestEnum testEnum1, global::System.Func<TContext, T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<TContext, T> testEnumFunc2,
         TestEnum testEnum3, global::System.Func<TContext, T> testEnumFunc3,
         TestEnum testEnum4, global::System.Func<TContext, T> testEnumFunc4)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1(context);
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2(context);
         }
         else if (this == testEnum3)
         {
            return testEnumFunc3(context);
         }
         else if (this == testEnum4)
         {
            return testEnumFunc4(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      private static global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum> GetLookup()
      {
         var lookup = new global::System.Collections.Generic.Dictionary<string, global::Thinktecture.Tests.TestEnum>(4, KeyEqualityComparer);

         void AddItem(global::Thinktecture.Tests.TestEnum item, string itemName)
         {
            if (item is null)
               throw new global::System.ArgumentNullException($""The item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (item.Key is null)
               throw new global::System.ArgumentException($""The \""Key\"" of the item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (lookup.ContainsKey(item.Key))
               throw new global::System.ArgumentException($""The type \""TestEnum\"" has multiple items with the identifier \""{item.Key}\""."");

            lookup.Add(item.Key, item);
         }

         AddItem(Item1, nameof(Item1));
         AddItem(Item2, nameof(Item2));
         AddItem(Item3, nameof(Item3));
         AddItem(Item4, nameof(Item4));

         return lookup;
      }
   }
}
");
   }

   [Fact]
   public void Should_generate_simple_class_which_implements_IValidatableEnum()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
	public partial class TestEnum : IValidatableEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new(""Item2"");
   }
}
";
      var output = GetGeneratedOutput<SmartEnumSourceGenerator>(source, typeof(IValidatableEnum<>).Assembly);

      AssertOutput(output, _GENERATED_HEADER + @"
namespace Thinktecture.Tests
{
   public class TestEnum_EnumTypeConverter : global::Thinktecture.ValueObjectTypeConverter<global::Thinktecture.Tests.TestEnum, string>
   {
      /// <inheritdoc />
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      protected override global::Thinktecture.Tests.TestEnum? ConvertFrom(string? key)
      {
         return global::Thinktecture.Tests.TestEnum.Get(key);
      }

      /// <inheritdoc />
      protected override string GetKeyValue(global::Thinktecture.Tests.TestEnum item)
      {
         return item.Key;
      }
   }

   [global::Thinktecture.Internal.KeyedValueObject]
   [global::System.ComponentModel.TypeConverter(typeof(global::Thinktecture.Tests.TestEnum_EnumTypeConverter))]
   partial class TestEnum : global::Thinktecture.IEnum<string, global::Thinktecture.Tests.TestEnum>, global::System.IEquatable<global::Thinktecture.Tests.TestEnum?>
   {
      [global::System.Runtime.CompilerServices.ModuleInitializer]
      internal static void ModuleInit()
      {
         var convertFromKey = new global::System.Func<string?, global::Thinktecture.Tests.TestEnum?>(global::Thinktecture.Tests.TestEnum.Get);
         global::System.Linq.Expressions.Expression<global::System.Func<string?, global::Thinktecture.Tests.TestEnum?>> convertFromKeyExpression = static key => global::Thinktecture.Tests.TestEnum.Get(key);

         var convertToKey = new global::System.Func<global::Thinktecture.Tests.TestEnum, string>(static item => item.Key);
         global::System.Linq.Expressions.Expression<global::System.Func<global::Thinktecture.Tests.TestEnum, string>> convertToKeyExpression = static item => item.Key;

         var validate = new global::Thinktecture.Internal.Validate<global::Thinktecture.Tests.TestEnum, string>(global::Thinktecture.Tests.TestEnum.Validate);

         var enumType = typeof(global::Thinktecture.Tests.TestEnum);
         var metadata = new global::Thinktecture.Internal.ValueObjectMetadata(enumType, typeof(string), true, true, convertFromKey, convertFromKeyExpression, null, convertToKey, convertToKeyExpression, validate);

         global::Thinktecture.Internal.ValueObjectMetadataLookup.AddMetadata(enumType, metadata);
      }

      public static global::System.Collections.Generic.IEqualityComparer<string?> KeyEqualityComparer => global::System.StringComparer.OrdinalIgnoreCase;

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>> _itemsLookup
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>>(GetLookup);

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>> _items
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>>(() => global::System.Linq.Enumerable.ToList(_itemsLookup.Value.Values).AsReadOnly());

      /// <summary>
      /// Gets all valid items.
      /// </summary>
      public static global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum> Items => _items.Value;

      /// <summary>
      /// The identifier of the item.
      /// </summary>
      public string Key { get; }

      /// <inheritdoc />
      public bool IsValid { get; }

      /// <summary>
      /// Checks whether current enumeration item is valid.
      /// </summary>
      /// <exception cref=""System.InvalidOperationException"">The enumeration item is not valid.</exception>
      public void EnsureValid()
      {
         if (!IsValid)
            throw new global::System.InvalidOperationException($""The current enumeration item of type \""TestEnum\"" with identifier \""{this.Key}\"" is not valid."");
      }

      private readonly global::System.Lazy<int> _hashCode;

      private TestEnum(string key)
         : this(key, true)
      {
      }

      private TestEnum(string key, bool isValid)
      {
         ValidateConstructorArguments(ref key, isValid);

         if (key is null)
            throw new global::System.ArgumentNullException(nameof(key));

         this.Key = key;
         this.IsValid = isValid;
         this._hashCode = new global::System.Lazy<int>(() => typeof(global::Thinktecture.Tests.TestEnum).GetHashCode() * 397 ^ KeyEqualityComparer.GetHashCode(key));
      }

      static partial void ValidateConstructorArguments(ref string key, bool isValid);

      /// <summary>
      /// Gets the identifier of the item.
      /// </summary>
      string global::Thinktecture.IKeyedValueObject<string>.GetKey()
      {
         return this.Key;
      }

      /// <summary>
      /// Gets an enumeration item for provided <paramref name=""key""/>.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <returns>An instance of <see cref=""TestEnum"" /> if <paramref name=""key""/> is not <c>null</c>; otherwise <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static global::Thinktecture.Tests.TestEnum? Get(string? key)
      {
         if (key is null)
            return default;

         if (!_itemsLookup.Value.TryGetValue(key, out var item))
         {
            item = CreateInvalidItem(key);

            if (item is null)
               throw new global::System.Exception(""The implementation of method 'CreateInvalidItem' must not return 'null'."");

            if (item.IsValid)
               throw new global::System.Exception(""The implementation of method 'CreateInvalidItem' must return an instance with property 'IsValid' equals to 'false'."");
         }

         return item;
      }

      private static global::Thinktecture.Tests.TestEnum CreateInvalidItem(string key)
      {
         return new global::Thinktecture.Tests.TestEnum(key, false);
      }

      /// <summary>
      /// Gets a valid enumeration item for provided <paramref name=""key""/> if a valid item exists.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns><c>true</c> if a valid item with provided <paramref name=""key""/> exists; <c>false</c> otherwise.</returns>
      public static bool TryGet([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::Thinktecture.Tests.TestEnum item)
      {
         if (key is null)
         {
            item = default;
            return false;
         }

         return _itemsLookup.Value.TryGetValue(key, out item);
      }

      /// <summary>
      /// Validates the provided <paramref name=""key""/> and returns a valid enumeration item if found.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns> <see cref=""System.ComponentModel.DataAnnotations.ValidationResult.Success""/> if a valid item with provided <paramref name=""key""/> exists; <see cref=""System.ComponentModel.DataAnnotations.ValidationResult""/> with an error message otherwise.</returns>
      public static global::System.ComponentModel.DataAnnotations.ValidationResult? Validate([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNull] out global::Thinktecture.Tests.TestEnum item)
      {
         return global::Thinktecture.Tests.TestEnum.TryGet(key, out item)
               ? global::System.ComponentModel.DataAnnotations.ValidationResult.Success
               : new global::System.ComponentModel.DataAnnotations.ValidationResult($""The enumeration item of type \""TestEnum\"" with identifier \""{key}\"" is not valid."");
      }

      /// <summary>
      /// Implicit conversion to the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""item"">Item to covert.</param>
      /// <returns>The <see cref=""TestEnum.Key""/> of provided <paramref name=""item""/> or <c>default</c> if <paramref name=""item""/> is <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""item"")]
      public static implicit operator string?(global::Thinktecture.Tests.TestEnum? item)
      {
         return item is null ? default : item.Key;
      }

      /// <summary>
      /// Explicit conversion from the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""key"">Value to covert.</param>
      /// <returns>An instance of <see cref=""TestEnum""/> if the <paramref name=""key""/> is a known item or implements <see cref=""Thinktecture.IValidatableEnum{TKey}""/>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static explicit operator global::Thinktecture.Tests.TestEnum?(string? key)
      {
         return global::Thinktecture.Tests.TestEnum.Get(key);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>true</c> if items are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestEnum? item1, global::Thinktecture.Tests.TestEnum? item2)
      {
         if (item1 is null)
            return item2 is null;

         return item1.Equals(item2);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>false</c> if items are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestEnum? item1, global::Thinktecture.Tests.TestEnum? item2)
      {
         return !(item1 == item2);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestEnum? other)
      {
         if (other is null)
            return false;

         if (!global::System.Object.ReferenceEquals(GetType(), other.GetType()))
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         if (this.IsValid != other.IsValid)
            return false;

         return KeyEqualityComparer.Equals(this.Key, other.Key);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestEnum item && Equals(item);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return _hashCode.Value;
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this.Key.ToString();
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch(
         TestEnum testEnum1, global::System.Action testEnumAction1,
         TestEnum testEnum2, global::System.Action testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1();
         }
         else if (this == testEnum2)
         {
            testEnumAction2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch<TContext>(
         TContext context,
         TestEnum testEnum1, global::System.Action<TContext> testEnumAction1,
         TestEnum testEnum2, global::System.Action<TContext> testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1(context);
         }
         else if (this == testEnum2)
         {
            testEnumAction2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<T>(
         TestEnum testEnum1, global::System.Func<T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1();
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<TContext, T>(
         TContext context,
         TestEnum testEnum1, global::System.Func<TContext, T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<TContext, T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1(context);
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      private static global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum> GetLookup()
      {
         var lookup = new global::System.Collections.Generic.Dictionary<string, global::Thinktecture.Tests.TestEnum>(2, KeyEqualityComparer);

         void AddItem(global::Thinktecture.Tests.TestEnum item, string itemName)
         {
            if (item is null)
               throw new global::System.ArgumentNullException($""The item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (item.Key is null)
               throw new global::System.ArgumentException($""The \""Key\"" of the item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (!item.IsValid)
               throw new global::System.ArgumentException($""All \""public static readonly\"" fields of type \""TestEnum\"" must be valid but the item \""{itemName}\"" with the identifier \""{item.Key}\"" is not."");

            if (lookup.ContainsKey(item.Key))
               throw new global::System.ArgumentException($""The type \""TestEnum\"" has multiple items with the identifier \""{item.Key}\""."");

            lookup.Add(item.Key, item);
         }

         AddItem(Item1, nameof(Item1));
         AddItem(Item2, nameof(Item2));

         return lookup;
      }
   }
}
");
   }

   [Fact]
   public void Should_generate_simple_struct_which_implements_IValidatableEnum()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
	public readonly partial struct TestEnum : IValidatableEnum<string>
	{
      public static readonly TestEnum Item1 = new(""Item1"");
      public static readonly TestEnum Item2 = new(""Item2"");
   }
}
";
      var output = GetGeneratedOutput<SmartEnumSourceGenerator>(source, typeof(IValidatableEnum<>).Assembly);

      AssertOutput(output, _GENERATED_HEADER + @"
namespace Thinktecture.Tests
{
   public class TestEnum_EnumTypeConverter : global::Thinktecture.ValueObjectTypeConverter<global::Thinktecture.Tests.TestEnum, string>
   {
      /// <inheritdoc />
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      protected override global::Thinktecture.Tests.TestEnum ConvertFrom(string? key)
      {
         return global::Thinktecture.Tests.TestEnum.Get(key);
      }

      /// <inheritdoc />
      protected override string GetKeyValue(global::Thinktecture.Tests.TestEnum item)
      {
         return item.Key;
      }
   }

   [global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Auto)]
   [global::Thinktecture.Internal.KeyedValueObject]
   [global::System.ComponentModel.TypeConverter(typeof(global::Thinktecture.Tests.TestEnum_EnumTypeConverter))]
   partial struct TestEnum : global::Thinktecture.IEnum<string, global::Thinktecture.Tests.TestEnum>, global::System.IEquatable<global::Thinktecture.Tests.TestEnum>
   {
      [global::System.Runtime.CompilerServices.ModuleInitializer]
      internal static void ModuleInit()
      {
         var convertFromKey = new global::System.Func<string?, global::Thinktecture.Tests.TestEnum>(global::Thinktecture.Tests.TestEnum.Get);
         global::System.Linq.Expressions.Expression<global::System.Func<string?, global::Thinktecture.Tests.TestEnum>> convertFromKeyExpression = static key => global::Thinktecture.Tests.TestEnum.Get(key);

         var convertToKey = new global::System.Func<global::Thinktecture.Tests.TestEnum, string>(static item => item.Key);
         global::System.Linq.Expressions.Expression<global::System.Func<global::Thinktecture.Tests.TestEnum, string>> convertToKeyExpression = static item => item.Key;

         var validate = new global::Thinktecture.Internal.Validate<global::Thinktecture.Tests.TestEnum, string>(global::Thinktecture.Tests.TestEnum.Validate);

         var enumType = typeof(global::Thinktecture.Tests.TestEnum);
         var metadata = new global::Thinktecture.Internal.ValueObjectMetadata(enumType, typeof(string), true, true, convertFromKey, convertFromKeyExpression, null, convertToKey, convertToKeyExpression, validate);

         global::Thinktecture.Internal.ValueObjectMetadataLookup.AddMetadata(enumType, metadata);
      }

      public static global::System.Collections.Generic.IEqualityComparer<string?> KeyEqualityComparer => global::System.StringComparer.OrdinalIgnoreCase;

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>> _itemsLookup
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>>(GetLookup);

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>> _items
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>>(() => global::System.Linq.Enumerable.ToList(_itemsLookup.Value.Values).AsReadOnly());

      /// <summary>
      /// Gets all valid items.
      /// </summary>
      public static global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum> Items => _items.Value;

      /// <summary>
      /// The identifier of the item.
      /// </summary>
      public string Key { get; }

      /// <inheritdoc />
      public bool IsValid { get; }

      /// <summary>
      /// Checks whether current enumeration item is valid.
      /// </summary>
      /// <exception cref=""System.InvalidOperationException"">The enumeration item is not valid.</exception>
      public void EnsureValid()
      {
         if (!IsValid)
            throw new global::System.InvalidOperationException($""The current enumeration item of type \""TestEnum\"" with identifier \""{this.Key}\"" is not valid."");
      }

      private readonly global::System.Lazy<int> _hashCode;

      private TestEnum(string key)
         : this(key, true)
      {
      }

      private TestEnum(string key, bool isValid)
      {
         ValidateConstructorArguments(ref key, isValid);

         if (key is null)
            throw new global::System.ArgumentNullException(nameof(key));

         this.Key = key;
         this.IsValid = isValid;
         this._hashCode = new global::System.Lazy<int>(() => typeof(global::Thinktecture.Tests.TestEnum).GetHashCode() * 397 ^ KeyEqualityComparer.GetHashCode(key));
      }

      static partial void ValidateConstructorArguments(ref string key, bool isValid);

      /// <summary>
      /// Gets the identifier of the item.
      /// </summary>
      string global::Thinktecture.IKeyedValueObject<string>.GetKey()
      {
         return this.Key;
      }

      /// <summary>
      /// Gets an enumeration item for provided <paramref name=""key""/>.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <returns>An instance of <see cref=""TestEnum"" /> if <paramref name=""key""/> is not <c>null</c>; otherwise <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static global::Thinktecture.Tests.TestEnum Get(string? key)
      {
         if (key is null)
            return default;

         if (!_itemsLookup.Value.TryGetValue(key, out var item))
         {
            item = CreateInvalidItem(key);

            if (item.IsValid)
               throw new global::System.Exception(""The implementation of method 'CreateInvalidItem' must return an instance with property 'IsValid' equals to 'false'."");
         }

         return item;
      }

      private static global::Thinktecture.Tests.TestEnum CreateInvalidItem(string key)
      {
         return new global::Thinktecture.Tests.TestEnum(key, false);
      }

      /// <summary>
      /// Gets a valid enumeration item for provided <paramref name=""key""/> if a valid item exists.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns><c>true</c> if a valid item with provided <paramref name=""key""/> exists; <c>false</c> otherwise.</returns>
      public static bool TryGet([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::Thinktecture.Tests.TestEnum item)
      {
         if (key is null)
         {
            item = default;
            return false;
         }

         return _itemsLookup.Value.TryGetValue(key, out item);
      }

      /// <summary>
      /// Validates the provided <paramref name=""key""/> and returns a valid enumeration item if found.
      /// </summary>
      /// <param name=""key"">The identifier to return an enumeration item for.</param>
      /// <param name=""item"">A valid instance of <see cref=""TestEnum""/>; otherwise <c>null</c>.</param>
      /// <returns> <see cref=""System.ComponentModel.DataAnnotations.ValidationResult.Success""/> if a valid item with provided <paramref name=""key""/> exists; <see cref=""System.ComponentModel.DataAnnotations.ValidationResult""/> with an error message otherwise.</returns>
      public static global::System.ComponentModel.DataAnnotations.ValidationResult? Validate([global::System.Diagnostics.CodeAnalysis.AllowNull] string key, [global::System.Diagnostics.CodeAnalysis.MaybeNull] out global::Thinktecture.Tests.TestEnum item)
      {
         return global::Thinktecture.Tests.TestEnum.TryGet(key, out item)
               ? global::System.ComponentModel.DataAnnotations.ValidationResult.Success
               : new global::System.ComponentModel.DataAnnotations.ValidationResult($""The enumeration item of type \""TestEnum\"" with identifier \""{key}\"" is not valid."");
      }

      /// <summary>
      /// Implicit conversion to the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""item"">Item to covert.</param>
      /// <returns>The <see cref=""TestEnum.Key""/> of provided <paramref name=""item""/> or <c>default</c> if <paramref name=""item""/> is <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""item"")]
      public static implicit operator string?(global::Thinktecture.Tests.TestEnum item)
      {
         return item.Key;
      }

      /// <summary>
      /// Explicit conversion from the type <see cref=""string""/>.
      /// </summary>
      /// <param name=""key"">Value to covert.</param>
      /// <returns>An instance of <see cref=""TestEnum""/> if the <paramref name=""key""/> is a known item or implements <see cref=""Thinktecture.IValidatableEnum{TKey}""/>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(""key"")]
      public static explicit operator global::Thinktecture.Tests.TestEnum(string? key)
      {
         return global::Thinktecture.Tests.TestEnum.Get(key);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>true</c> if items are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestEnum item1, global::Thinktecture.Tests.TestEnum item2)
      {
         return item1.Equals(item2);
      }

      /// <summary>
      /// Compares to instances of <see cref=""TestEnum""/>.
      /// </summary>
      /// <param name=""item1"">Instance to compare.</param>
      /// <param name=""item2"">Another instance to compare.</param>
      /// <returns><c>false</c> if items are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestEnum item1, global::Thinktecture.Tests.TestEnum item2)
      {
         return !(item1 == item2);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestEnum other)
      {
         if (this.IsValid != other.IsValid)
            return false;

         return KeyEqualityComparer.Equals(this.Key, other.Key);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestEnum item && Equals(item);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return _hashCode.Value;
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this.Key?.ToString();
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch(
         TestEnum testEnum1, global::System.Action testEnumAction1,
         TestEnum testEnum2, global::System.Action testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1();
         }
         else if (this == testEnum2)
         {
            testEnumAction2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch<TContext>(
         TContext context,
         TestEnum testEnum1, global::System.Action<TContext> testEnumAction1,
         TestEnum testEnum2, global::System.Action<TContext> testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1(context);
         }
         else if (this == testEnum2)
         {
            testEnumAction2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<T>(
         TestEnum testEnum1, global::System.Func<T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1();
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<TContext, T>(
         TContext context,
         TestEnum testEnum1, global::System.Func<TContext, T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<TContext, T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1(context);
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      private static global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum> GetLookup()
      {
         var lookup = new global::System.Collections.Generic.Dictionary<string, global::Thinktecture.Tests.TestEnum>(2, KeyEqualityComparer);

         void AddItem(global::Thinktecture.Tests.TestEnum item, string itemName)
         {
            if (item.Key is null)
               throw new global::System.ArgumentException($""The \""Key\"" of the item \""{itemName}\"" of type \""TestEnum\"" must not be null."");

            if (!item.IsValid)
               throw new global::System.ArgumentException($""All \""public static readonly\"" fields of type \""TestEnum\"" must be valid but the item \""{itemName}\"" with the identifier \""{item.Key}\"" is not."");

            if (lookup.ContainsKey(item.Key))
               throw new global::System.ArgumentException($""The type \""TestEnum\"" has multiple items with the identifier \""{item.Key}\""."");

            lookup.Add(item.Key, item);
         }

         AddItem(Item1, nameof(Item1));
         AddItem(Item2, nameof(Item2));

         return lookup;
      }
   }
}
");
   }

   [Fact]
   public void Should_generate_advanced_class_which_implements_IValidatableEnum()
   {
      var source = @"
using System;

namespace Thinktecture.Tests
{
   [EnumGeneration(KeyPropertyName = ""Name"")]
	public partial class TestEnum : IValidatableEnum<string>
	{
      public static System.Collections.Generic.IEqualityComparer<string> KeyEqualityComparer = StringComparer.Ordinal;

		public static readonly TestEnum Item1 = new(""Item1"", 1, -1, ""ReferenceProperty1"", ""NullableReferenceProperty1"", 11, ""ReferenceField1"");
      public static readonly TestEnum Item2 = new DerivedEnum(""Item2"", 2, 2, ""ReferenceProperty2"", ""NullableReferenceProperty2"", 22, ""ReferenceField2"");

      public int StructProperty { get; }
      public int? NullableStructProperty { get; }
      public string ReferenceProperty { get; }
      public string? NullableReferenceProperty { get; }
      public readonly int StructField;
      public readonly string ReferenceField;

      static partial void ValidateConstructorArguments(
         int name, bool isValid,
         int structProperty, int? nullableStructProperty,
         string referenceProperty, string? nullableReferenceProperty,
         int structField, string referenceField)
      {
      }

      private static ProductCategory CreateInvalidItem(string name)
      {
         return new(name, false, 0, null, String.Empty, null, 0, null);
      }

      private class DerivedEnum : EnumWithDerivedType
      {
         public DerivedEnum(
            int name, bool isValid,
            int structProperty, int? nullableStructProperty,
            string referenceProperty, string? nullableReferenceProperty,
            int structField, string referenceField)
            : base(name, isValid, structProperty, nullableStructProperty, referenceProperty, nullableReferenceProperty, structField, referenceField)
         {
         }
      }
   }
}
";

      var comparerName = nameof(IEnum<string>.KeyEqualityComparer);

      var output = GetGeneratedOutput<SmartEnumSourceGenerator>(source, typeof(IValidatableEnum<>).Assembly);

      AssertOutput(output, _GENERATED_HEADER + $$"""

namespace Thinktecture.Tests
{
   public class TestEnum_EnumTypeConverter : global::Thinktecture.ValueObjectTypeConverter<global::Thinktecture.Tests.TestEnum, string>
   {
      /// <inheritdoc />
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("name")]
      protected override global::Thinktecture.Tests.TestEnum? ConvertFrom(string? name)
      {
         return global::Thinktecture.Tests.TestEnum.Get(name);
      }

      /// <inheritdoc />
      protected override string GetKeyValue(global::Thinktecture.Tests.TestEnum item)
      {
         return item.Name;
      }
   }

   [global::Thinktecture.Internal.KeyedValueObject]
   [global::System.ComponentModel.TypeConverter(typeof(global::Thinktecture.Tests.TestEnum_EnumTypeConverter))]
   partial class TestEnum : global::Thinktecture.IEnum<string, global::Thinktecture.Tests.TestEnum>, global::System.IEquatable<global::Thinktecture.Tests.TestEnum?>
   {
      [global::System.Runtime.CompilerServices.ModuleInitializer]
      internal static void ModuleInit()
      {
         var convertFromKey = new global::System.Func<string?, global::Thinktecture.Tests.TestEnum?>(global::Thinktecture.Tests.TestEnum.Get);
         global::System.Linq.Expressions.Expression<global::System.Func<string?, global::Thinktecture.Tests.TestEnum?>> convertFromKeyExpression = static name => global::Thinktecture.Tests.TestEnum.Get(name);

         var convertToKey = new global::System.Func<global::Thinktecture.Tests.TestEnum, string>(static item => item.Name);
         global::System.Linq.Expressions.Expression<global::System.Func<global::Thinktecture.Tests.TestEnum, string>> convertToKeyExpression = static item => item.Name;

         var validate = new global::Thinktecture.Internal.Validate<global::Thinktecture.Tests.TestEnum, string>(global::Thinktecture.Tests.TestEnum.Validate);

         var enumType = typeof(global::Thinktecture.Tests.TestEnum);
         var metadata = new global::Thinktecture.Internal.ValueObjectMetadata(enumType, typeof(string), true, true, convertFromKey, convertFromKeyExpression, null, convertToKey, convertToKeyExpression, validate);

         global::Thinktecture.Internal.ValueObjectMetadataLookup.AddMetadata(enumType, metadata);
      }

      public static global::System.Collections.Generic.IEqualityComparer<string?> KeyEqualityComparer => global::System.StringComparer.OrdinalIgnoreCase;

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>> _itemsLookup
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum>>(GetLookup);

      private static readonly global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>> _items
                                             = new global::System.Lazy<global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum>>(() => global::System.Linq.Enumerable.ToList(_itemsLookup.Value.Values).AsReadOnly());

      /// <summary>
      /// Gets all valid items.
      /// </summary>
      public static global::System.Collections.Generic.IReadOnlyList<global::Thinktecture.Tests.TestEnum> Items => _items.Value;

      /// <summary>
      /// The identifier of the item.
      /// </summary>
      public string Name { get; }

      /// <inheritdoc />
      public bool IsValid { get; }

      /// <summary>
      /// Checks whether current enumeration item is valid.
      /// </summary>
      /// <exception cref="System.InvalidOperationException">The enumeration item is not valid.</exception>
      public void EnsureValid()
      {
         if (!IsValid)
            throw new global::System.InvalidOperationException($"The current enumeration item of type \"TestEnum\" with identifier \"{this.Name}\" is not valid.");
      }

      private readonly global::System.Lazy<int> _hashCode;

      private TestEnum(string name, int structProperty, int? nullableStructProperty, string referenceProperty, string? nullableReferenceProperty, int structField, string referenceField)
         : this(name, true, structProperty, nullableStructProperty, referenceProperty, nullableReferenceProperty, structField, referenceField)
      {
      }

      private TestEnum(string name, bool isValid, int structProperty, int? nullableStructProperty, string referenceProperty, string? nullableReferenceProperty, int structField, string referenceField)
      {
         ValidateConstructorArguments(ref name, isValid, ref structProperty, ref nullableStructProperty, ref referenceProperty, ref nullableReferenceProperty, ref structField, ref referenceField);

         if (name is null)
            throw new global::System.ArgumentNullException(nameof(name));

         this.Name = name;
         this.IsValid = isValid;
         this.StructProperty = structProperty;
         this.NullableStructProperty = nullableStructProperty;
         this.ReferenceProperty = referenceProperty;
         this.NullableReferenceProperty = nullableReferenceProperty;
         this.StructField = structField;
         this.ReferenceField = referenceField;
         this._hashCode = new global::System.Lazy<int>(() => typeof(global::Thinktecture.Tests.TestEnum).GetHashCode() * 397 ^ {{ comparerName}}.GetHashCode(name));
      }

      static partial void ValidateConstructorArguments(ref string name, bool isValid, ref int structProperty, ref int? nullableStructProperty, ref string referenceProperty, ref string? nullableReferenceProperty, ref int structField, ref string referenceField);

      /// <summary>
      /// Gets the identifier of the item.
      /// </summary>
      string global::Thinktecture.IKeyedValueObject<string>.GetKey()
      {
         return this.Name;
      }

      /// <summary>
      /// Gets an enumeration item for provided <paramref name="name"/>.
      /// </summary>
      /// <param name="name">The identifier to return an enumeration item for.</param>
      /// <returns>An instance of <see cref="TestEnum" /> if <paramref name="name"/> is not <c>null</c>; otherwise <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("name")]
      public static global::Thinktecture.Tests.TestEnum? Get(string? name)
      {
         if (name is null)
            return default;

         if (!_itemsLookup.Value.TryGetValue(name, out var item))
         {
            item = CreateInvalidItem(name);

            if (item is null)
               throw new global::System.Exception("The implementation of method 'CreateInvalidItem' must not return 'null'.");

            if (item.IsValid)
               throw new global::System.Exception("The implementation of method 'CreateInvalidItem' must return an instance with property 'IsValid' equals to 'false'.");

            if (global::Thinktecture.Tests.TestEnum.TryGet(item.Name, out _))
               throw new global::System.Exception("The implementation of method 'CreateInvalidItem' must not return an instance with property 'Name' equals to one of a valid item.");
         }

         return item;
      }

      /// <summary>
      /// Gets a valid enumeration item for provided <paramref name="name"/> if a valid item exists.
      /// </summary>
      /// <param name="name">The identifier to return an enumeration item for.</param>
      /// <param name="item">A valid instance of <see cref="TestEnum"/>; otherwise <c>null</c>.</param>
      /// <returns><c>true</c> if a valid item with provided <paramref name="name"/> exists; <c>false</c> otherwise.</returns>
      public static bool TryGet([global::System.Diagnostics.CodeAnalysis.AllowNull] string name, [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::Thinktecture.Tests.TestEnum item)
      {
         if (name is null)
         {
            item = default;
            return false;
         }

         return _itemsLookup.Value.TryGetValue(name, out item);
      }

      /// <summary>
      /// Validates the provided <paramref name="name"/> and returns a valid enumeration item if found.
      /// </summary>
      /// <param name="name">The identifier to return an enumeration item for.</param>
      /// <param name="item">A valid instance of <see cref="TestEnum"/>; otherwise <c>null</c>.</param>
      /// <returns> <see cref="System.ComponentModel.DataAnnotations.ValidationResult.Success"/> if a valid item with provided <paramref name="name"/> exists; <see cref="System.ComponentModel.DataAnnotations.ValidationResult"/> with an error message otherwise.</returns>
      public static global::System.ComponentModel.DataAnnotations.ValidationResult? Validate([global::System.Diagnostics.CodeAnalysis.AllowNull] string name, [global::System.Diagnostics.CodeAnalysis.MaybeNull] out global::Thinktecture.Tests.TestEnum item)
      {
         return global::Thinktecture.Tests.TestEnum.TryGet(name, out item)
               ? global::System.ComponentModel.DataAnnotations.ValidationResult.Success
               : new global::System.ComponentModel.DataAnnotations.ValidationResult($"The enumeration item of type \"TestEnum\" with identifier \"{name}\" is not valid.");
      }

      /// <summary>
      /// Implicit conversion to the type <see cref="string"/>.
      /// </summary>
      /// <param name="item">Item to covert.</param>
      /// <returns>The <see cref="TestEnum.Name"/> of provided <paramref name="item"/> or <c>default</c> if <paramref name="item"/> is <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
      public static implicit operator string?(global::Thinktecture.Tests.TestEnum? item)
      {
         return item is null ? default : item.Name;
      }

      /// <summary>
      /// Explicit conversion from the type <see cref="string"/>.
      /// </summary>
      /// <param name="name">Value to covert.</param>
      /// <returns>An instance of <see cref="TestEnum"/> if the <paramref name="name"/> is a known item or implements <see cref="Thinktecture.IValidatableEnum{TKey}"/>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("name")]
      public static explicit operator global::Thinktecture.Tests.TestEnum?(string? name)
      {
         return global::Thinktecture.Tests.TestEnum.Get(name);
      }

      /// <summary>
      /// Compares to instances of <see cref="TestEnum"/>.
      /// </summary>
      /// <param name="item1">Instance to compare.</param>
      /// <param name="item2">Another instance to compare.</param>
      /// <returns><c>true</c> if items are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestEnum? item1, global::Thinktecture.Tests.TestEnum? item2)
      {
         if (item1 is null)
            return item2 is null;

         return item1.Equals(item2);
      }

      /// <summary>
      /// Compares to instances of <see cref="TestEnum"/>.
      /// </summary>
      /// <param name="item1">Instance to compare.</param>
      /// <param name="item2">Another instance to compare.</param>
      /// <returns><c>false</c> if items are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestEnum? item1, global::Thinktecture.Tests.TestEnum? item2)
      {
         return !(item1 == item2);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestEnum? other)
      {
         if (other is null)
            return false;

         if (!global::System.Object.ReferenceEquals(GetType(), other.GetType()))
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         if (this.IsValid != other.IsValid)
            return false;

         return {{comparerName}}.Equals(this.Name, other.Name);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestEnum item && Equals(item);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return _hashCode.Value;
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this.Name.ToString();
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name="testEnum1">The item to compare to.</param>
      /// <param name="testEnumAction1">The action to execute if the current item is equal to <paramref name="testEnum1"/>.</param>
      /// <param name="testEnum2">The item to compare to.</param>
      /// <param name="testEnumAction2">The action to execute if the current item is equal to <paramref name="testEnum2"/>.</param>
      public void Switch(
         TestEnum testEnum1, global::System.Action testEnumAction1,
         TestEnum testEnum2, global::System.Action testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1();
         }
         else if (this == testEnum2)
         {
            testEnumAction2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($"No action provided for the item '{this}'.");
         }
      }

      /// <summary>
      /// Executes an action depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumAction1"">The action to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumAction2"">The action to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public void Switch<TContext>(
         TContext context,
         TestEnum testEnum1, global::System.Action<TContext> testEnumAction1,
         TestEnum testEnum2, global::System.Action<TContext> testEnumAction2)
      {
         if (this == testEnum1)
         {
            testEnumAction1(context);
         }
         else if (this == testEnum2)
         {
            testEnumAction2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No action provided for the item '{this}'."");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name="testEnum1">The item to compare to.</param>
      /// <param name="testEnumFunc1">The function to execute if the current item is equal to <paramref name="testEnum1"/>.</param>
      /// <param name="testEnum2">The item to compare to.</param>
      /// <param name="testEnumFunc2">The function to execute if the current item is equal to <paramref name="testEnum2"/>.</param>
      public T Switch<T>(
         TestEnum testEnum1, global::System.Func<T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1();
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2();
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($"No function provided for the item '{this}'.");
         }
      }

      /// <summary>
      /// Executes a function depending on the current item.
      /// </summary>
      /// <param name=""context"">Context to be passed to the callbacks.</param>
      /// <param name=""testEnum1"">The item to compare to.</param>
      /// <param name=""testEnumFunc1"">The function to execute if the current item is equal to <paramref name=""testEnum1""/>.</param>
      /// <param name=""testEnum2"">The item to compare to.</param>
      /// <param name=""testEnumFunc2"">The function to execute if the current item is equal to <paramref name=""testEnum2""/>.</param>
      public T Switch<TContext, T>(
         TContext context,
         TestEnum testEnum1, global::System.Func<TContext, T> testEnumFunc1,
         TestEnum testEnum2, global::System.Func<TContext, T> testEnumFunc2)
      {
         if (this == testEnum1)
         {
            return testEnumFunc1(context);
         }
         else if (this == testEnum2)
         {
            return testEnumFunc2(context);
         }
         else
         {
            throw new global::System.ArgumentOutOfRangeException($""No function provided for the item '{this}'."");
         }
      }

      private static global::System.Collections.Generic.IReadOnlyDictionary<string, global::Thinktecture.Tests.TestEnum> GetLookup()
      {
         var lookup = new global::System.Collections.Generic.Dictionary<string, global::Thinktecture.Tests.TestEnum>(2, {{comparerName}});

         void AddItem(global::Thinktecture.Tests.TestEnum item, string itemName)
         {
            if (item is null)
               throw new global::System.ArgumentNullException($"The item \"{itemName}\" of type \"TestEnum\" must not be null.");

            if (item.Name is null)
               throw new global::System.ArgumentException($"The \"Name\" of the item \"{itemName}\" of type \"TestEnum\" must not be null.");

            if (!item.IsValid)
               throw new global::System.ArgumentException($"All \"public static readonly\" fields of type \"TestEnum\" must be valid but the item \"{itemName}\" with the identifier \"{item.Name}\" is not.");

            if (lookup.ContainsKey(item.Name))
               throw new global::System.ArgumentException($"The type \"TestEnum\" has multiple items with the identifier \"{item.Name}\".");

            lookup.Add(item.Name, item);
         }

         AddItem(Item1, nameof(Item1));
         AddItem(Item2, nameof(Item2));

         return lookup;
      }
   }
}

""" );
   }
}
