// <auto-generated />
#nullable enable

namespace Thinktecture.Tests
{
   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
   sealed partial class TestValueObject : global::System.IEquatable<global::Thinktecture.Tests.TestValueObject?>,
      global::Thinktecture.IKeyedObject<int>,
      global::Thinktecture.IConvertible<int>,
      global::Thinktecture.Internal.IMetadataOwner
   {
      static global::Thinktecture.Internal.Metadata global::Thinktecture.Internal.IMetadataOwner.Metadata { get; }
         = new global::Thinktecture.Internal.Metadata.Keyed.ValueObject(typeof(global::Thinktecture.Tests.TestValueObject))
         {
            KeyType = typeof(int),
            ValidationErrorType = typeof(global::Thinktecture.ValidationError),
            ConvertToKey = static int (global::Thinktecture.Tests.TestValueObject item) => item._value,
            ConvertToKeyExpression = static int (global::Thinktecture.Tests.TestValueObject item) => item._value,
            GetKey = static object (object item) => ((global::Thinktecture.Tests.TestValueObject)item)._value,
            ConvertFromKey = null,
            ConvertFromKeyExpression = null,
            ConvertFromKeyExpressionViaConstructor = static global::Thinktecture.Tests.TestValueObject (int @value) => new global::Thinktecture.Tests.TestValueObject(@value),
            TryGetFromKey = null
         };

      /// <summary>
      /// The identifier of this object.
      /// </summary>
      private readonly int _value;

      /// <summary>
      /// Gets the identifier of the item.
      /// </summary>
      [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
      int global::Thinktecture.IConvertible<int>.ToValue()
      {
         return this._value;
      }

      /// <summary>
      /// Implicit conversion to the type <see cref="int"/>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>The <see cref="_value"/> of provided <paramref name="obj"/> or <c>default</c> if <paramref name="obj"/> is <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("obj")]
      public static implicit operator int?(global::Thinktecture.Tests.TestValueObject? obj)
      {
         return obj?._value;
      }

      /// <summary>
      /// Explicit conversion to the type <see cref="int"/>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>The <see cref="_value"/> of provided <paramref name="obj"/>.</returns>
      /// <exception cref="System.NullReferenceException">If <paramref name="obj"/> is <c>null</c>.</exception>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("obj")]
      public static explicit operator int(global::Thinktecture.Tests.TestValueObject obj)
      {
         if(obj is null)
            throw new global::System.NullReferenceException();

         return obj._value;
      }

      /// <summary>
      /// Initializes a new instance of the <see cref="TestValueObject"/> type.
      /// </summary>
      private TestValueObject(int @value)
      {
         ValidateConstructorArguments(ref @value);

         this._value = @value;
      }

      static partial void ValidateConstructorArguments(ref int @value);

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestValueObject obj && Equals(obj);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestValueObject? other)
      {
         if (other is null)
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         return this._value.Equals(other._value);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return this._value.GetHashCode();
      }

      /// <inheritdoc />
      public override string ToString()
      {
         return this._value.ToString();
      }
   }
}
