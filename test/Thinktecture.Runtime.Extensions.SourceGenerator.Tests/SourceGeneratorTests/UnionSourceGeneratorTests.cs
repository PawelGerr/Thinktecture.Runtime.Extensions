using System.Linq;
using Thinktecture.CodeAnalysis.DiscriminatedUnions;
using Xunit.Abstractions;

namespace Thinktecture.Runtime.Tests.SourceGeneratorTests;

public class UnionSourceGeneratorTests : SourceGeneratorTestsBase
{
   private const string _GENERATED_HEADER = """
                                            // <auto-generated />
                                            #nullable enable


                                            """;

   public UnionSourceGeneratorTests(ITestOutputHelper output)
      : base(output)
   {
   }

   [Fact]
   public void Should_generate_class_with_string_and_int()
   {
      var source = """
                   using System;

                   namespace Thinktecture.Tests
                   {
                   	[Union<string, int>]
                   	public partial class TestUnion;
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute<,>).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests
                                                   {
                                                      sealed partial class TestUnion :
                                                         global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
                                                         global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>
                                                      {
                                                         private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

                                                         private readonly int _valueIndex;

                                                         private readonly string? _string;
                                                         private readonly int _int32;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>string</c>.
                                                         /// </summary>
                                                         public bool IsString => this._valueIndex == 1;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>int</c>.
                                                         /// </summary>
                                                         public bool IsInt32 => this._valueIndex == 2;

                                                         /// <summary>
                                                         /// Gets the current value as <c>string</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>string</c>.</exception>
                                                         public string AsString => IsString ? this._string! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>int</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>int</c>.</exception>
                                                         public int AsInt32 => IsInt32 ? this._int32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

                                                         /// <summary>
                                                         /// Gets the current value as <see cref="object"/>.
                                                         /// </summary>
                                                         public object Value => this._valueIndex switch
                                                         {
                                                            1 => this._string!,
                                                            2 => this._int32,
                                                            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                         };

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="string"/>.
                                                         /// </summary>
                                                         /// <param name="string">Value to create a new instance for.</param>
                                                         public TestUnion(string @string)
                                                         {
                                                            this._string = @string;
                                                            this._valueIndex = 1;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="int32"/>.
                                                         /// </summary>
                                                         /// <param name="int32">Value to create a new instance for.</param>
                                                         public TestUnion(int int32)
                                                         {
                                                            this._int32 = int32;
                                                            this._valueIndex = 2;
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch(
                                                            global::System.Action<string> @string,
                                                            global::System.Action<int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch<TContext>(
                                                            TContext context,
                                                            global::System.Action<TContext, string> @string,
                                                            global::System.Action<TContext, int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(context, this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(context, this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TResult>(
                                                            global::System.Func<string, TResult> @string,
                                                            global::System.Func<int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(this._string!);
                                                               case 2:
                                                                  return int32(this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TContext, TResult>(
                                                            TContext context,
                                                            global::System.Func<TContext, string, TResult> @string,
                                                            global::System.Func<TContext, int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(context, this._string!);
                                                               case 2:
                                                                  return int32(context, this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Maps current value to an instance of type <typeparamref name="TResult"/>.
                                                         /// </summary>
                                                         /// <param name="string">The instance to return if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The instance to return if the current value is of type <c>int</c>.</param>
                                                         public TResult Map<TResult>(
                                                            TResult @string,
                                                            TResult int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string;
                                                               case 2:
                                                                  return int32;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(string value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(int value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>string</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>string</c>.</exception>
                                                         public static explicit operator string(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsString;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>int</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>int</c>.</exception>
                                                         public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsInt32;
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
                                                         public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (obj is null)
                                                               return other is null;

                                                            return obj.Equals(other);
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
                                                         public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            return !(obj == other);
                                                         }

                                                         /// <inheritdoc />
                                                         public override bool Equals(object? other)
                                                         {
                                                            return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
                                                         }

                                                         /// <inheritdoc />
                                                         public bool Equals(global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (other is null)
                                                               return false;

                                                            if (ReferenceEquals(this, other))
                                                               return true;

                                                            if (this._valueIndex != other._valueIndex)
                                                               return false;

                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string is null ? other._string is null : this._string.Equals(other._string, global::System.StringComparison.OrdinalIgnoreCase),
                                                               2 => this._int32.Equals(other._int32),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override int GetHashCode()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._string?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0),
                                                               2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._int32.GetHashCode()),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override string? ToString()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string,
                                                               2 => this._int32.ToString(),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }
                                                      }
                                                   }

                                                   """);
   }

   [Fact]
   public void Should_generate_class_with_string_and_int_with_SwitchPartially()
   {
      var source = """
                   using System;

                   namespace Thinktecture.Tests
                   {
                   	[Union<string, int>(SwitchMethods = SwitchMapMethodsGeneration.DefaultWithPartialOverloads)]
                   	public partial class TestUnion;
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute<,>).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests
                                                   {
                                                      sealed partial class TestUnion :
                                                         global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
                                                         global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>
                                                      {
                                                         private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

                                                         private readonly int _valueIndex;

                                                         private readonly string? _string;
                                                         private readonly int _int32;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>string</c>.
                                                         /// </summary>
                                                         public bool IsString => this._valueIndex == 1;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>int</c>.
                                                         /// </summary>
                                                         public bool IsInt32 => this._valueIndex == 2;

                                                         /// <summary>
                                                         /// Gets the current value as <c>string</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>string</c>.</exception>
                                                         public string AsString => IsString ? this._string! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>int</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>int</c>.</exception>
                                                         public int AsInt32 => IsInt32 ? this._int32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

                                                         /// <summary>
                                                         /// Gets the current value as <see cref="object"/>.
                                                         /// </summary>
                                                         public object Value => this._valueIndex switch
                                                         {
                                                            1 => this._string!,
                                                            2 => this._int32,
                                                            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                         };

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="string"/>.
                                                         /// </summary>
                                                         /// <param name="string">Value to create a new instance for.</param>
                                                         public TestUnion(string @string)
                                                         {
                                                            this._string = @string;
                                                            this._valueIndex = 1;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="int32"/>.
                                                         /// </summary>
                                                         /// <param name="int32">Value to create a new instance for.</param>
                                                         public TestUnion(int int32)
                                                         {
                                                            this._int32 = int32;
                                                            this._valueIndex = 2;
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch(
                                                            global::System.Action<string> @string,
                                                            global::System.Action<int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="default">The action to execute if no value-specific action is provided.</param>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void SwitchPartially(
                                                            global::System.Action<object?>? @default = null,
                                                            global::System.Action<string>? @string = null,
                                                            global::System.Action<int>? int32 = null)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  if (@string is null)
                                                                     break;

                                                                  @string(this._string!);
                                                                  return;
                                                               case 2:
                                                                  if (int32 is null)
                                                                     break;

                                                                  int32(this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }

                                                            @default?.Invoke(this.Value);
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch<TContext>(
                                                            TContext context,
                                                            global::System.Action<TContext, string> @string,
                                                            global::System.Action<TContext, int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(context, this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(context, this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="default">The action to execute if no value-specific action is provided.</param>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void SwitchPartially<TContext>(
                                                            TContext context,
                                                            global::System.Action<TContext, object?>? @default = null,
                                                            global::System.Action<TContext, string>? @string = null,
                                                            global::System.Action<TContext, int>? int32 = null)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  if (@string is null)
                                                                     break;

                                                                  @string(context, this._string!);
                                                                  return;
                                                               case 2:
                                                                  if (int32 is null)
                                                                     break;

                                                                  int32(context, this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }

                                                            @default?.Invoke(context, this.Value);
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TResult>(
                                                            global::System.Func<string, TResult> @string,
                                                            global::System.Func<int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(this._string!);
                                                               case 2:
                                                                  return int32(this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="default">The function to execute if no value-specific action is provided.</param>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult SwitchPartially<TResult>(
                                                            global::System.Func<object?, TResult> @default,
                                                            global::System.Func<string, TResult>? @string = null,
                                                            global::System.Func<int, TResult>? int32 = null)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  if (@string is null)
                                                                     break;

                                                                  return @string(this._string!);
                                                               case 2:
                                                                  if (int32 is null)
                                                                     break;

                                                                  return int32(this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }

                                                            return @default(this.Value);
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TContext, TResult>(
                                                            TContext context,
                                                            global::System.Func<TContext, string, TResult> @string,
                                                            global::System.Func<TContext, int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(context, this._string!);
                                                               case 2:
                                                                  return int32(context, this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="default">The function to execute if no value-specific action is provided.</param>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult SwitchPartially<TContext, TResult>(
                                                            TContext context,
                                                            global::System.Func<TContext, object?, TResult> @default,
                                                            global::System.Func<TContext, string, TResult>? @string = null,
                                                            global::System.Func<TContext, int, TResult>? int32 = null)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  if (@string is null)
                                                                     break;

                                                                  return @string(context, this._string!);
                                                               case 2:
                                                                  if (int32 is null)
                                                                     break;

                                                                  return int32(context, this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }

                                                            return @default(context, this.Value);
                                                         }

                                                         /// <summary>
                                                         /// Maps current value to an instance of type <typeparamref name="TResult"/>.
                                                         /// </summary>
                                                         /// <param name="string">The instance to return if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The instance to return if the current value is of type <c>int</c>.</param>
                                                         public TResult Map<TResult>(
                                                            TResult @string,
                                                            TResult int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string;
                                                               case 2:
                                                                  return int32;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(string value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(int value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>string</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>string</c>.</exception>
                                                         public static explicit operator string(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsString;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>int</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>int</c>.</exception>
                                                         public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsInt32;
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
                                                         public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (obj is null)
                                                               return other is null;

                                                            return obj.Equals(other);
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
                                                         public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            return !(obj == other);
                                                         }

                                                         /// <inheritdoc />
                                                         public override bool Equals(object? other)
                                                         {
                                                            return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
                                                         }

                                                         /// <inheritdoc />
                                                         public bool Equals(global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (other is null)
                                                               return false;

                                                            if (ReferenceEquals(this, other))
                                                               return true;

                                                            if (this._valueIndex != other._valueIndex)
                                                               return false;

                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string is null ? other._string is null : this._string.Equals(other._string, global::System.StringComparison.OrdinalIgnoreCase),
                                                               2 => this._int32.Equals(other._int32),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override int GetHashCode()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._string?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0),
                                                               2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._int32.GetHashCode()),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override string? ToString()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string,
                                                               2 => this._int32.ToString(),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }
                                                      }
                                                   }

                                                   """);
   }

   [Fact]
   public void Should_generate_class_with_string_and_int_with_MapPartially()
   {
      var source = """
                   using System;

                   namespace Thinktecture.Tests
                   {
                   	[Union<string, int>(MapMethods = SwitchMapMethodsGeneration.DefaultWithPartialOverloads)]
                   	public partial class TestUnion;
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute<,>).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests
                                                   {
                                                      sealed partial class TestUnion :
                                                         global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
                                                         global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>
                                                      {
                                                         private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

                                                         private readonly int _valueIndex;

                                                         private readonly string? _string;
                                                         private readonly int _int32;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>string</c>.
                                                         /// </summary>
                                                         public bool IsString => this._valueIndex == 1;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>int</c>.
                                                         /// </summary>
                                                         public bool IsInt32 => this._valueIndex == 2;

                                                         /// <summary>
                                                         /// Gets the current value as <c>string</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>string</c>.</exception>
                                                         public string AsString => IsString ? this._string! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>int</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>int</c>.</exception>
                                                         public int AsInt32 => IsInt32 ? this._int32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

                                                         /// <summary>
                                                         /// Gets the current value as <see cref="object"/>.
                                                         /// </summary>
                                                         public object Value => this._valueIndex switch
                                                         {
                                                            1 => this._string!,
                                                            2 => this._int32,
                                                            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                         };

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="string"/>.
                                                         /// </summary>
                                                         /// <param name="string">Value to create a new instance for.</param>
                                                         public TestUnion(string @string)
                                                         {
                                                            this._string = @string;
                                                            this._valueIndex = 1;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="int32"/>.
                                                         /// </summary>
                                                         /// <param name="int32">Value to create a new instance for.</param>
                                                         public TestUnion(int int32)
                                                         {
                                                            this._int32 = int32;
                                                            this._valueIndex = 2;
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch(
                                                            global::System.Action<string> @string,
                                                            global::System.Action<int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch<TContext>(
                                                            TContext context,
                                                            global::System.Action<TContext, string> @string,
                                                            global::System.Action<TContext, int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(context, this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(context, this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TResult>(
                                                            global::System.Func<string, TResult> @string,
                                                            global::System.Func<int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(this._string!);
                                                               case 2:
                                                                  return int32(this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TContext, TResult>(
                                                            TContext context,
                                                            global::System.Func<TContext, string, TResult> @string,
                                                            global::System.Func<TContext, int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(context, this._string!);
                                                               case 2:
                                                                  return int32(context, this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Maps current value to an instance of type <typeparamref name="TResult"/>.
                                                         /// </summary>
                                                         /// <param name="string">The instance to return if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The instance to return if the current value is of type <c>int</c>.</param>
                                                         public TResult Map<TResult>(
                                                            TResult @string,
                                                            TResult int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string;
                                                               case 2:
                                                                  return int32;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Maps current value to an instance of type <typeparamref name="TResult"/>.
                                                         /// </summary>
                                                         /// <param name="default">The instance to return if no value is provided for the current value.</param>
                                                         /// <param name="string">The instance to return if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The instance to return if the current value is of type <c>int</c>.</param>
                                                         public TResult MapPartially<TResult>(
                                                            TResult @default,
                                                            global::Thinktecture.Argument<TResult> @string = default,
                                                            global::Thinktecture.Argument<TResult> int32 = default)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  if (!@string.IsSet)
                                                                     break;

                                                                  return @string.Value;
                                                               case 2:
                                                                  if (!int32.IsSet)
                                                                     break;

                                                                  return int32.Value;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }

                                                            return @default;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(string value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(int value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>string</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>string</c>.</exception>
                                                         public static explicit operator string(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsString;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>int</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>int</c>.</exception>
                                                         public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsInt32;
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
                                                         public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (obj is null)
                                                               return other is null;

                                                            return obj.Equals(other);
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
                                                         public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            return !(obj == other);
                                                         }

                                                         /// <inheritdoc />
                                                         public override bool Equals(object? other)
                                                         {
                                                            return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
                                                         }

                                                         /// <inheritdoc />
                                                         public bool Equals(global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (other is null)
                                                               return false;

                                                            if (ReferenceEquals(this, other))
                                                               return true;

                                                            if (this._valueIndex != other._valueIndex)
                                                               return false;

                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string is null ? other._string is null : this._string.Equals(other._string, global::System.StringComparison.OrdinalIgnoreCase),
                                                               2 => this._int32.Equals(other._int32),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override int GetHashCode()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._string?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0),
                                                               2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._int32.GetHashCode()),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override string? ToString()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string,
                                                               2 => this._int32.ToString(),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }
                                                      }
                                                   }

                                                   """);
   }

   [Fact]
   public void Should_generate_class_with_string_and_int_without_Map()
   {
      var source = """
                   using System;

                   namespace Thinktecture.Tests
                   {
                   	[Union<string, int>(MapMethods = SwitchMapMethodsGeneration.None)]
                   	public partial class TestUnion;
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute<,>).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests
                                                   {
                                                      sealed partial class TestUnion :
                                                         global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
                                                         global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>
                                                      {
                                                         private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

                                                         private readonly int _valueIndex;

                                                         private readonly string? _string;
                                                         private readonly int _int32;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>string</c>.
                                                         /// </summary>
                                                         public bool IsString => this._valueIndex == 1;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>int</c>.
                                                         /// </summary>
                                                         public bool IsInt32 => this._valueIndex == 2;

                                                         /// <summary>
                                                         /// Gets the current value as <c>string</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>string</c>.</exception>
                                                         public string AsString => IsString ? this._string! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>int</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>int</c>.</exception>
                                                         public int AsInt32 => IsInt32 ? this._int32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

                                                         /// <summary>
                                                         /// Gets the current value as <see cref="object"/>.
                                                         /// </summary>
                                                         public object Value => this._valueIndex switch
                                                         {
                                                            1 => this._string!,
                                                            2 => this._int32,
                                                            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                         };

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="string"/>.
                                                         /// </summary>
                                                         /// <param name="string">Value to create a new instance for.</param>
                                                         public TestUnion(string @string)
                                                         {
                                                            this._string = @string;
                                                            this._valueIndex = 1;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="int32"/>.
                                                         /// </summary>
                                                         /// <param name="int32">Value to create a new instance for.</param>
                                                         public TestUnion(int int32)
                                                         {
                                                            this._int32 = int32;
                                                            this._valueIndex = 2;
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch(
                                                            global::System.Action<string> @string,
                                                            global::System.Action<int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch<TContext>(
                                                            TContext context,
                                                            global::System.Action<TContext, string> @string,
                                                            global::System.Action<TContext, int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(context, this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(context, this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TResult>(
                                                            global::System.Func<string, TResult> @string,
                                                            global::System.Func<int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(this._string!);
                                                               case 2:
                                                                  return int32(this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TContext, TResult>(
                                                            TContext context,
                                                            global::System.Func<TContext, string, TResult> @string,
                                                            global::System.Func<TContext, int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(context, this._string!);
                                                               case 2:
                                                                  return int32(context, this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(string value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(int value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>string</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>string</c>.</exception>
                                                         public static explicit operator string(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsString;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>int</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>int</c>.</exception>
                                                         public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsInt32;
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
                                                         public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (obj is null)
                                                               return other is null;

                                                            return obj.Equals(other);
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
                                                         public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            return !(obj == other);
                                                         }

                                                         /// <inheritdoc />
                                                         public override bool Equals(object? other)
                                                         {
                                                            return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
                                                         }

                                                         /// <inheritdoc />
                                                         public bool Equals(global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (other is null)
                                                               return false;

                                                            if (ReferenceEquals(this, other))
                                                               return true;

                                                            if (this._valueIndex != other._valueIndex)
                                                               return false;

                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string is null ? other._string is null : this._string.Equals(other._string, global::System.StringComparison.OrdinalIgnoreCase),
                                                               2 => this._int32.Equals(other._int32),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override int GetHashCode()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._string?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0),
                                                               2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._int32.GetHashCode()),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override string? ToString()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string,
                                                               2 => this._int32.ToString(),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }
                                                      }
                                                   }

                                                   """);
   }

   [Fact]
   public void Should_generate_class_with_string_and_int_without_Switch()
   {
      var source = """
                   using System;

                   namespace Thinktecture.Tests
                   {
                   	[Union<string, int>(SwitchMethods = SwitchMapMethodsGeneration.None)]
                   	public partial class TestUnion;
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute<,>).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests
                                                   {
                                                      sealed partial class TestUnion :
                                                         global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
                                                         global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>
                                                      {
                                                         private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

                                                         private readonly int _valueIndex;

                                                         private readonly string? _string;
                                                         private readonly int _int32;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>string</c>.
                                                         /// </summary>
                                                         public bool IsString => this._valueIndex == 1;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>int</c>.
                                                         /// </summary>
                                                         public bool IsInt32 => this._valueIndex == 2;

                                                         /// <summary>
                                                         /// Gets the current value as <c>string</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>string</c>.</exception>
                                                         public string AsString => IsString ? this._string! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>int</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>int</c>.</exception>
                                                         public int AsInt32 => IsInt32 ? this._int32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

                                                         /// <summary>
                                                         /// Gets the current value as <see cref="object"/>.
                                                         /// </summary>
                                                         public object Value => this._valueIndex switch
                                                         {
                                                            1 => this._string!,
                                                            2 => this._int32,
                                                            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                         };

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="string"/>.
                                                         /// </summary>
                                                         /// <param name="string">Value to create a new instance for.</param>
                                                         public TestUnion(string @string)
                                                         {
                                                            this._string = @string;
                                                            this._valueIndex = 1;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="int32"/>.
                                                         /// </summary>
                                                         /// <param name="int32">Value to create a new instance for.</param>
                                                         public TestUnion(int int32)
                                                         {
                                                            this._int32 = int32;
                                                            this._valueIndex = 2;
                                                         }

                                                         /// <summary>
                                                         /// Maps current value to an instance of type <typeparamref name="TResult"/>.
                                                         /// </summary>
                                                         /// <param name="string">The instance to return if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The instance to return if the current value is of type <c>int</c>.</param>
                                                         public TResult Map<TResult>(
                                                            TResult @string,
                                                            TResult int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string;
                                                               case 2:
                                                                  return int32;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(string value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(int value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>string</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>string</c>.</exception>
                                                         public static explicit operator string(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsString;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>int</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>int</c>.</exception>
                                                         public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsInt32;
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
                                                         public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (obj is null)
                                                               return other is null;

                                                            return obj.Equals(other);
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
                                                         public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            return !(obj == other);
                                                         }

                                                         /// <inheritdoc />
                                                         public override bool Equals(object? other)
                                                         {
                                                            return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
                                                         }

                                                         /// <inheritdoc />
                                                         public bool Equals(global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (other is null)
                                                               return false;

                                                            if (ReferenceEquals(this, other))
                                                               return true;

                                                            if (this._valueIndex != other._valueIndex)
                                                               return false;

                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string is null ? other._string is null : this._string.Equals(other._string, global::System.StringComparison.OrdinalIgnoreCase),
                                                               2 => this._int32.Equals(other._int32),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override int GetHashCode()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._string?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0),
                                                               2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._int32.GetHashCode()),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override string? ToString()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string,
                                                               2 => this._int32.ToString(),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }
                                                      }
                                                   }

                                                   """);
   }

   [Fact]
   public void Should_generate_class_with_string_and_int_without_ToString()
   {
      var source = """
                   using System;

                   namespace Thinktecture.Tests
                   {
                   	[Union<string, int>(SkipToString = true)]
                   	public partial class TestUnion;
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute<,>).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests
                                                   {
                                                      sealed partial class TestUnion :
                                                         global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
                                                         global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>
                                                      {
                                                         private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

                                                         private readonly int _valueIndex;

                                                         private readonly string? _string;
                                                         private readonly int _int32;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>string</c>.
                                                         /// </summary>
                                                         public bool IsString => this._valueIndex == 1;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>int</c>.
                                                         /// </summary>
                                                         public bool IsInt32 => this._valueIndex == 2;

                                                         /// <summary>
                                                         /// Gets the current value as <c>string</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>string</c>.</exception>
                                                         public string AsString => IsString ? this._string! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>int</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>int</c>.</exception>
                                                         public int AsInt32 => IsInt32 ? this._int32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

                                                         /// <summary>
                                                         /// Gets the current value as <see cref="object"/>.
                                                         /// </summary>
                                                         public object Value => this._valueIndex switch
                                                         {
                                                            1 => this._string!,
                                                            2 => this._int32,
                                                            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                         };

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="string"/>.
                                                         /// </summary>
                                                         /// <param name="string">Value to create a new instance for.</param>
                                                         public TestUnion(string @string)
                                                         {
                                                            this._string = @string;
                                                            this._valueIndex = 1;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="int32"/>.
                                                         /// </summary>
                                                         /// <param name="int32">Value to create a new instance for.</param>
                                                         public TestUnion(int int32)
                                                         {
                                                            this._int32 = int32;
                                                            this._valueIndex = 2;
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch(
                                                            global::System.Action<string> @string,
                                                            global::System.Action<int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch<TContext>(
                                                            TContext context,
                                                            global::System.Action<TContext, string> @string,
                                                            global::System.Action<TContext, int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(context, this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(context, this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TResult>(
                                                            global::System.Func<string, TResult> @string,
                                                            global::System.Func<int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(this._string!);
                                                               case 2:
                                                                  return int32(this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TContext, TResult>(
                                                            TContext context,
                                                            global::System.Func<TContext, string, TResult> @string,
                                                            global::System.Func<TContext, int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(context, this._string!);
                                                               case 2:
                                                                  return int32(context, this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Maps current value to an instance of type <typeparamref name="TResult"/>.
                                                         /// </summary>
                                                         /// <param name="string">The instance to return if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The instance to return if the current value is of type <c>int</c>.</param>
                                                         public TResult Map<TResult>(
                                                            TResult @string,
                                                            TResult int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string;
                                                               case 2:
                                                                  return int32;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(string value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(int value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>string</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>string</c>.</exception>
                                                         public static explicit operator string(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsString;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>int</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>int</c>.</exception>
                                                         public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsInt32;
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
                                                         public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (obj is null)
                                                               return other is null;

                                                            return obj.Equals(other);
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
                                                         public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            return !(obj == other);
                                                         }

                                                         /// <inheritdoc />
                                                         public override bool Equals(object? other)
                                                         {
                                                            return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
                                                         }

                                                         /// <inheritdoc />
                                                         public bool Equals(global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (other is null)
                                                               return false;

                                                            if (ReferenceEquals(this, other))
                                                               return true;

                                                            if (this._valueIndex != other._valueIndex)
                                                               return false;

                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string is null ? other._string is null : this._string.Equals(other._string, global::System.StringComparison.OrdinalIgnoreCase),
                                                               2 => this._int32.Equals(other._int32),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override int GetHashCode()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._string?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0),
                                                               2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._int32.GetHashCode()),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }
                                                      }
                                                   }

                                                   """);
   }

   [Fact]
   public void Should_generate_class_with_string_and_int_and_custom_string_comparison()
   {
      var source = """
                   using System;

                   namespace Thinktecture.Tests
                   {
                   	[Union<string, int>(DefaultStringComparison = StringComparison.Ordinal)]
                   	public partial class TestUnion;
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute<,>).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests
                                                   {
                                                      sealed partial class TestUnion :
                                                         global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
                                                         global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>
                                                      {
                                                         private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

                                                         private readonly int _valueIndex;

                                                         private readonly string? _string;
                                                         private readonly int _int32;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>string</c>.
                                                         /// </summary>
                                                         public bool IsString => this._valueIndex == 1;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>int</c>.
                                                         /// </summary>
                                                         public bool IsInt32 => this._valueIndex == 2;

                                                         /// <summary>
                                                         /// Gets the current value as <c>string</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>string</c>.</exception>
                                                         public string AsString => IsString ? this._string! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>int</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>int</c>.</exception>
                                                         public int AsInt32 => IsInt32 ? this._int32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

                                                         /// <summary>
                                                         /// Gets the current value as <see cref="object"/>.
                                                         /// </summary>
                                                         public object Value => this._valueIndex switch
                                                         {
                                                            1 => this._string!,
                                                            2 => this._int32,
                                                            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                         };

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="string"/>.
                                                         /// </summary>
                                                         /// <param name="string">Value to create a new instance for.</param>
                                                         public TestUnion(string @string)
                                                         {
                                                            this._string = @string;
                                                            this._valueIndex = 1;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="int32"/>.
                                                         /// </summary>
                                                         /// <param name="int32">Value to create a new instance for.</param>
                                                         public TestUnion(int int32)
                                                         {
                                                            this._int32 = int32;
                                                            this._valueIndex = 2;
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch(
                                                            global::System.Action<string> @string,
                                                            global::System.Action<int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch<TContext>(
                                                            TContext context,
                                                            global::System.Action<TContext, string> @string,
                                                            global::System.Action<TContext, int> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(context, this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(context, this._int32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TResult>(
                                                            global::System.Func<string, TResult> @string,
                                                            global::System.Func<int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(this._string!);
                                                               case 2:
                                                                  return int32(this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TContext, TResult>(
                                                            TContext context,
                                                            global::System.Func<TContext, string, TResult> @string,
                                                            global::System.Func<TContext, int, TResult> int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(context, this._string!);
                                                               case 2:
                                                                  return int32(context, this._int32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Maps current value to an instance of type <typeparamref name="TResult"/>.
                                                         /// </summary>
                                                         /// <param name="string">The instance to return if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The instance to return if the current value is of type <c>int</c>.</param>
                                                         public TResult Map<TResult>(
                                                            TResult @string,
                                                            TResult int32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string;
                                                               case 2:
                                                                  return int32;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(string value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(int value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>string</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>string</c>.</exception>
                                                         public static explicit operator string(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsString;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>int</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>int</c>.</exception>
                                                         public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsInt32;
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
                                                         public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (obj is null)
                                                               return other is null;

                                                            return obj.Equals(other);
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
                                                         public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            return !(obj == other);
                                                         }

                                                         /// <inheritdoc />
                                                         public override bool Equals(object? other)
                                                         {
                                                            return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
                                                         }

                                                         /// <inheritdoc />
                                                         public bool Equals(global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (other is null)
                                                               return false;

                                                            if (ReferenceEquals(this, other))
                                                               return true;

                                                            if (this._valueIndex != other._valueIndex)
                                                               return false;

                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string is null ? other._string is null : this._string.Equals(other._string, global::System.StringComparison.Ordinal),
                                                               2 => this._int32.Equals(other._int32),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override int GetHashCode()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._string?.GetHashCode(global::System.StringComparison.Ordinal) ?? 0),
                                                               2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._int32.GetHashCode()),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override string? ToString()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string,
                                                               2 => this._int32.ToString(),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }
                                                      }
                                                   }

                                                   """);
   }

   [Fact]
   public void Should_generate_class_with_nullable_string_and_nullable_int()
   {
      var source = """
                   using System;

                   namespace Thinktecture.Tests
                   {
                   	[Union<string, int?>(T1IsNullableReferenceType = true)]
                   	public partial class TestUnion;
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute<,>).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests
                                                   {
                                                      sealed partial class TestUnion :
                                                         global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
                                                         global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>
                                                      {
                                                         private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

                                                         private readonly int _valueIndex;

                                                         private readonly string? _string;
                                                         private readonly int? _nullableInt32;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>string?</c>.
                                                         /// </summary>
                                                         public bool IsString => this._valueIndex == 1;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>int?</c>.
                                                         /// </summary>
                                                         public bool IsNullableInt32 => this._valueIndex == 2;

                                                         /// <summary>
                                                         /// Gets the current value as <c>string?</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>string?</c>.</exception>
                                                         public string? AsString => IsString ? this._string : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string?'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>int?</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>int?</c>.</exception>
                                                         public int? AsNullableInt32 => IsNullableInt32 ? this._nullableInt32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int?'.");

                                                         /// <summary>
                                                         /// Gets the current value as <see cref="object"/>.
                                                         /// </summary>
                                                         public object? Value => this._valueIndex switch
                                                         {
                                                            1 => this._string,
                                                            2 => this._nullableInt32,
                                                            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                         };

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="string"/>.
                                                         /// </summary>
                                                         /// <param name="string">Value to create a new instance for.</param>
                                                         public TestUnion(string? @string)
                                                         {
                                                            this._string = @string;
                                                            this._valueIndex = 1;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="nullableInt32"/>.
                                                         /// </summary>
                                                         /// <param name="nullableInt32">Value to create a new instance for.</param>
                                                         public TestUnion(int? nullableInt32)
                                                         {
                                                            this._nullableInt32 = nullableInt32;
                                                            this._valueIndex = 2;
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string?</c>.</param>
                                                         /// <param name="nullableInt32">The action to execute if the current value is of type <c>int?</c>.</param>
                                                         public void Switch(
                                                            global::System.Action<string?> @string,
                                                            global::System.Action<int?> nullableInt32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(this._string);
                                                                  return;
                                                               case 2:
                                                                  nullableInt32(this._nullableInt32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string?</c>.</param>
                                                         /// <param name="nullableInt32">The action to execute if the current value is of type <c>int?</c>.</param>
                                                         public void Switch<TContext>(
                                                            TContext context,
                                                            global::System.Action<TContext, string?> @string,
                                                            global::System.Action<TContext, int?> nullableInt32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(context, this._string);
                                                                  return;
                                                               case 2:
                                                                  nullableInt32(context, this._nullableInt32);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string?</c>.</param>
                                                         /// <param name="nullableInt32">The function to execute if the current value is of type <c>int?</c>.</param>
                                                         public TResult Switch<TResult>(
                                                            global::System.Func<string?, TResult> @string,
                                                            global::System.Func<int?, TResult> nullableInt32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(this._string);
                                                               case 2:
                                                                  return nullableInt32(this._nullableInt32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string?</c>.</param>
                                                         /// <param name="nullableInt32">The function to execute if the current value is of type <c>int?</c>.</param>
                                                         public TResult Switch<TContext, TResult>(
                                                            TContext context,
                                                            global::System.Func<TContext, string?, TResult> @string,
                                                            global::System.Func<TContext, int?, TResult> nullableInt32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(context, this._string);
                                                               case 2:
                                                                  return nullableInt32(context, this._nullableInt32);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Maps current value to an instance of type <typeparamref name="TResult"/>.
                                                         /// </summary>
                                                         /// <param name="string">The instance to return if the current value is of type <c>string?</c>.</param>
                                                         /// <param name="nullableInt32">The instance to return if the current value is of type <c>int?</c>.</param>
                                                         public TResult Map<TResult>(
                                                            TResult @string,
                                                            TResult nullableInt32)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string;
                                                               case 2:
                                                                  return nullableInt32;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>string?</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(string? value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>int?</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(int? value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>string?</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>string?</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>string?</c>.</exception>
                                                         public static explicit operator string?(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsString;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>int?</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>int?</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>int?</c>.</exception>
                                                         public static explicit operator int?(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsNullableInt32;
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
                                                         public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (obj is null)
                                                               return other is null;

                                                            return obj.Equals(other);
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
                                                         public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            return !(obj == other);
                                                         }

                                                         /// <inheritdoc />
                                                         public override bool Equals(object? other)
                                                         {
                                                            return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
                                                         }

                                                         /// <inheritdoc />
                                                         public bool Equals(global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (other is null)
                                                               return false;

                                                            if (ReferenceEquals(this, other))
                                                               return true;

                                                            if (this._valueIndex != other._valueIndex)
                                                               return false;

                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string is null ? other._string is null : this._string.Equals(other._string, global::System.StringComparison.OrdinalIgnoreCase),
                                                               2 => this._nullableInt32.Equals(other._nullableInt32),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override int GetHashCode()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._string?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0),
                                                               2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._nullableInt32.GetHashCode()),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override string? ToString()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string,
                                                               2 => this._nullableInt32.ToString(),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }
                                                      }
                                                   }

                                                   """);
   }

   [Fact]
   public void Should_generate_class_with_string_and_int_with_custom_names()
   {
      var source = """
                   using System;

                   namespace Thinktecture.Tests
                   {
                   	[Union<string, int>(T1Name = "Text", T2Name = "Number")]
                   	public partial class TestUnion;
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute<,>).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests
                                                   {
                                                      sealed partial class TestUnion :
                                                         global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
                                                         global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>
                                                      {
                                                         private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

                                                         private readonly int _valueIndex;

                                                         private readonly string? _text;
                                                         private readonly int _number;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>string</c>.
                                                         /// </summary>
                                                         public bool IsText => this._valueIndex == 1;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>int</c>.
                                                         /// </summary>
                                                         public bool IsNumber => this._valueIndex == 2;

                                                         /// <summary>
                                                         /// Gets the current value as <c>string</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>string</c>.</exception>
                                                         public string AsText => IsText ? this._text! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>int</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>int</c>.</exception>
                                                         public int AsNumber => IsNumber ? this._number : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

                                                         /// <summary>
                                                         /// Gets the current value as <see cref="object"/>.
                                                         /// </summary>
                                                         public object Value => this._valueIndex switch
                                                         {
                                                            1 => this._text!,
                                                            2 => this._number,
                                                            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                         };

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="text"/>.
                                                         /// </summary>
                                                         /// <param name="text">Value to create a new instance for.</param>
                                                         public TestUnion(string text)
                                                         {
                                                            this._text = text;
                                                            this._valueIndex = 1;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="number"/>.
                                                         /// </summary>
                                                         /// <param name="number">Value to create a new instance for.</param>
                                                         public TestUnion(int number)
                                                         {
                                                            this._number = number;
                                                            this._valueIndex = 2;
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="text">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="number">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch(
                                                            global::System.Action<string> text,
                                                            global::System.Action<int> number)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  text(this._text!);
                                                                  return;
                                                               case 2:
                                                                  number(this._number);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="text">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="number">The action to execute if the current value is of type <c>int</c>.</param>
                                                         public void Switch<TContext>(
                                                            TContext context,
                                                            global::System.Action<TContext, string> text,
                                                            global::System.Action<TContext, int> number)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  text(context, this._text!);
                                                                  return;
                                                               case 2:
                                                                  number(context, this._number);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="text">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="number">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TResult>(
                                                            global::System.Func<string, TResult> text,
                                                            global::System.Func<int, TResult> number)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return text(this._text!);
                                                               case 2:
                                                                  return number(this._number);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="text">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="number">The function to execute if the current value is of type <c>int</c>.</param>
                                                         public TResult Switch<TContext, TResult>(
                                                            TContext context,
                                                            global::System.Func<TContext, string, TResult> text,
                                                            global::System.Func<TContext, int, TResult> number)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return text(context, this._text!);
                                                               case 2:
                                                                  return number(context, this._number);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Maps current value to an instance of type <typeparamref name="TResult"/>.
                                                         /// </summary>
                                                         /// <param name="text">The instance to return if the current value is of type <c>string</c>.</param>
                                                         /// <param name="number">The instance to return if the current value is of type <c>int</c>.</param>
                                                         public TResult Map<TResult>(
                                                            TResult text,
                                                            TResult number)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return text;
                                                               case 2:
                                                                  return number;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(string value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(int value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>string</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>string</c>.</exception>
                                                         public static explicit operator string(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsText;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>int</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>int</c>.</exception>
                                                         public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsNumber;
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
                                                         public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (obj is null)
                                                               return other is null;

                                                            return obj.Equals(other);
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
                                                         public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            return !(obj == other);
                                                         }

                                                         /// <inheritdoc />
                                                         public override bool Equals(object? other)
                                                         {
                                                            return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
                                                         }

                                                         /// <inheritdoc />
                                                         public bool Equals(global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (other is null)
                                                               return false;

                                                            if (ReferenceEquals(this, other))
                                                               return true;

                                                            if (this._valueIndex != other._valueIndex)
                                                               return false;

                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._text is null ? other._text is null : this._text.Equals(other._text, global::System.StringComparison.OrdinalIgnoreCase),
                                                               2 => this._number.Equals(other._number),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override int GetHashCode()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._text?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0),
                                                               2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._number.GetHashCode()),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override string? ToString()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._text,
                                                               2 => this._number.ToString(),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }
                                                      }
                                                   }

                                                   """);
   }

   [Fact]
   public void Should_generate_class_with_string_and_int_bool_guid_char()
   {
      var source = """
                   using System;

                   namespace Thinktecture.Tests
                   {
                   	[Union<string, int, bool, Guid, char>]
                   	public partial class TestUnion;
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute<,>).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests
                                                   {
                                                      sealed partial class TestUnion :
                                                         global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
                                                         global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>
                                                      {
                                                         private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

                                                         private readonly int _valueIndex;

                                                         private readonly string? _string;
                                                         private readonly int _int32;
                                                         private readonly bool _boolean;
                                                         private readonly global::System.Guid _guid;
                                                         private readonly char _char;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>string</c>.
                                                         /// </summary>
                                                         public bool IsString => this._valueIndex == 1;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>int</c>.
                                                         /// </summary>
                                                         public bool IsInt32 => this._valueIndex == 2;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>bool</c>.
                                                         /// </summary>
                                                         public bool IsBoolean => this._valueIndex == 3;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>Guid</c>.
                                                         /// </summary>
                                                         public bool IsGuid => this._valueIndex == 4;

                                                         /// <summary>
                                                         /// Indication whether the current value is of type <c>char</c>.
                                                         /// </summary>
                                                         public bool IsChar => this._valueIndex == 5;

                                                         /// <summary>
                                                         /// Gets the current value as <c>string</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>string</c>.</exception>
                                                         public string AsString => IsString ? this._string! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>int</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>int</c>.</exception>
                                                         public int AsInt32 => IsInt32 ? this._int32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>bool</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>bool</c>.</exception>
                                                         public bool AsBoolean => IsBoolean ? this._boolean : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'bool'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>Guid</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>Guid</c>.</exception>
                                                         public global::System.Guid AsGuid => IsGuid ? this._guid : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'Guid'.");

                                                         /// <summary>
                                                         /// Gets the current value as <c>char</c>.
                                                         /// </summary>
                                                         /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>char</c>.</exception>
                                                         public char AsChar => IsChar ? this._char : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'char'.");

                                                         /// <summary>
                                                         /// Gets the current value as <see cref="object"/>.
                                                         /// </summary>
                                                         public object Value => this._valueIndex switch
                                                         {
                                                            1 => this._string!,
                                                            2 => this._int32,
                                                            3 => this._boolean,
                                                            4 => this._guid,
                                                            5 => this._char,
                                                            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                         };

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="string"/>.
                                                         /// </summary>
                                                         /// <param name="string">Value to create a new instance for.</param>
                                                         public TestUnion(string @string)
                                                         {
                                                            this._string = @string;
                                                            this._valueIndex = 1;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="int32"/>.
                                                         /// </summary>
                                                         /// <param name="int32">Value to create a new instance for.</param>
                                                         public TestUnion(int int32)
                                                         {
                                                            this._int32 = int32;
                                                            this._valueIndex = 2;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="boolean"/>.
                                                         /// </summary>
                                                         /// <param name="boolean">Value to create a new instance for.</param>
                                                         public TestUnion(bool boolean)
                                                         {
                                                            this._boolean = boolean;
                                                            this._valueIndex = 3;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="guid"/>.
                                                         /// </summary>
                                                         /// <param name="guid">Value to create a new instance for.</param>
                                                         public TestUnion(global::System.Guid guid)
                                                         {
                                                            this._guid = guid;
                                                            this._valueIndex = 4;
                                                         }

                                                         /// <summary>
                                                         /// Initializes new instance with <paramref name="char"/>.
                                                         /// </summary>
                                                         /// <param name="char">Value to create a new instance for.</param>
                                                         public TestUnion(char @char)
                                                         {
                                                            this._char = @char;
                                                            this._valueIndex = 5;
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         /// <param name="boolean">The action to execute if the current value is of type <c>bool</c>.</param>
                                                         /// <param name="guid">The action to execute if the current value is of type <c>Guid</c>.</param>
                                                         /// <param name="char">The action to execute if the current value is of type <c>char</c>.</param>
                                                         public void Switch(
                                                            global::System.Action<string> @string,
                                                            global::System.Action<int> int32,
                                                            global::System.Action<bool> boolean,
                                                            global::System.Action<global::System.Guid> guid,
                                                            global::System.Action<char> @char)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(this._int32);
                                                                  return;
                                                               case 3:
                                                                  boolean(this._boolean);
                                                                  return;
                                                               case 4:
                                                                  guid(this._guid);
                                                                  return;
                                                               case 5:
                                                                  @char(this._char);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes an action depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The action to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The action to execute if the current value is of type <c>int</c>.</param>
                                                         /// <param name="boolean">The action to execute if the current value is of type <c>bool</c>.</param>
                                                         /// <param name="guid">The action to execute if the current value is of type <c>Guid</c>.</param>
                                                         /// <param name="char">The action to execute if the current value is of type <c>char</c>.</param>
                                                         public void Switch<TContext>(
                                                            TContext context,
                                                            global::System.Action<TContext, string> @string,
                                                            global::System.Action<TContext, int> int32,
                                                            global::System.Action<TContext, bool> boolean,
                                                            global::System.Action<TContext, global::System.Guid> guid,
                                                            global::System.Action<TContext, char> @char)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  @string(context, this._string!);
                                                                  return;
                                                               case 2:
                                                                  int32(context, this._int32);
                                                                  return;
                                                               case 3:
                                                                  boolean(context, this._boolean);
                                                                  return;
                                                               case 4:
                                                                  guid(context, this._guid);
                                                                  return;
                                                               case 5:
                                                                  @char(context, this._char);
                                                                  return;
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         /// <param name="boolean">The function to execute if the current value is of type <c>bool</c>.</param>
                                                         /// <param name="guid">The function to execute if the current value is of type <c>Guid</c>.</param>
                                                         /// <param name="char">The function to execute if the current value is of type <c>char</c>.</param>
                                                         public TResult Switch<TResult>(
                                                            global::System.Func<string, TResult> @string,
                                                            global::System.Func<int, TResult> int32,
                                                            global::System.Func<bool, TResult> boolean,
                                                            global::System.Func<global::System.Guid, TResult> guid,
                                                            global::System.Func<char, TResult> @char)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(this._string!);
                                                               case 2:
                                                                  return int32(this._int32);
                                                               case 3:
                                                                  return boolean(this._boolean);
                                                               case 4:
                                                                  return guid(this._guid);
                                                               case 5:
                                                                  return @char(this._char);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Executes a function depending on the current value.
                                                         /// </summary>
                                                         /// <param name="context">Context to be passed to the callbacks.</param>
                                                         /// <param name="string">The function to execute if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The function to execute if the current value is of type <c>int</c>.</param>
                                                         /// <param name="boolean">The function to execute if the current value is of type <c>bool</c>.</param>
                                                         /// <param name="guid">The function to execute if the current value is of type <c>Guid</c>.</param>
                                                         /// <param name="char">The function to execute if the current value is of type <c>char</c>.</param>
                                                         public TResult Switch<TContext, TResult>(
                                                            TContext context,
                                                            global::System.Func<TContext, string, TResult> @string,
                                                            global::System.Func<TContext, int, TResult> int32,
                                                            global::System.Func<TContext, bool, TResult> boolean,
                                                            global::System.Func<TContext, global::System.Guid, TResult> guid,
                                                            global::System.Func<TContext, char, TResult> @char)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string(context, this._string!);
                                                               case 2:
                                                                  return int32(context, this._int32);
                                                               case 3:
                                                                  return boolean(context, this._boolean);
                                                               case 4:
                                                                  return guid(context, this._guid);
                                                               case 5:
                                                                  return @char(context, this._char);
                                                               default:
                                                                  throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Maps current value to an instance of type <typeparamref name="TResult"/>.
                                                         /// </summary>
                                                         /// <param name="string">The instance to return if the current value is of type <c>string</c>.</param>
                                                         /// <param name="int32">The instance to return if the current value is of type <c>int</c>.</param>
                                                         /// <param name="boolean">The instance to return if the current value is of type <c>bool</c>.</param>
                                                         /// <param name="guid">The instance to return if the current value is of type <c>Guid</c>.</param>
                                                         /// <param name="char">The instance to return if the current value is of type <c>char</c>.</param>
                                                         public TResult Map<TResult>(
                                                            TResult @string,
                                                            TResult int32,
                                                            TResult boolean,
                                                            TResult guid,
                                                            TResult @char)
                                                         {
                                                            switch (this._valueIndex)
                                                            {
                                                               case 1:
                                                                  return @string;
                                                               case 2:
                                                                  return int32;
                                                               case 3:
                                                                  return boolean;
                                                               case 4:
                                                                  return guid;
                                                               case 5:
                                                                  return @char;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
                                                            }
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(string value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(int value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>bool</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(bool value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>Guid</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(global::System.Guid value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion from type <c>char</c>.
                                                         /// </summary>
                                                         /// <param name="value">Value to covert from.</param>
                                                         /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="value"/>.</returns>
                                                         public static implicit operator global::Thinktecture.Tests.TestUnion(char value)
                                                         {
                                                            return new global::Thinktecture.Tests.TestUnion(value);
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>string</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>string</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>string</c>.</exception>
                                                         public static explicit operator string(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsString;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>int</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>int</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>int</c>.</exception>
                                                         public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsInt32;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>bool</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>bool</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>bool</c>.</exception>
                                                         public static explicit operator bool(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsBoolean;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>Guid</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>Guid</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>Guid</c>.</exception>
                                                         public static explicit operator global::System.Guid(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsGuid;
                                                         }

                                                         /// <summary>
                                                         /// Implicit conversion to type <c>char</c>.
                                                         /// </summary>
                                                         /// <param name="obj">Object to covert.</param>
                                                         /// <returns>Inner value of type <c>char</c>.</returns>
                                                         /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>char</c>.</exception>
                                                         public static explicit operator char(global::Thinktecture.Tests.TestUnion obj)
                                                         {
                                                            return obj.AsChar;
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
                                                         public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (obj is null)
                                                               return other is null;

                                                            return obj.Equals(other);
                                                         }

                                                         /// <summary>
                                                         /// Compares two instances of <see cref="TestUnion"/>.
                                                         /// </summary>
                                                         /// <param name="obj">Instance to compare.</param>
                                                         /// <param name="other">Another instance to compare.</param>
                                                         /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
                                                         public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            return !(obj == other);
                                                         }

                                                         /// <inheritdoc />
                                                         public override bool Equals(object? other)
                                                         {
                                                            return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
                                                         }

                                                         /// <inheritdoc />
                                                         public bool Equals(global::Thinktecture.Tests.TestUnion? other)
                                                         {
                                                            if (other is null)
                                                               return false;

                                                            if (ReferenceEquals(this, other))
                                                               return true;

                                                            if (this._valueIndex != other._valueIndex)
                                                               return false;

                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string is null ? other._string is null : this._string.Equals(other._string, global::System.StringComparison.OrdinalIgnoreCase),
                                                               2 => this._int32.Equals(other._int32),
                                                               3 => this._boolean.Equals(other._boolean),
                                                               4 => this._guid.Equals(other._guid),
                                                               5 => this._char.Equals(other._char),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override int GetHashCode()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._string?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0),
                                                               2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._int32.GetHashCode()),
                                                               3 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._boolean.GetHashCode()),
                                                               4 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._guid.GetHashCode()),
                                                               5 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._char.GetHashCode()),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }

                                                         /// <inheritdoc />
                                                         public override string? ToString()
                                                         {
                                                            return this._valueIndex switch
                                                            {
                                                               1 => this._string,
                                                               2 => this._int32.ToString(),
                                                               3 => this._boolean.ToString(),
                                                               4 => this._guid.ToString(),
                                                               5 => this._char.ToString(),
                                                               _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
                                                            };
                                                         }
                                                      }
                                                   }

                                                   """);
   }
}
