using System.Linq;
using System.Threading.Tasks;
using Thinktecture.CodeAnalysis.Unions;
using Xunit.Abstractions;

namespace Thinktecture.Runtime.Tests.SourceGeneratorTests;

public class UnionSourceGeneratorTests : SourceGeneratorTestsBase
{
   private const string _GENERATED_HEADER = """
                                            // <auto-generated />
                                            #nullable enable


                                            """;

   public UnionSourceGeneratorTests(ITestOutputHelper output)
      : base(output)
   {
   }

   [Fact]
   public async Task Should_generate_record_with_generic()
   {
      var source = """
                   using System;
                   using Thinktecture;

                   namespace Thinktecture.Tests
                   {
                      [Union]
                      public partial record Result<T>
                      {
                         public partial record Success(T Value) : Result<T>;

                         public partial record Failure(string Error) : Result<T>;
                      }
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute).Assembly);

      await VerifyAsync(outputs,
                        "Thinktecture.Tests.Result.g.cs");
   }

   [Fact]
   public async Task Should_generate_record_with_non_default_ctor()
   {
      var source = """
                   using System;
                   using Thinktecture;

                   namespace Thinktecture.Tests
                   {
                      [Union]
                      public partial record TestUnion
                      {
                         public string Name { get; }

                         private TestUnion(string name)
                         {
                            Name = name;
                         }

                         public sealed record Child1(string Name) : TestUnion(Name);

                         public sealed record Child2(string Name) : TestUnion(Name);
                      }
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute).Assembly);

      await VerifyAsync(outputs,
                        "Thinktecture.Tests.TestUnion.g.cs");
   }

   [Fact]
   public async Task Should_generate_class_without_ctor()
   {
      var source = """
                   using System;
                   using Thinktecture;

                   namespace Thinktecture.Tests
                   {
                      [Union]
                      public partial class TestUnion
                      {
                         public sealed class Child1 : TestUnion;

                         public sealed class Child2 : TestUnion;
                      }
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute).Assembly);

      await VerifyAsync(outputs,
                        "Thinktecture.Tests.TestUnion.g.cs");
   }

   [Fact]
   public async Task Should_generate_class_with_classes_having_same_name()
   {
      var source = """
                   using System;
                   using Thinktecture;

                   namespace Thinktecture.Tests
                   {
                      [Union]
                      public partial class TestUnion
                      {
                         public sealed class Child1 : TestUnion;

                         public sealed class Child2 : TestUnion
                         {
                            public sealed class Child1 : TestUnion;
                         }
                      }
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute).Assembly);

      await VerifyAsync(outputs,
                        "Thinktecture.Tests.TestUnion.g.cs");
   }
}
