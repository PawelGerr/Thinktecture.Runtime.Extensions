using System.Linq;
using Thinktecture.CodeAnalysis.Unions;
using Xunit.Abstractions;

namespace Thinktecture.Runtime.Tests.SourceGeneratorTests;

public class UnionSourceGeneratorTests : SourceGeneratorTestsBase
{
   private const string _GENERATED_HEADER = """
                                            // <auto-generated />
                                            #nullable enable


                                            """;

   public UnionSourceGeneratorTests(ITestOutputHelper output)
      : base(output)
   {
   }

   [Fact]
   public void Should_generate_record_with_generic()
   {
      var source = """
                   using System;
                   using Thinktecture;

                   namespace Thinktecture.Tests
                   {
                      [Union]
                      public partial record Result<T>
                      {
                         public partial record Success(T Value) : Result<T>;

                         public partial record Failure(string Error) : Result<T>;
                      }
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.Result.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests;

                                                   abstract partial record Result<T>
                                                   {
                                                      private Result()
                                                      {
                                                      }

                                                      /// <summary>
                                                      /// Executes an action depending on the current type.
                                                      /// </summary>
                                                      /// <param name="failure">The action to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c>.</param>
                                                      /// <param name="success">The action to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c>.</param>
                                                      public void Switch(
                                                         global::System.Action<global::Thinktecture.Tests.Result<T>.Failure> @failure,
                                                         global::System.Action<global::Thinktecture.Tests.Result<T>.Success> @success)
                                                      {
                                                         switch (this)
                                                         {
                                                            case global::Thinktecture.Tests.Result<T>.Failure value:
                                                               @failure(value);
                                                               return;
                                                            case global::Thinktecture.Tests.Result<T>.Success value:
                                                               @success(value);
                                                               return;
                                                            default:
                                                               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
                                                         }
                                                      }

                                                      /// <summary>
                                                      /// Executes an action depending on the current type.
                                                      /// </summary>
                                                      /// <param name="state">State to be passed to the callbacks.</param>
                                                      /// <param name="failure">The action to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c>.</param>
                                                      /// <param name="success">The action to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c>.</param>
                                                      public void Switch<TState>(
                                                         TState state,
                                                         global::System.Action<TState, global::Thinktecture.Tests.Result<T>.Failure> @failure,
                                                         global::System.Action<TState, global::Thinktecture.Tests.Result<T>.Success> @success)
                                                      {
                                                         switch (this)
                                                         {
                                                            case global::Thinktecture.Tests.Result<T>.Failure value:
                                                               @failure(state, value);
                                                               return;
                                                            case global::Thinktecture.Tests.Result<T>.Success value:
                                                               @success(state, value);
                                                               return;
                                                            default:
                                                               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
                                                         }
                                                      }

                                                      /// <summary>
                                                      /// Executes a function depending on the current type.
                                                      /// </summary>
                                                      /// <param name="failure">The function to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c>.</param>
                                                      /// <param name="success">The function to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c>.</param>
                                                      public TResult Switch<TResult>(
                                                         global::System.Func<global::Thinktecture.Tests.Result<T>.Failure, TResult> @failure,
                                                         global::System.Func<global::Thinktecture.Tests.Result<T>.Success, TResult> @success)
                                                      {
                                                         switch (this)
                                                         {
                                                            case global::Thinktecture.Tests.Result<T>.Failure value:
                                                               return @failure(value);
                                                            case global::Thinktecture.Tests.Result<T>.Success value:
                                                               return @success(value);
                                                            default:
                                                               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
                                                         }
                                                      }

                                                      /// <summary>
                                                      /// Executes a function depending on the current type.
                                                      /// </summary>
                                                      /// <param name="state">State to be passed to the callbacks.</param>
                                                      /// <param name="failure">The function to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c>.</param>
                                                      /// <param name="success">The function to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c>.</param>
                                                      public TResult Switch<TState, TResult>(
                                                         TState state,
                                                         global::System.Func<TState, global::Thinktecture.Tests.Result<T>.Failure, TResult> @failure,
                                                         global::System.Func<TState, global::Thinktecture.Tests.Result<T>.Success, TResult> @success)
                                                      {
                                                         switch (this)
                                                         {
                                                            case global::Thinktecture.Tests.Result<T>.Failure value:
                                                               return @failure(state, value);
                                                            case global::Thinktecture.Tests.Result<T>.Success value:
                                                               return @success(state, value);
                                                            default:
                                                               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
                                                         }
                                                      }

                                                      /// <summary>
                                                      /// Maps current instance to an instance of type <typeparamref name="TResult"/>.
                                                      /// </summary>
                                                      /// <param name="failure">The instance to return if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c>.</param>
                                                      /// <param name="success">The instance to return if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c>.</param>
                                                      public TResult Map<TResult>(
                                                         TResult @failure,
                                                         TResult @success)
                                                      {
                                                         switch (this)
                                                         {
                                                            case global::Thinktecture.Tests.Result<T>.Failure value:
                                                                  return @failure;
                                                            case global::Thinktecture.Tests.Result<T>.Success value:
                                                                  return @success;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
                                                            }
                                                      }
                                                   }

                                                   """);
   }

   [Fact]
   public void Should_generate_record_with_non_default_ctor()
   {
      var source = """
                   using System;
                   using Thinktecture;

                   namespace Thinktecture.Tests
                   {
                      [Union]
                      public partial record TestUnion
                      {
                         public string Name { get; }

                         private TestUnion(string name)
                         {
                            Name = name;
                         }

                         public sealed record Child1(string Name) : TestUnion(Name);

                         public sealed record Child2(string Name) : TestUnion(Name);
                      }
                   }
                   """;
      var outputs = GetGeneratedOutputs<UnionSourceGenerator>(source, typeof(UnionAttribute).Assembly);
      outputs.Should().HaveCount(1);

      var mainOutput = outputs.Single(kvp => kvp.Key.Contains("Thinktecture.Tests.TestUnion.g.cs")).Value;

      AssertOutput(mainOutput, _GENERATED_HEADER + """
                                                   namespace Thinktecture.Tests;

                                                   abstract partial record TestUnion
                                                   {

                                                      /// <summary>
                                                      /// Executes an action depending on the current type.
                                                      /// </summary>
                                                      /// <param name="child2">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Child2"/>.</param>
                                                      /// <param name="child1">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Child1"/>.</param>
                                                      public void Switch(
                                                         global::System.Action<global::Thinktecture.Tests.TestUnion.Child2> @child2,
                                                         global::System.Action<global::Thinktecture.Tests.TestUnion.Child1> @child1)
                                                      {
                                                         switch (this)
                                                         {
                                                            case global::Thinktecture.Tests.TestUnion.Child2 value:
                                                               @child2(value);
                                                               return;
                                                            case global::Thinktecture.Tests.TestUnion.Child1 value:
                                                               @child1(value);
                                                               return;
                                                            default:
                                                               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
                                                         }
                                                      }

                                                      /// <summary>
                                                      /// Executes an action depending on the current type.
                                                      /// </summary>
                                                      /// <param name="state">State to be passed to the callbacks.</param>
                                                      /// <param name="child2">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Child2"/>.</param>
                                                      /// <param name="child1">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Child1"/>.</param>
                                                      public void Switch<TState>(
                                                         TState state,
                                                         global::System.Action<TState, global::Thinktecture.Tests.TestUnion.Child2> @child2,
                                                         global::System.Action<TState, global::Thinktecture.Tests.TestUnion.Child1> @child1)
                                                      {
                                                         switch (this)
                                                         {
                                                            case global::Thinktecture.Tests.TestUnion.Child2 value:
                                                               @child2(state, value);
                                                               return;
                                                            case global::Thinktecture.Tests.TestUnion.Child1 value:
                                                               @child1(state, value);
                                                               return;
                                                            default:
                                                               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
                                                         }
                                                      }

                                                      /// <summary>
                                                      /// Executes a function depending on the current type.
                                                      /// </summary>
                                                      /// <param name="child2">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Child2"/>.</param>
                                                      /// <param name="child1">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Child1"/>.</param>
                                                      public TResult Switch<TResult>(
                                                         global::System.Func<global::Thinktecture.Tests.TestUnion.Child2, TResult> @child2,
                                                         global::System.Func<global::Thinktecture.Tests.TestUnion.Child1, TResult> @child1)
                                                      {
                                                         switch (this)
                                                         {
                                                            case global::Thinktecture.Tests.TestUnion.Child2 value:
                                                               return @child2(value);
                                                            case global::Thinktecture.Tests.TestUnion.Child1 value:
                                                               return @child1(value);
                                                            default:
                                                               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
                                                         }
                                                      }

                                                      /// <summary>
                                                      /// Executes a function depending on the current type.
                                                      /// </summary>
                                                      /// <param name="state">State to be passed to the callbacks.</param>
                                                      /// <param name="child2">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Child2"/>.</param>
                                                      /// <param name="child1">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Child1"/>.</param>
                                                      public TResult Switch<TState, TResult>(
                                                         TState state,
                                                         global::System.Func<TState, global::Thinktecture.Tests.TestUnion.Child2, TResult> @child2,
                                                         global::System.Func<TState, global::Thinktecture.Tests.TestUnion.Child1, TResult> @child1)
                                                      {
                                                         switch (this)
                                                         {
                                                            case global::Thinktecture.Tests.TestUnion.Child2 value:
                                                               return @child2(state, value);
                                                            case global::Thinktecture.Tests.TestUnion.Child1 value:
                                                               return @child1(state, value);
                                                            default:
                                                               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
                                                         }
                                                      }

                                                      /// <summary>
                                                      /// Maps current instance to an instance of type <typeparamref name="TResult"/>.
                                                      /// </summary>
                                                      /// <param name="child2">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Child2"/>.</param>
                                                      /// <param name="child1">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Child1"/>.</param>
                                                      public TResult Map<TResult>(
                                                         TResult @child2,
                                                         TResult @child1)
                                                      {
                                                         switch (this)
                                                         {
                                                            case global::Thinktecture.Tests.TestUnion.Child2 value:
                                                                  return @child2;
                                                            case global::Thinktecture.Tests.TestUnion.Child1 value:
                                                                  return @child1;
                                                               default:
                                                                  throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
                                                            }
                                                      }
                                                   }

                                                   """);
   }
}
