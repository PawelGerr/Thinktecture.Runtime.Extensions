// <auto-generated />
#nullable enable

namespace Thinktecture.Tests
{
   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
   sealed partial class TestUnion :
      global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
      global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>,
      global::Thinktecture.IDisallowDefaultValue
   {
      private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

      private readonly int _valueIndex;

      private readonly int _int32;
      private readonly string? _string;

      /// <summary>
      /// Indication whether the current value is of type <see cref="int"/>.
      /// </summary>
      public bool IsInt32 => this._valueIndex == 1;

      /// <summary>
      /// Indication whether the current value is of type <see cref="string"/>.
      /// </summary>
      public bool IsString => this._valueIndex == 2;

      /// <summary>
      /// Gets the current value as <see cref="int"/>.
      /// </summary>
      /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <see cref="int"/>.</exception>
      public int AsInt32 => IsInt32 ? this._int32 : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'int'.");

      /// <summary>
      /// Gets the current value as <see cref="string"/>.
      /// </summary>
      /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <see cref="string"/>.</exception>
      public string AsString => IsString ? this._string! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'string'.");

      /// <summary>
      /// Gets the current value as <see cref="object"/>.
      /// </summary>
      public object Value => this._valueIndex switch
      {
         1 => this._int32,
         2 => this._string!,
         _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
      };

      /// <summary>
      /// Initializes new instance with <paramref name="int32"/>.
      /// </summary>
      /// <param name="int32">Value to create a new instance for.</param>
      public TestUnion(int @int32)
      {
         this._int32 = @int32;
         this._valueIndex = 1;
      }

      /// <summary>
      /// Initializes new instance with <paramref name="string"/>.
      /// </summary>
      /// <param name="string">Value to create a new instance for.</param>
      public TestUnion(string @string)
      {
         this._string = @string;
         this._valueIndex = 2;
      }

      /// <summary>
      /// Executes an action depending on the current value.
      /// </summary>
      /// <param name="int32">The action to execute if the current value is of type <see cref="int"/>.</param>
      /// <param name="string">The action to execute if the current value is of type <see cref="string"/>.</param>
      public void Switch(
         global::System.Action<int> @int32,
         global::System.Action<string> @string)
      {
         switch (this._valueIndex)
         {
            case 1:
               @int32(this._int32);
               return;
            case 2:
               @string(this._string!);
               return;
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Executes an action depending on the current value.
      /// </summary>
      /// <param name="context">State to be passed to the callbacks.</param>
      /// <param name="int32">The action to execute if the current value is of type <see cref="int"/>.</param>
      /// <param name="string">The action to execute if the current value is of type <see cref="string"/>.</param>
      public void Switch<TState>(
         TState @context,
         global::System.Action<TState, int> @int32,
         global::System.Action<TState, string> @string)
#if NET9_0_OR_GREATER
		where TState : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               @int32(@context, this._int32);
               return;
            case 2:
               @string(@context, this._string!);
               return;
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Executes a function depending on the current value.
      /// </summary>
      /// <param name="int32">The function to execute if the current value is of type <see cref="int"/>.</param>
      /// <param name="string">The function to execute if the current value is of type <see cref="string"/>.</param>
      public TResult Switch<TResult>(
         global::System.Func<int, TResult> @int32,
         global::System.Func<string, TResult> @string)
#if NET9_0_OR_GREATER
		   where TResult : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               return @int32(this._int32);
            case 2:
               return @string(this._string!);
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Executes a function depending on the current value.
      /// </summary>
      /// <param name="context">State to be passed to the callbacks.</param>
      /// <param name="int32">The function to execute if the current value is of type <see cref="int"/>.</param>
      /// <param name="string">The function to execute if the current value is of type <see cref="string"/>.</param>
      public TResult Switch<TState, TResult>(
         TState @context,
         global::System.Func<TState, int, TResult> @int32,
         global::System.Func<TState, string, TResult> @string)
#if NET9_0_OR_GREATER
		   where TResult : allows ref struct
		   where TState : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               return @int32(@context, this._int32);
            case 2:
               return @string(@context, this._string!);
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Maps current value to an instance of type <typeparamref name="TResult"/>.
      /// </summary>
      /// <param name="int32">The instance to return if the current value is of type <see cref="int"/>.</param>
      /// <param name="string">The instance to return if the current value is of type <see cref="string"/>.</param>
      public TResult Map<TResult>(
         TResult @int32,
         TResult @string)
#if NET9_0_OR_GREATER
		   where TResult : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               return @int32;
            case 2:
               return @string;
            default:
               throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Implicit conversion from type <see cref="int"/>.
      /// </summary>
      /// <param name="int32">Value to covert from.</param>
      /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="int32"/>.</returns>
      public static implicit operator global::Thinktecture.Tests.TestUnion(int @int32)
      {
         return new global::Thinktecture.Tests.TestUnion(@int32);
      }

      /// <summary>
      /// Implicit conversion from type <see cref="string"/>.
      /// </summary>
      /// <param name="string">Value to covert from.</param>
      /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="string"/>.</returns>
      public static implicit operator global::Thinktecture.Tests.TestUnion(string @string)
      {
         return new global::Thinktecture.Tests.TestUnion(@string);
      }

      /// <summary>
      /// Explicit conversion to type <see cref="int"/>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>Inner value of type <see cref="int"/>.</returns>
      /// <exception cref="System.InvalidOperationException">If the inner value is not a <see cref="int"/>.</exception>
      public static explicit operator int(global::Thinktecture.Tests.TestUnion obj)
      {
         return obj.AsInt32;
      }

      /// <summary>
      /// Explicit conversion to type <see cref="string"/>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>Inner value of type <see cref="string"/>.</returns>
      /// <exception cref="System.InvalidOperationException">If the inner value is not a <see cref="string"/>.</exception>
      public static explicit operator string(global::Thinktecture.Tests.TestUnion obj)
      {
         return obj.AsString;
      }

      /// <summary>
      /// Compares two instances of <see cref="TestUnion"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
      {
         if (obj is null)
            return other is null;

         return obj.Equals(other);
      }

      /// <summary>
      /// Compares two instances of <see cref="TestUnion"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
      {
         return !(obj == other);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestUnion? other)
      {
         if (other is null)
            return false;

         if (ReferenceEquals(this, other))
            return true;

         if (this._valueIndex != other._valueIndex)
            return false;

         return this._valueIndex switch
         {
            1 => this._int32.Equals(other._int32),
            2 => this._string is null ? other._string is null : this._string.Equals(other._string, global::System.StringComparison.OrdinalIgnoreCase),
            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
         };
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return this._valueIndex switch
         {
            1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._int32.GetHashCode()),
            2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._string?.GetHashCode(global::System.StringComparison.OrdinalIgnoreCase) ?? 0),
            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
         };
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this._valueIndex switch
         {
            1 => this._int32.ToString(),
            2 => this._string,
            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
         };
      }
   }
}
