// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

partial class _1TestValueObject :
   global::System.IParsable<global::Thinktecture.Tests._1TestValueObject>
{
   private static global::Thinktecture.ValidationError? Validate<T>(int key, global::System.IFormatProvider? provider, out global::Thinktecture.Tests._1TestValueObject? result)
      where T : global::Thinktecture.IValueObjectFactory<global::Thinktecture.Tests._1TestValueObject, int, global::Thinktecture.ValidationError>
   {
      return T.Validate(key, provider, out result);
   }

   /// <inheritdoc />
   public static global::Thinktecture.Tests._1TestValueObject Parse(string s, global::System.IFormatProvider? provider)
   {
      var key = int.Parse(s, provider);
      var validationError = Validate<global::Thinktecture.Tests._1TestValueObject>(key, provider, out var result);

      if(validationError is null)
         return result!;

      throw new global::System.FormatException(validationError.ToString() ?? "Unable to parse \"_1TestValueObject\".");
   }

   /// <inheritdoc />
   public static bool TryParse(
      string? s,
      global::System.IFormatProvider? provider,
      [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::Thinktecture.Tests._1TestValueObject result)
   {
      if(s is null)
      {
         result = default;
         return false;
      }

      if(!int.TryParse(s, provider, out var key))
      {
         result = default;
         return false;
      }

      var validationError = Validate<global::Thinktecture.Tests._1TestValueObject>(key, provider, out result!);
      return validationError is null;
   }
}
