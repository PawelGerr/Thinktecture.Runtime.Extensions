// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

[global::Newtonsoft.Json.JsonConverterAttribute(typeof(ValueObjectNewtonsoftJsonConverter))]
partial class TestValueObject
{
   /// <summary>
   /// JSON converter for <see cref="TestValueObject"/>.
   /// </summary>
   public sealed class ValueObjectNewtonsoftJsonConverter : global::Newtonsoft.Json.JsonConverter
   {
      private static readonly global::System.Type _type = typeof(global::Thinktecture.Tests.TestValueObject);

      /// <inheritdoc />
      public override bool CanConvert(global::System.Type objectType)
      {
         return _type == objectType;
      }

      /// <inheritdoc />
      public override object? ReadJson(global::Newtonsoft.Json.JsonReader reader, global::System.Type objectType, object? existingValue, global::Newtonsoft.Json.JsonSerializer serializer)
      {
         if (reader is null)
            throw new global::System.ArgumentNullException(nameof(reader));
         if (serializer is null)
            throw new global::System.ArgumentNullException(nameof(serializer));

         if (reader.TokenType == global::Newtonsoft.Json.JsonToken.Null)
         {
            if(global::System.Nullable.GetUnderlyingType(objectType) == _type)
               return null;

            var (lineNumber, linePosition) = GetLineInfo(reader);

            return default(global::Thinktecture.Tests.TestValueObject);
         }

         if (reader.TokenType != global::Newtonsoft.Json.JsonToken.StartObject)
         {
            var (lineNumber, linePosition) = GetLineInfo(reader);

            throw new global::Newtonsoft.Json.JsonReaderException(
               $"Unexpected token \"{reader.TokenType}\" when trying to deserialize \"TestValueObject\". Expected token: \"{(global::Newtonsoft.Json.JsonToken.StartObject)}\".",
               reader.Path,
               lineNumber,
               linePosition,
               null);
         }

         global::Thinktecture.Tests.ClassDisallowingDefaultValues? @nonNullableReferenceType = default;
         global::Thinktecture.Tests.ClassDisallowingDefaultValues? @nullableReferenceType = default;
         global::Thinktecture.Argument<global::Thinktecture.Tests.StructDisallowingDefaultValues> @nonNullableStruct = default;
         global::Thinktecture.Tests.StructDisallowingDefaultValues? @nullableStruct = default;

         var comparer = global::System.StringComparer.OrdinalIgnoreCase;

         while (reader.Read())
         {
            if (reader.TokenType == global::Newtonsoft.Json.JsonToken.EndObject)
               break;

            if (reader.TokenType != global::Newtonsoft.Json.JsonToken.PropertyName)
            {
               var (lineNumber, linePosition) = GetLineInfo(reader);

               throw new global::Newtonsoft.Json.JsonReaderException(
                  $"Unexpected token \"{reader.TokenType}\" when trying to deserialize \"TestValueObject\". Expected token: \"{(global::Newtonsoft.Json.JsonToken.PropertyName)}\".",
                  reader.Path,
                  lineNumber,
                  linePosition,
                  null);
            }

            var propName = reader.Value!.ToString();

            if(!reader.Read())
            {
               var (lineNumber, linePosition) = GetLineInfo(reader);

               throw new global::Newtonsoft.Json.JsonReaderException(
                  $"Unexpected end of the JSON message when trying the read the value of \"{propName}\" during deserialization of \"TestValueObject\".",
                  reader.Path,
                  lineNumber,
                  linePosition,
                  null);
            }

            if (comparer.Equals(propName, "nonNullableReferenceType"))
            {
               @nonNullableReferenceType = serializer.Deserialize<global::Thinktecture.Tests.ClassDisallowingDefaultValues>(reader);
            }
            else if (comparer.Equals(propName, "nullableReferenceType"))
            {
               @nullableReferenceType = serializer.Deserialize<global::Thinktecture.Tests.ClassDisallowingDefaultValues?>(reader);
            }
            else if (comparer.Equals(propName, "nonNullableStruct"))
            {
               @nonNullableStruct = serializer.Deserialize<global::Thinktecture.Tests.StructDisallowingDefaultValues>(reader);
            }
            else if (comparer.Equals(propName, "nullableStruct"))
            {
               @nullableStruct = serializer.Deserialize<global::Thinktecture.Tests.StructDisallowingDefaultValues?>(reader);
            }
            else
            {
               var (lineNumber, linePosition) = GetLineInfo(reader);

               throw new global::Newtonsoft.Json.JsonReaderException(
                  $"Unknown member \"{propName}\" encountered when trying to deserialize \"TestValueObject\".",
                  reader.Path,
                  lineNumber,
                  linePosition,
                  null);
            }
         }

         if (!@nonNullableStruct.IsSet)
         {
            var (lineNumber, linePosition) = GetLineInfo(reader);

            throw new global::Newtonsoft.Json.JsonReaderException(
               $"Cannot deserialize type \"TestValueObject\" because the member \"_nonNullableStruct\" of type \"global::Thinktecture.Tests.StructDisallowingDefaultValues\" is missing and does not allow default values.",
               reader.Path,
               lineNumber,
               linePosition,
               null);
         }

         var validationError = global::Thinktecture.Tests.TestValueObject.Validate(
                                    @nonNullableReferenceType!,
                                    @nullableReferenceType!,
                                    @nonNullableStruct.Value,
                                    @nullableStruct!,
                                    out var obj);

         if (validationError is not null)
         {
            var (lineNumber, linePosition) = GetLineInfo(reader);

            throw new global::Newtonsoft.Json.JsonSerializationException(
               validationError.ToString() ?? "Unable to deserialize \"TestValueObject\".",
               reader.Path,
               lineNumber,
               linePosition,
               null);
         }

         return obj;
      }

      /// <inheritdoc />
      public override void WriteJson(global::Newtonsoft.Json.JsonWriter writer, object? value, global::Newtonsoft.Json.JsonSerializer serializer)
      {
         if (value is null)
         {
            writer.WriteNull();
            return;
         }

         var obj = (global::Thinktecture.Tests.TestValueObject)value;
         var resolver = serializer.ContractResolver as global::Newtonsoft.Json.Serialization.DefaultContractResolver;

         writer.WriteStartObject();
         var @nonNullableReferenceTypePropertyValue = obj._nonNullableReferenceType;

         if(serializer.NullValueHandling != global::Newtonsoft.Json.NullValueHandling.Ignore || @nonNullableReferenceTypePropertyValue is not null)
         {
            writer.WritePropertyName((resolver != null) ? resolver.GetResolvedPropertyName("_nonNullableReferenceType") : "_nonNullableReferenceType");
            serializer.Serialize(writer, @nonNullableReferenceTypePropertyValue);
         }
         var @nullableReferenceTypePropertyValue = obj._nullableReferenceType;

         if(serializer.NullValueHandling != global::Newtonsoft.Json.NullValueHandling.Ignore || @nullableReferenceTypePropertyValue is not null)
         {
            writer.WritePropertyName((resolver != null) ? resolver.GetResolvedPropertyName("_nullableReferenceType") : "_nullableReferenceType");
            serializer.Serialize(writer, @nullableReferenceTypePropertyValue);
         }
         var @nonNullableStructPropertyValue = obj._nonNullableStruct;

         writer.WritePropertyName((resolver != null) ? resolver.GetResolvedPropertyName("_nonNullableStruct") : "_nonNullableStruct");
         serializer.Serialize(writer, @nonNullableStructPropertyValue);
         var @nullableStructPropertyValue = obj._nullableStruct;

         if(serializer.NullValueHandling != global::Newtonsoft.Json.NullValueHandling.Ignore || @nullableStructPropertyValue is not null)
         {
            writer.WritePropertyName((resolver != null) ? resolver.GetResolvedPropertyName("_nullableStruct") : "_nullableStruct");
            serializer.Serialize(writer, @nullableStructPropertyValue);
         }
         writer.WriteEndObject();
      }

      private static (int Number, int Position) GetLineInfo(global::Newtonsoft.Json.JsonReader reader)
      {
         var lineInfo = (reader as global::Newtonsoft.Json.IJsonLineInfo);

         if (lineInfo?.HasLineInfo() == true)
         {
            return (lineInfo.LineNumber, lineInfo.LinePosition);
         }
         else
         {
            return (0, 0);
         }
      }
   }
}
