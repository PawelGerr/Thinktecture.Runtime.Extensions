// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(JsonConverterFactory))]
partial class ComplexValueObjectWithNonNullProperty
{
   /// <summary>
   /// JSON converter for <see cref="ComplexValueObjectWithNonNullProperty"/>.
   /// </summary>
   public sealed class JsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::Thinktecture.Tests.ComplexValueObjectWithNonNullProperty>
   {
      private readonly global::System.Text.Json.Serialization.JsonConverter<int> _propertyConverter;
      private readonly string _propertyPropertyName;

      /// <summary>
      /// Initializes JSON converter for <see cref="ComplexValueObjectWithNonNullProperty"/>.
      /// </summary>
      public JsonConverter(global::System.Text.Json.JsonSerializerOptions options)
      {
         if(options is null)
            throw new global::System.ArgumentNullException(nameof(options));

         var namingPolicy = options.PropertyNamingPolicy;

         this._propertyConverter = (global::System.Text.Json.Serialization.JsonConverter<int>)global::Thinktecture.Internal.JsonSerializerOptionsExtensions.GetCustomMemberConverter(options, typeof(int));
         this._propertyPropertyName = namingPolicy?.ConvertName("Property") ?? "Property";
      }

      /// <inheritdoc />
      public override global::Thinktecture.Tests.ComplexValueObjectWithNonNullProperty? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
      {
         if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return default;

         if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException($"Unexpected token \"{reader.TokenType}\" when trying to deserialize \"ComplexValueObjectWithNonNullProperty\". Expected token: \"{(global::System.Text.Json.JsonTokenType.StartObject)}\".");

         int @property = default;

         var comparer = options.PropertyNameCaseInsensitive ? global::System.StringComparer.OrdinalIgnoreCase : global::System.StringComparer.Ordinal;

         while (reader.Read())
         {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
               break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
               throw new global::System.Text.Json.JsonException($"Unexpected token \"{reader.TokenType}\" when trying to deserialize \"ComplexValueObjectWithNonNullProperty\". Expected token: \"{(global::System.Text.Json.JsonTokenType.PropertyName)}\".");

            var propName = reader.GetString();

            if(!reader.Read())
               throw new global::System.Text.Json.JsonException($"Unexpected end of the JSON message when trying the read the value of \"{propName}\" during deserialization of \"ComplexValueObjectWithNonNullProperty\".");

            if (comparer.Equals(propName, this._propertyPropertyName))
            {
               @property = this._propertyConverter.Read(ref reader, typeof(int), options);
            }
            else
            {
               throw new global::System.Text.Json.JsonException($"Unknown member \"{propName}\" encountered when trying to deserialize \"ComplexValueObjectWithNonNullProperty\".");
            }
         }

         var validationError = global::Thinktecture.Tests.ComplexValueObjectWithNonNullProperty.Validate(
                                    @property!,
                                    out var obj);

         if (validationError is not null)
            throw new global::System.Text.Json.JsonException(validationError.ToString() ?? "Unable to deserialize \"ComplexValueObjectWithNonNullProperty\".");

         return obj;
      }

      /// <inheritdoc />
      public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::Thinktecture.Tests.ComplexValueObjectWithNonNullProperty value, global::System.Text.Json.JsonSerializerOptions options)
      {
         writer.WriteStartObject();

         var ignoreNullValues = options.DefaultIgnoreCondition is global::System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull or global::System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault;
         var ignoreDefaultValues = options.DefaultIgnoreCondition == global::System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault;

         var @propertyPropertyValue = value.Property;

         if(!ignoreDefaultValues || !@propertyPropertyValue.Equals(default(int)))
         {
            writer.WritePropertyName(this._propertyPropertyName);
            this._propertyConverter.Write(writer, @propertyPropertyValue, options);
         }
         writer.WriteEndObject();
      }
   }

   /// <summary>
   /// JSON converter factory for <see cref="ComplexValueObjectWithNonNullProperty"/>.
   /// </summary>
   public class JsonConverterFactory : global::System.Text.Json.Serialization.JsonConverterFactory
   {
      /// <inheritdoc />
      public override bool CanConvert(global::System.Type typeToConvert)
      {
         return typeof(global::Thinktecture.Tests.ComplexValueObjectWithNonNullProperty).IsAssignableFrom(typeToConvert);
      }

      /// <inheritdoc />
      public override global::System.Text.Json.Serialization.JsonConverter CreateConverter(global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
      {
         if (typeToConvert is null)
            throw new global::System.ArgumentNullException(nameof(typeToConvert));
         if (options is null)
            throw new global::System.ArgumentNullException(nameof(options));

         return new JsonConverter(options);
      }
   }
}
