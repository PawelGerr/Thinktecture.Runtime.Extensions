// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

[global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
abstract partial class TestUnion :
   global::Thinktecture.Internal.IMetadataOwner
{
   static global::Thinktecture.Internal.Metadata global::Thinktecture.Internal.IMetadataOwner.Metadata { get; }
      = new global::Thinktecture.Internal.Metadata.RegularUnion(typeof(global::Thinktecture.Tests.TestUnion))
      {
         TypeMembers = new global::System.Collections.Generic.List<global::System.Type>
                       {
                           typeof(global::Thinktecture.Tests.TestUnion.Test)
                       }
                       .AsReadOnly()
      };

   private TestUnion()
   {
   }

   /// <summary>
   /// Executes an action depending on the current type.
   /// </summary>
   /// <param name="test">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Test"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public void Switch(
      global::System.Action<global::Thinktecture.Tests.TestUnion.Test> @test)
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.Test value:
            @test(value);
            return;
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes an action depending on the current type.
   /// </summary>
   /// <param name="context">State to be passed to the callbacks.</param>
   /// <param name="test">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Test"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public void Switch<TState>(
      TState @context,
      global::System.Action<TState, global::Thinktecture.Tests.TestUnion.Test> @test)
#if NET9_0_OR_GREATER
		where TState : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.Test value:
            @test(@context, value);
            return;
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes a function depending on the current type.
   /// </summary>
   /// <param name="test">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Test"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Switch<TResult>(
      global::System.Func<global::Thinktecture.Tests.TestUnion.Test, TResult> @test)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.Test value:
            return @test(value);
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes a function depending on the current type.
   /// </summary>
   /// <param name="context">State to be passed to the callbacks.</param>
   /// <param name="test">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Test"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Switch<TState, TResult>(
      TState @context,
      global::System.Func<TState, global::Thinktecture.Tests.TestUnion.Test, TResult> @test)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
		where TState : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.Test value:
            return @test(@context, value);
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

#pragma warning disable CS0108 // Map in nested union hides Map from base class
   /// <summary>
   /// Maps current instance to an instance of type <typeparamref name="TResult"/>.
   /// </summary>
   /// <param name="test">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.Test"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Map<TResult>(
      TResult @test)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.Test value:
               return @test;
            default:
               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
         }
   }
#pragma warning restore CS0108 // Map in nested union hides Map from base class
}
