// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

[global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
abstract partial class TestUnion :
   global::Thinktecture.Internal.IMetadataOwner
{
   static global::Thinktecture.Internal.Metadata global::Thinktecture.Internal.IMetadataOwner.Metadata { get; }
      = new global::Thinktecture.Internal.Metadata.RegularUnion(typeof(global::Thinktecture.Tests.TestUnion))
      {
         TypeMembers = new global::System.Collections.Generic.List<global::System.Type>
                       {
                           typeof(global::Thinktecture.Tests.TestUnion.BaseType1),
                           typeof(global::Thinktecture.Tests.TestUnion.ConcreteType1),
                           typeof(global::Thinktecture.Tests.TestUnion.ConcreteType2),
                           typeof(global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1),
                           typeof(global::Thinktecture.Tests.TestUnion.BaseType2),
                           typeof(global::Thinktecture.Tests.TestUnion.ConcreteType3),
                           typeof(global::Thinktecture.Tests.TestUnion.ConcreteType4),
                           typeof(global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1),
                           typeof(global::Thinktecture.Tests.TestUnion.DirectType)
                       }
                       .AsReadOnly()
      };

   private TestUnion()
   {
   }

   /// <summary>
   /// Executes an action depending on the current type.
   /// </summary>
   /// <param name="concreteType4ConcreteType4_1">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1"/>.</param>
   /// <param name="concreteType4">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4"/>.</param>
   /// <param name="concreteType3">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType3"/>.</param>
   /// <param name="concreteType2ConcreteType2_1">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1"/>.</param>
   /// <param name="concreteType2">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType2"/>.</param>
   /// <param name="concreteType1">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType1"/>.</param>
   /// <param name="directType">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.DirectType"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public void Switch(
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1> @concreteType4ConcreteType4_1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.ConcreteType4> @concreteType4,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.ConcreteType3> @concreteType3,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1> @concreteType2ConcreteType2_1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.ConcreteType2> @concreteType2,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.ConcreteType1> @concreteType1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.DirectType> @directType)
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1 value:
            @concreteType4ConcreteType4_1(value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType4 value:
            @concreteType4(value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType3 value:
            @concreteType3(value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1 value:
            @concreteType2ConcreteType2_1(value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType2 value:
            @concreteType2(value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType1 value:
            @concreteType1(value);
            return;
         case global::Thinktecture.Tests.TestUnion.DirectType value:
            @directType(value);
            return;
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes an action depending on the current type.
   /// </summary>
   /// <param name="state">State to be passed to the callbacks.</param>
   /// <param name="concreteType4ConcreteType4_1">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1"/>.</param>
   /// <param name="concreteType4">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4"/>.</param>
   /// <param name="concreteType3">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType3"/>.</param>
   /// <param name="concreteType2ConcreteType2_1">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1"/>.</param>
   /// <param name="concreteType2">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType2"/>.</param>
   /// <param name="concreteType1">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType1"/>.</param>
   /// <param name="directType">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.DirectType"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public void Switch<TState>(
      TState @state,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1> @concreteType4ConcreteType4_1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.ConcreteType4> @concreteType4,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.ConcreteType3> @concreteType3,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1> @concreteType2ConcreteType2_1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.ConcreteType2> @concreteType2,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.ConcreteType1> @concreteType1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.DirectType> @directType)
#if NET9_0_OR_GREATER
		where TState : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1 value:
            @concreteType4ConcreteType4_1(@state, value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType4 value:
            @concreteType4(@state, value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType3 value:
            @concreteType3(@state, value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1 value:
            @concreteType2ConcreteType2_1(@state, value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType2 value:
            @concreteType2(@state, value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType1 value:
            @concreteType1(@state, value);
            return;
         case global::Thinktecture.Tests.TestUnion.DirectType value:
            @directType(@state, value);
            return;
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes a function depending on the current type.
   /// </summary>
   /// <param name="concreteType4ConcreteType4_1">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1"/>.</param>
   /// <param name="concreteType4">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4"/>.</param>
   /// <param name="concreteType3">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType3"/>.</param>
   /// <param name="concreteType2ConcreteType2_1">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1"/>.</param>
   /// <param name="concreteType2">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType2"/>.</param>
   /// <param name="concreteType1">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType1"/>.</param>
   /// <param name="directType">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.DirectType"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Switch<TResult>(
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1, TResult> @concreteType4ConcreteType4_1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.ConcreteType4, TResult> @concreteType4,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.ConcreteType3, TResult> @concreteType3,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1, TResult> @concreteType2ConcreteType2_1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.ConcreteType2, TResult> @concreteType2,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.ConcreteType1, TResult> @concreteType1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.DirectType, TResult> @directType)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1 value:
            return @concreteType4ConcreteType4_1(value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType4 value:
            return @concreteType4(value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType3 value:
            return @concreteType3(value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1 value:
            return @concreteType2ConcreteType2_1(value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType2 value:
            return @concreteType2(value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType1 value:
            return @concreteType1(value);
         case global::Thinktecture.Tests.TestUnion.DirectType value:
            return @directType(value);
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes a function depending on the current type.
   /// </summary>
   /// <param name="state">State to be passed to the callbacks.</param>
   /// <param name="concreteType4ConcreteType4_1">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1"/>.</param>
   /// <param name="concreteType4">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4"/>.</param>
   /// <param name="concreteType3">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType3"/>.</param>
   /// <param name="concreteType2ConcreteType2_1">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1"/>.</param>
   /// <param name="concreteType2">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType2"/>.</param>
   /// <param name="concreteType1">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType1"/>.</param>
   /// <param name="directType">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.DirectType"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Switch<TState, TResult>(
      TState @state,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1, TResult> @concreteType4ConcreteType4_1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.ConcreteType4, TResult> @concreteType4,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.ConcreteType3, TResult> @concreteType3,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1, TResult> @concreteType2ConcreteType2_1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.ConcreteType2, TResult> @concreteType2,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.ConcreteType1, TResult> @concreteType1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.DirectType, TResult> @directType)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
		where TState : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1 value:
            return @concreteType4ConcreteType4_1(@state, value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType4 value:
            return @concreteType4(@state, value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType3 value:
            return @concreteType3(@state, value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1 value:
            return @concreteType2ConcreteType2_1(@state, value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType2 value:
            return @concreteType2(@state, value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType1 value:
            return @concreteType1(@state, value);
         case global::Thinktecture.Tests.TestUnion.DirectType value:
            return @directType(@state, value);
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

#pragma warning disable CS0108 // Map in nested union hides Map from base class
   /// <summary>
   /// Maps current instance to an instance of type <typeparamref name="TResult"/>.
   /// </summary>
   /// <param name="concreteType4ConcreteType4_1">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1"/>.</param>
   /// <param name="concreteType4">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4"/>.</param>
   /// <param name="concreteType3">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType3"/>.</param>
   /// <param name="concreteType2ConcreteType2_1">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1"/>.</param>
   /// <param name="concreteType2">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType2"/>.</param>
   /// <param name="concreteType1">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType1"/>.</param>
   /// <param name="directType">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.DirectType"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Map<TResult>(
      TResult @concreteType4ConcreteType4_1,
      TResult @concreteType4,
      TResult @concreteType3,
      TResult @concreteType2ConcreteType2_1,
      TResult @concreteType2,
      TResult @concreteType1,
      TResult @directType)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.ConcreteType4.ConcreteType4_1 value:
               return @concreteType4ConcreteType4_1;
         case global::Thinktecture.Tests.TestUnion.ConcreteType4 value:
               return @concreteType4;
         case global::Thinktecture.Tests.TestUnion.ConcreteType3 value:
               return @concreteType3;
         case global::Thinktecture.Tests.TestUnion.ConcreteType2.ConcreteType2_1 value:
               return @concreteType2ConcreteType2_1;
         case global::Thinktecture.Tests.TestUnion.ConcreteType2 value:
               return @concreteType2;
         case global::Thinktecture.Tests.TestUnion.ConcreteType1 value:
               return @concreteType1;
         case global::Thinktecture.Tests.TestUnion.DirectType value:
               return @directType;
            default:
               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
         }
   }
#pragma warning restore CS0108 // Map in nested union hides Map from base class

   /// <summary>
   /// Executes an action depending on the current type.
   /// </summary>
   /// <param name="concreteType4">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4"/>.</param>
   /// <param name="concreteType3">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType3"/>.</param>
   /// <param name="baseType1">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.BaseType1"/>.</param>
   /// <param name="directType">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.DirectType"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public void Switch(
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.ConcreteType4> @concreteType4,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.ConcreteType3> @concreteType3,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.BaseType1> @baseType1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<global::Thinktecture.Tests.TestUnion.DirectType> @directType)
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.ConcreteType4 value:
            @concreteType4(value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType3 value:
            @concreteType3(value);
            return;
         case global::Thinktecture.Tests.TestUnion.BaseType1 value:
            @baseType1(value);
            return;
         case global::Thinktecture.Tests.TestUnion.DirectType value:
            @directType(value);
            return;
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes an action depending on the current type.
   /// </summary>
   /// <param name="state">State to be passed to the callbacks.</param>
   /// <param name="concreteType4">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4"/>.</param>
   /// <param name="concreteType3">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType3"/>.</param>
   /// <param name="baseType1">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.BaseType1"/>.</param>
   /// <param name="directType">The action to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.DirectType"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public void Switch<TState>(
      TState @state,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.ConcreteType4> @concreteType4,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.ConcreteType3> @concreteType3,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.BaseType1> @baseType1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Action<TState, global::Thinktecture.Tests.TestUnion.DirectType> @directType)
#if NET9_0_OR_GREATER
		where TState : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.ConcreteType4 value:
            @concreteType4(@state, value);
            return;
         case global::Thinktecture.Tests.TestUnion.ConcreteType3 value:
            @concreteType3(@state, value);
            return;
         case global::Thinktecture.Tests.TestUnion.BaseType1 value:
            @baseType1(@state, value);
            return;
         case global::Thinktecture.Tests.TestUnion.DirectType value:
            @directType(@state, value);
            return;
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes a function depending on the current type.
   /// </summary>
   /// <param name="concreteType4">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4"/>.</param>
   /// <param name="concreteType3">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType3"/>.</param>
   /// <param name="baseType1">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.BaseType1"/>.</param>
   /// <param name="directType">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.DirectType"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Switch<TResult>(
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.ConcreteType4, TResult> @concreteType4,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.ConcreteType3, TResult> @concreteType3,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.BaseType1, TResult> @baseType1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<global::Thinktecture.Tests.TestUnion.DirectType, TResult> @directType)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.ConcreteType4 value:
            return @concreteType4(value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType3 value:
            return @concreteType3(value);
         case global::Thinktecture.Tests.TestUnion.BaseType1 value:
            return @baseType1(value);
         case global::Thinktecture.Tests.TestUnion.DirectType value:
            return @directType(value);
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes a function depending on the current type.
   /// </summary>
   /// <param name="state">State to be passed to the callbacks.</param>
   /// <param name="concreteType4">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4"/>.</param>
   /// <param name="concreteType3">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType3"/>.</param>
   /// <param name="baseType1">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.BaseType1"/>.</param>
   /// <param name="directType">The function to execute if the current type is <see cref="global::Thinktecture.Tests.TestUnion.DirectType"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Switch<TState, TResult>(
      TState @state,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.ConcreteType4, TResult> @concreteType4,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.ConcreteType3, TResult> @concreteType3,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.BaseType1, TResult> @baseType1,
      [global::JetBrains.Annotations.InstantHandleAttribute] global::System.Func<TState, global::Thinktecture.Tests.TestUnion.DirectType, TResult> @directType)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
		where TState : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.ConcreteType4 value:
            return @concreteType4(@state, value);
         case global::Thinktecture.Tests.TestUnion.ConcreteType3 value:
            return @concreteType3(@state, value);
         case global::Thinktecture.Tests.TestUnion.BaseType1 value:
            return @baseType1(@state, value);
         case global::Thinktecture.Tests.TestUnion.DirectType value:
            return @directType(@state, value);
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

#pragma warning disable CS0108 // Map in nested union hides Map from base class
   /// <summary>
   /// Maps current instance to an instance of type <typeparamref name="TResult"/>.
   /// </summary>
   /// <param name="concreteType4">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType4"/>.</param>
   /// <param name="concreteType3">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.ConcreteType3"/>.</param>
   /// <param name="baseType1">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.BaseType1"/>.</param>
   /// <param name="directType">The instance to return if the current type is <see cref="global::Thinktecture.Tests.TestUnion.DirectType"/>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Map<TResult>(
      TResult @concreteType4,
      TResult @concreteType3,
      TResult @baseType1,
      TResult @directType)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.TestUnion.ConcreteType4 value:
               return @concreteType4;
         case global::Thinktecture.Tests.TestUnion.ConcreteType3 value:
               return @concreteType3;
         case global::Thinktecture.Tests.TestUnion.BaseType1 value:
               return @baseType1;
         case global::Thinktecture.Tests.TestUnion.DirectType value:
               return @directType;
            default:
               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
         }
   }
#pragma warning restore CS0108 // Map in nested union hides Map from base class
}
