// <auto-generated />
#nullable enable

namespace Thinktecture.Tests
{
   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
   sealed partial class TestValueObject : global::System.IEquatable<global::Thinktecture.Tests.TestValueObject?>,
      global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestValueObject, global::Thinktecture.Tests.TestValueObject, bool>,
      global::Thinktecture.Internal.IMetadataOwner
   {
      static global::Thinktecture.Internal.Metadata global::Thinktecture.Internal.IMetadataOwner.Metadata { get; } = new global::Thinktecture.Internal.Metadata.ComplexValueObject
      {
         Type = typeof(global::Thinktecture.Tests.TestValueObject),
         AssignableMembers = new global::System.Collections.Generic.List<global::System.Reflection.MemberInfo>(
               global::System.Linq.Enumerable.Select(
                  ((global::System.Linq.Expressions.NewExpression)
                     ((global::System.Linq.Expressions.Expression<global::System.Func<global::Thinktecture.Tests.TestValueObject, object>>)
                        (object (global::Thinktecture.Tests.TestValueObject o) => new
                           {
                              o.Prop1,
                              o.Prop2
                           })).Body).Arguments,
                  arg => ((global::System.Linq.Expressions.MemberExpression)arg).Member)
            )
            .AsReadOnly()
      };

      private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestValueObject).GetHashCode();

      public static global::Thinktecture.ValidationError? Validate(
         string? @prop1,
         global::System.Func<string?, Task<string?>?>? @prop2,
         out global::Thinktecture.Tests.TestValueObject? obj)
      {
         global::Thinktecture.ValidationError? validationError = null;

         ValidateFactoryArguments(
            ref validationError,
            ref @prop1,
            ref @prop2);

         if (validationError is null)
         {
            obj = new global::Thinktecture.Tests.TestValueObject(
               @prop1,
               @prop2);
            obj.FactoryPostInit();
         }
         else
         {
            obj = default;
         }

         return validationError;
      }

      public static global::Thinktecture.Tests.TestValueObject Create(
         string? @prop1,
         global::System.Func<string?, Task<string?>?>? @prop2)
      {
         var validationError = Validate(
            @prop1,
            @prop2,
            out global::Thinktecture.Tests.TestValueObject? obj);

         if (validationError is not null)
            throw new global::System.ComponentModel.DataAnnotations.ValidationException(validationError.ToString() ?? "Validation failed.");

         return obj!;
      }

      public static bool TryCreate(
         string? @prop1,
         global::System.Func<string?, Task<string?>?>? @prop2,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Thinktecture.Tests.TestValueObject? obj)
      {
         return TryCreate(
            @prop1,
            @prop2,
            out obj,
            out _);
      }

      public static bool TryCreate(
         string? @prop1,
         global::System.Func<string?, Task<string?>?>? @prop2,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Thinktecture.Tests.TestValueObject? obj,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(false)] out global::Thinktecture.ValidationError? validationError)
      {
         validationError = Validate(
            @prop1,
            @prop2,
            out obj);

         return validationError is null;
      }

      static partial void ValidateFactoryArguments(
         ref global::Thinktecture.ValidationError? validationError,
         ref string? @prop1,
         ref global::System.Func<string?, Task<string?>?>? @prop2);

      partial void FactoryPostInit();

      private TestValueObject(
         string? @prop1,
         global::System.Func<string?, Task<string?>?>? @prop2)
      {
         ValidateConstructorArguments(
            ref @prop1,
            ref @prop2);

         this.Prop1 = @prop1;
         this.Prop2 = @prop2;
      }

      static partial void ValidateConstructorArguments(
         ref string? @prop1,
         ref global::System.Func<string?, Task<string?>?>? @prop2);

      /// <summary>
      /// Compares two instances of <see cref="TestValueObject"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestValueObject? obj, global::Thinktecture.Tests.TestValueObject? other)
      {
         if (obj is null)
            return other is null;

         return obj.Equals(other);
      }

      /// <summary>
      /// Compares two instances of <see cref="TestValueObject"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestValueObject? obj, global::Thinktecture.Tests.TestValueObject? other)
      {
         return !(obj == other);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestValueObject obj && Equals(obj);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestValueObject? other)
      {
         if (other is null)
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         return global::System.StringComparer.OrdinalIgnoreCase.Equals(this.Prop1, other.Prop1)
             && (this.Prop2 is null ? other.Prop2 is null : this.Prop2.Equals(other.Prop2));
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         var hashCode = new global::System.HashCode();
         hashCode.Add(_typeHashCode);
         hashCode.Add(this.Prop1, global::System.StringComparer.OrdinalIgnoreCase!);
         hashCode.Add(this.Prop2);
         return hashCode.ToHashCode();
      }

      /// <inheritdoc />
      public override string ToString()
      {
         return $"{{ Prop1 = {this.Prop1}, Prop2 = {this.Prop2} }}";
      }
   }
}
