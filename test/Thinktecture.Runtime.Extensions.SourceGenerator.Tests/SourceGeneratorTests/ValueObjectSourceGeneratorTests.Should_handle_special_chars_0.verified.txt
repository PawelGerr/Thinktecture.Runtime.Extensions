// <auto-generated />
#nullable enable

namespace Thinktecture.Tests
{
   [global::System.ComponentModel.TypeConverter(typeof(global::Thinktecture.ThinktectureTypeConverter<global::Thinktecture.Tests._1TestValueObject, int, global::Thinktecture.ValidationError>))]
   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
   sealed partial class _1TestValueObject : global::System.IEquatable<global::Thinktecture.Tests._1TestValueObject?>,
      global::Thinktecture.IKeyedObject<int>,
      global::Thinktecture.IConvertible<int>,
      global::Thinktecture.Internal.IMetadataOwner,
      global::Thinktecture.IObjectFactory<global::Thinktecture.Tests._1TestValueObject, int, global::Thinktecture.ValidationError>
   {
      static global::Thinktecture.Internal.Metadata global::Thinktecture.Internal.IMetadataOwner.Metadata { get; }
         = new global::Thinktecture.Internal.Metadata.Keyed.ValueObject(typeof(global::Thinktecture.Tests._1TestValueObject))
         {
            KeyType = typeof(int),
            ValidationErrorType = typeof(global::Thinktecture.ValidationError),
            ConvertToKey = static int (global::Thinktecture.Tests._1TestValueObject item) => item._1Key,
            ConvertToKeyExpression = static int (global::Thinktecture.Tests._1TestValueObject item) => item._1Key,
            GetKey = static object (object item) => ((global::Thinktecture.Tests._1TestValueObject)item)._1Key,
            ConvertFromKey = static global::Thinktecture.Tests._1TestValueObject (int @_1Key) => global::Thinktecture.Tests._1TestValueObject.Create(@_1Key),
            ConvertFromKeyExpression = static global::Thinktecture.Tests._1TestValueObject (int @_1Key) => global::Thinktecture.Tests._1TestValueObject.Create(@_1Key),
            ConvertFromKeyExpressionViaConstructor = static global::Thinktecture.Tests._1TestValueObject (int @_1Key) => new global::Thinktecture.Tests._1TestValueObject(@_1Key),
            TryGetFromKey = 
               (object? key,
                out object? obj,
                [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)] out object error) =>
               {
                  error = global::Thinktecture.Tests._1TestValueObject.Validate(key is int typedKey ? typedKey : default, null, out var item);
                  obj = item;

                  return error is null;
               }
         };

      private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests._1TestValueObject).GetHashCode();

      /// <summary>
      /// The identifier of this object.
      /// </summary>
      private readonly int _1Key;

      /// <summary>
      /// Validates the provided value and attempts to create an instance of <see cref="_1TestValueObject"/>.
      /// </summary>
      /// <param name="_1Key">The value to validate.</param>
      /// <param name="provider">The format provider for parsing or validation, if applicable.</param>
      /// <param name="obj">When the method returns, contains the created instance of type <see cref="_1TestValueObject"/> if validation succeeds; otherwise, <c>null</c>.</param>
      /// <returns>
      /// A <see cref="global::Thinktecture.ValidationError"/> representing the validation error if validation fails; otherwise, <c>null</c>.
      /// </returns>
      public static global::Thinktecture.ValidationError? Validate(int @_1Key, global::System.IFormatProvider? @provider, out global::Thinktecture.Tests._1TestValueObject? obj)
      {
         global::Thinktecture.ValidationError? validationError = null;
         ValidateFactoryArguments(ref validationError, ref @_1Key);

         if (validationError is null)
         {
            obj = new global::Thinktecture.Tests._1TestValueObject(@_1Key);
            obj.FactoryPostInit();
         }
         else
         {
            obj = default;
         }

         return validationError;
      }
      /// <summary>
      /// Creates an instance of the type <see cref="_1TestValueObject"/> from the provided value,
      /// performing validation during the process.
      /// </summary>
      /// <param name="_1Key">The value to create the object from.</param>
      /// <returns>An instance of <see cref="_1TestValueObject"/> if validation is successful.</returns>
      /// <exception cref="System.ComponentModel.DataAnnotations.ValidationException">
      /// Thrown if the provided value does not pass validation.
      /// </exception>
      public static global::Thinktecture.Tests._1TestValueObject Create(int @_1Key)
      {
         var validationError = Validate(@_1Key, null, out global::Thinktecture.Tests._1TestValueObject? obj);

         if (validationError is not null)
            throw new global::System.ComponentModel.DataAnnotations.ValidationException(validationError.ToString() ?? "Validation failed.");

         return obj!;
      }

      /// <summary>
      /// Tries to create an instance of the type <see cref="_1TestValueObject"/> based on provided value.
      /// </summary>
      /// <param name="_1Key">The value to be used for object creation.</param>
      /// <param name="obj">
      /// When this method returns, contains the created object if the operation succeeded; otherwise, it will be <c>null</c> or default.
      /// </param>
      /// <returns>
      /// Returns <c>true</c> if the object was successfully created; otherwise, returns <c>false</c>.
      /// </returns>
      public static bool TryCreate(int @_1Key, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Thinktecture.Tests._1TestValueObject? obj)
      {
         return TryCreate(@_1Key, out obj, out _);
      }

      /// <summary>
      /// Tries to create an instance of the type <see cref="_1TestValueObject"/> based on provided value.
      /// </summary>
      /// <param name="_1Key">The value to be used for object creation.</param>
      /// <param name="obj">
      /// When this method returns, contains the created object if the operation succeeded; otherwise, it will be <c>null</c> or default.
      /// </param>
      /// <param name="validationError">
      /// When the method returns, contains the validation error if the creation or validation failed; otherwise, it will be <c>null</c>.
      /// </param>
      /// <returns>
      /// Returns <c>true</c> if the object was successfully created; otherwise, returns <c>false</c>.
      /// </returns>
      public static bool TryCreate(
         int @_1Key,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Thinktecture.Tests._1TestValueObject? obj,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(false)] out global::Thinktecture.ValidationError? validationError)
      {
         validationError = Validate(@_1Key, null, out obj);

         return validationError is null;
      }

      static partial void ValidateFactoryArguments(ref global::Thinktecture.ValidationError? validationError, ref int @_1Key);

      partial void FactoryPostInit();

      /// <summary>
      /// Gets the identifier of the item.
      /// </summary>
      [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
      int global::Thinktecture.IConvertible<int>.ToValue()
      {
         return this._1Key;
      }

      /// <summary>
      /// Implicit conversion to the type <see cref="int"/>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>The <see cref="_1Key"/> of provided <paramref name="obj"/> or <c>default</c> if <paramref name="obj"/> is <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("obj")]
      public static implicit operator int?(global::Thinktecture.Tests._1TestValueObject? obj)
      {
         return obj?._1Key;
      }

      /// <summary>
      /// Explicit conversion to the type <see cref="int"/>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>The <see cref="_1Key"/> of provided <paramref name="obj"/>.</returns>
      /// <exception cref="System.NullReferenceException">If <paramref name="obj"/> is <c>null</c>.</exception>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("obj")]
      public static explicit operator int(global::Thinktecture.Tests._1TestValueObject obj)
      {
         if(obj is null)
            throw new global::System.NullReferenceException();

         return obj._1Key;
      }

      /// <summary>
      /// Explicit conversion from the type <see cref="int"/>.
      /// </summary>
      /// <param name="_1Key">Value to covert.</param>
      /// <returns>An instance of <see cref="_1TestValueObject"/>.</returns>
      public static explicit operator global::Thinktecture.Tests._1TestValueObject(int @_1Key)
      {
         return global::Thinktecture.Tests._1TestValueObject.Create(@_1Key);
      }

      /// <summary>
      /// Initializes a new instance of the <see cref="_1TestValueObject"/> type.
      /// </summary>
      private _1TestValueObject(int @_1Key)
      {
         ValidateConstructorArguments(ref @_1Key);

         this._1Key = @_1Key;
      }

      static partial void ValidateConstructorArguments(ref int @_1Key);

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests._1TestValueObject obj && Equals(obj);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests._1TestValueObject? other)
      {
         if (other is null)
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         return this._1Key.Equals(other._1Key);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return global::System.HashCode.Combine(_typeHashCode, this._1Key);
      }

      /// <inheritdoc />
      public override string ToString()
      {
         return this._1Key.ToString();
      }
   }
}
