// <auto-generated />
#nullable enable

namespace Thinktecture.Tests
{
   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
   sealed partial class TestUnion :
      global::System.IEquatable<global::Thinktecture.Tests.TestUnion>,
      global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestUnion, global::Thinktecture.Tests.TestUnion, bool>,
      global::Thinktecture.IDisallowDefaultValue,
      global::Thinktecture.Internal.IMetadataOwner
   {
      static global::Thinktecture.Internal.Metadata global::Thinktecture.Internal.IMetadataOwner.Metadata { get; } = new global::Thinktecture.Internal.Metadata.AdHocUnion
      {
         Type = typeof(global::Thinktecture.Tests.TestUnion),
         MemberTypes = new global::System.Collections.Generic.List<global::System.Type>
                       {
                           typeof(global::System.Collections.Generic.List<string>),
                           typeof(global::System.Collections.Generic.List<int>)
                       }
                       .AsReadOnly()
      };

      private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestUnion).GetHashCode();

      private readonly int _valueIndex;

      private readonly global::System.Collections.Generic.List<string>? _listOfString;
      private readonly global::System.Collections.Generic.List<int>? _listOfInt32;

      /// <summary>
      /// Indication whether the current value is of type <c>global::System.Collections.Generic.List&lt;string&gt;</c>.
      /// </summary>
      public bool IsListOfString => this._valueIndex == 1;

      /// <summary>
      /// Indication whether the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.
      /// </summary>
      public bool IsListOfInt32 => this._valueIndex == 2;

      /// <summary>
      /// Gets the current value as <c>global::System.Collections.Generic.List&lt;string&gt;</c>.
      /// </summary>
      /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>global::System.Collections.Generic.List&lt;string&gt;</c>.</exception>
      public global::System.Collections.Generic.List<string> AsListOfString => IsListOfString ? this._listOfString! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'List<string>'.");

      /// <summary>
      /// Gets the current value as <c>global::System.Collections.Generic.List&lt;int&gt;</c>.
      /// </summary>
      /// <exception cref="global::System.InvalidOperationException">If the current value is not of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</exception>
      public global::System.Collections.Generic.List<int> AsListOfInt32 => IsListOfInt32 ? this._listOfInt32! : throw new global::System.InvalidOperationException($"'{nameof(global::Thinktecture.Tests.TestUnion)}' is not of type 'List<int>'.");

      /// <summary>
      /// Gets the current value as <see cref="object"/>.
      /// </summary>
      public object Value => this._valueIndex switch
      {
         1 => this._listOfString!,
         2 => this._listOfInt32!,
         _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
      };

      /// <summary>
      /// Initializes new instance with <paramref name="listOfString"/>.
      /// </summary>
      /// <param name="listOfString">Value to create a new instance for.</param>
      public TestUnion(global::System.Collections.Generic.List<string> @listOfString)
      {
         this._listOfString = @listOfString;
         this._valueIndex = 1;
      }

      /// <summary>
      /// Initializes new instance with <paramref name="listOfInt32"/>.
      /// </summary>
      /// <param name="listOfInt32">Value to create a new instance for.</param>
      public TestUnion(global::System.Collections.Generic.List<int> @listOfInt32)
      {
         this._listOfInt32 = @listOfInt32;
         this._valueIndex = 2;
      }

      /// <summary>
      /// Executes an action depending on the current value.
      /// </summary>
      /// <param name="listOfString">The action to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;string&gt;</c>.</param>
      /// <param name="listOfInt32">The action to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</param>
      [global::System.Diagnostics.DebuggerStepThroughAttribute]
      public void Switch(
         global::System.Action<global::System.Collections.Generic.List<string>> @listOfString,
         global::System.Action<global::System.Collections.Generic.List<int>> @listOfInt32)
      {
         switch (this._valueIndex)
         {
            case 1:
               @listOfString(this._listOfString!);
               return;
            case 2:
               @listOfInt32(this._listOfInt32!);
               return;
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Executes an action depending on the current value.
      /// </summary>
      /// <param name="state">State to be passed to the callbacks.</param>
      /// <param name="listOfString">The action to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;string&gt;</c>.</param>
      /// <param name="listOfInt32">The action to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</param>
      [global::System.Diagnostics.DebuggerStepThroughAttribute]
      public void Switch<TState>(
         TState @state,
         global::System.Action<TState, global::System.Collections.Generic.List<string>> @listOfString,
         global::System.Action<TState, global::System.Collections.Generic.List<int>> @listOfInt32)
#if NET9_0_OR_GREATER
		where TState : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               @listOfString(@state, this._listOfString!);
               return;
            case 2:
               @listOfInt32(@state, this._listOfInt32!);
               return;
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Executes a function depending on the current value.
      /// </summary>
      /// <param name="listOfString">The function to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;string&gt;</c>.</param>
      /// <param name="listOfInt32">The function to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</param>
      [global::System.Diagnostics.DebuggerStepThroughAttribute]
      public TResult Switch<TResult>(
         global::System.Func<global::System.Collections.Generic.List<string>, TResult> @listOfString,
         global::System.Func<global::System.Collections.Generic.List<int>, TResult> @listOfInt32)
#if NET9_0_OR_GREATER
		   where TResult : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               return @listOfString(this._listOfString!);
            case 2:
               return @listOfInt32(this._listOfInt32!);
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Executes a function depending on the current value.
      /// </summary>
      /// <param name="state">State to be passed to the callbacks.</param>
      /// <param name="listOfString">The function to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;string&gt;</c>.</param>
      /// <param name="listOfInt32">The function to execute if the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</param>
      [global::System.Diagnostics.DebuggerStepThroughAttribute]
      public TResult Switch<TState, TResult>(
         TState @state,
         global::System.Func<TState, global::System.Collections.Generic.List<string>, TResult> @listOfString,
         global::System.Func<TState, global::System.Collections.Generic.List<int>, TResult> @listOfInt32)
#if NET9_0_OR_GREATER
		   where TResult : allows ref struct
		   where TState : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               return @listOfString(@state, this._listOfString!);
            case 2:
               return @listOfInt32(@state, this._listOfInt32!);
            default:
               throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Maps current value to an instance of type <typeparamref name="TResult"/>.
      /// </summary>
      /// <param name="listOfString">The instance to return if the current value is of type <c>global::System.Collections.Generic.List&lt;string&gt;</c>.</param>
      /// <param name="listOfInt32">The instance to return if the current value is of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</param>
      [global::System.Diagnostics.DebuggerStepThroughAttribute]
      public TResult Map<TResult>(
         TResult @listOfString,
         TResult @listOfInt32)
#if NET9_0_OR_GREATER
		   where TResult : allows ref struct
#endif
      {
         switch (this._valueIndex)
         {
            case 1:
               return @listOfString;
            case 2:
               return @listOfInt32;
            default:
               throw new global::System.ArgumentOutOfRangeException($"Unexpected value index '{this._valueIndex}'.");
         }
      }

      /// <summary>
      /// Implicit conversion from type <c>global::System.Collections.Generic.List&lt;string&gt;</c>.
      /// </summary>
      /// <param name="listOfString">Value to covert from.</param>
      /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="listOfString"/>.</returns>
      public static implicit operator global::Thinktecture.Tests.TestUnion(global::System.Collections.Generic.List<string> @listOfString)
      {
         return new global::Thinktecture.Tests.TestUnion(@listOfString);
      }

      /// <summary>
      /// Implicit conversion from type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.
      /// </summary>
      /// <param name="listOfInt32">Value to covert from.</param>
      /// <returns>A new instance of <see cref="TestUnion"/> converted from <paramref name="listOfInt32"/>.</returns>
      public static implicit operator global::Thinktecture.Tests.TestUnion(global::System.Collections.Generic.List<int> @listOfInt32)
      {
         return new global::Thinktecture.Tests.TestUnion(@listOfInt32);
      }

      /// <summary>
      /// Explicit conversion to type <c>global::System.Collections.Generic.List&lt;string&gt;</c>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>Inner value of type <c>global::System.Collections.Generic.List&lt;string&gt;</c>.</returns>
      /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>global::System.Collections.Generic.List&lt;string&gt;</c>.</exception>
      public static explicit operator global::System.Collections.Generic.List<string>(global::Thinktecture.Tests.TestUnion obj)
      {
         return obj.AsListOfString;
      }

      /// <summary>
      /// Explicit conversion to type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>Inner value of type <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</returns>
      /// <exception cref="System.InvalidOperationException">If the inner value is not a <c>global::System.Collections.Generic.List&lt;int&gt;</c>.</exception>
      public static explicit operator global::System.Collections.Generic.List<int>(global::Thinktecture.Tests.TestUnion obj)
      {
         return obj.AsListOfInt32;
      }

      /// <summary>
      /// Compares two instances of <see cref="TestUnion"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
      {
         if (obj is null)
            return other is null;

         return obj.Equals(other);
      }

      /// <summary>
      /// Compares two instances of <see cref="TestUnion"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestUnion? obj, global::Thinktecture.Tests.TestUnion? other)
      {
         return !(obj == other);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestUnion obj && Equals(obj);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestUnion? other)
      {
         if (other is null)
            return false;

         if (ReferenceEquals(this, other))
            return true;

         if (this._valueIndex != other._valueIndex)
            return false;

         return this._valueIndex switch
         {
            1 => this._listOfString is null ? other._listOfString is null : this._listOfString.Equals(other._listOfString),
            2 => this._listOfInt32 is null ? other._listOfInt32 is null : this._listOfInt32.Equals(other._listOfInt32),
            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
         };
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return this._valueIndex switch
         {
            1 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._listOfString?.GetHashCode() ?? 0),
            2 => global::System.HashCode.Combine(global::Thinktecture.Tests.TestUnion._typeHashCode, this._listOfInt32?.GetHashCode() ?? 0),
            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
         };
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this._valueIndex switch
         {
            1 => this._listOfString?.ToString(),
            2 => this._listOfInt32?.ToString(),
            _ => throw new global::System.IndexOutOfRangeException($"Unexpected value index '{this._valueIndex}'.")
         };
      }
   }
}
