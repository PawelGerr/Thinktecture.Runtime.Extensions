// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

[global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
abstract partial record Result<T>
{
   private Result()
   {
   }

   /// <summary>
   /// Executes an action depending on the current type.
   /// </summary>
   /// <param name="success">The action to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c>.</param>
   /// <param name="failure">The action to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public void Switch(
      global::System.Action<global::Thinktecture.Tests.Result<T>.Success> @success,
      global::System.Action<global::Thinktecture.Tests.Result<T>.Failure> @failure)
   {
      switch (this)
      {
         case global::Thinktecture.Tests.Result<T>.Success value:
            @success(value);
            return;
         case global::Thinktecture.Tests.Result<T>.Failure value:
            @failure(value);
            return;
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes an action depending on the current type.
   /// </summary>
   /// <param name="state">State to be passed to the callbacks.</param>
   /// <param name="success">The action to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c>.</param>
   /// <param name="failure">The action to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public void Switch<TState>(
      TState @state,
      global::System.Action<TState, global::Thinktecture.Tests.Result<T>.Success> @success,
      global::System.Action<TState, global::Thinktecture.Tests.Result<T>.Failure> @failure)
#if NET9_0_OR_GREATER
		where TState : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.Result<T>.Success value:
            @success(@state, value);
            return;
         case global::Thinktecture.Tests.Result<T>.Failure value:
            @failure(@state, value);
            return;
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes a function depending on the current type.
   /// </summary>
   /// <param name="success">The function to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c>.</param>
   /// <param name="failure">The function to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Switch<TResult>(
      global::System.Func<global::Thinktecture.Tests.Result<T>.Success, TResult> @success,
      global::System.Func<global::Thinktecture.Tests.Result<T>.Failure, TResult> @failure)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.Result<T>.Success value:
            return @success(value);
         case global::Thinktecture.Tests.Result<T>.Failure value:
            return @failure(value);
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Executes a function depending on the current type.
   /// </summary>
   /// <param name="state">State to be passed to the callbacks.</param>
   /// <param name="success">The function to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c>.</param>
   /// <param name="failure">The function to execute if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Switch<TState, TResult>(
      TState @state,
      global::System.Func<TState, global::Thinktecture.Tests.Result<T>.Success, TResult> @success,
      global::System.Func<TState, global::Thinktecture.Tests.Result<T>.Failure, TResult> @failure)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
		where TState : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.Result<T>.Success value:
            return @success(@state, value);
         case global::Thinktecture.Tests.Result<T>.Failure value:
            return @failure(@state, value);
         default:
            throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
      }
   }

   /// <summary>
   /// Maps current instance to an instance of type <typeparamref name="TResult"/>.
   /// </summary>
   /// <param name="success">The instance to return if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c>.</param>
   /// <param name="failure">The instance to return if the current type is <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c>.</param>
   [global::System.Diagnostics.DebuggerStepThroughAttribute]
   public TResult Map<TResult>(
      TResult @success,
      TResult @failure)
#if NET9_0_OR_GREATER
		where TResult : allows ref struct
#endif
   {
      switch (this)
      {
         case global::Thinktecture.Tests.Result<T>.Success value:
               return @success;
         case global::Thinktecture.Tests.Result<T>.Failure value:
               return @failure;
            default:
               throw new global::System.ArgumentOutOfRangeException($"Unexpected type '{this.GetType().FullName}'.");
         }
   }

   /// <summary>
   /// Implicit conversion from type <typeparamref name="T"/>.
   /// </summary>
   /// <param name="value">Value to covert from.</param>
   /// <returns>A new instance of <c>global::Thinktecture.Tests.Result&lt;T&gt;.Success</c> converted from <paramref name="value"/>.</returns>
   public static implicit operator global::Thinktecture.Tests.Result<T>(T @value)
   {
      return new global::Thinktecture.Tests.Result<T>.Success(@value);
   }

   /// <summary>
   /// Implicit conversion from type <see cref="string"/>.
   /// </summary>
   /// <param name="error">Value to covert from.</param>
   /// <returns>A new instance of <c>global::Thinktecture.Tests.Result&lt;T&gt;.Failure</c> converted from <paramref name="error"/>.</returns>
   public static implicit operator global::Thinktecture.Tests.Result<T>(string @error)
   {
      return new global::Thinktecture.Tests.Result<T>.Failure(@error);
   }
}
