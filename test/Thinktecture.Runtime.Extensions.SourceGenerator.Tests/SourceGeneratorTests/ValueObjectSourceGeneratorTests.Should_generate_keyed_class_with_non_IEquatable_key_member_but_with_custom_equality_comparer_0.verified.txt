// <auto-generated />
#nullable enable

namespace Thinktecture.Tests
{
   [global::System.ComponentModel.TypeConverter(typeof(global::Thinktecture.ThinktectureTypeConverter<global::Thinktecture.Tests.TestValueObject, global::Thinktecture.Tests.Foo, global::Thinktecture.ValidationError>))]
   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
   sealed partial class TestValueObject : global::System.IEquatable<global::Thinktecture.Tests.TestValueObject?>,
      global::Thinktecture.IKeyedObject<global::Thinktecture.Tests.Foo>,
      global::Thinktecture.IConvertible<global::Thinktecture.Tests.Foo>,
      global::Thinktecture.Internal.IMetadataOwner,
      global::Thinktecture.IObjectFactory<global::Thinktecture.Tests.TestValueObject, global::Thinktecture.Tests.Foo, global::Thinktecture.ValidationError>
   {
      static global::Thinktecture.Internal.Metadata global::Thinktecture.Internal.IMetadataOwner.Metadata { get; } = new global::Thinktecture.Internal.Metadata.Keyed.ValueObject
      {
         Type = typeof(global::Thinktecture.Tests.TestValueObject),
         KeyType = typeof(global::Thinktecture.Tests.Foo),
         ValidationErrorType = typeof(global::Thinktecture.ValidationError),
         ConvertToKey = static global::Thinktecture.Tests.Foo (global::Thinktecture.Tests.TestValueObject item) => item._value,
         ConvertToKeyExpression = static global::Thinktecture.Tests.Foo (global::Thinktecture.Tests.TestValueObject item) => item._value,
         GetKey = static object (object item) => ((global::Thinktecture.Tests.TestValueObject)item)._value,
         ConvertFromKey = static global::Thinktecture.Tests.TestValueObject (global::Thinktecture.Tests.Foo @value) => global::Thinktecture.Tests.TestValueObject.Create(@value),
         ConvertFromKeyExpression = static global::Thinktecture.Tests.TestValueObject (global::Thinktecture.Tests.Foo @value) => global::Thinktecture.Tests.TestValueObject.Create(@value),
         ConvertFromKeyExpressionViaConstructor = static global::Thinktecture.Tests.TestValueObject (global::Thinktecture.Tests.Foo @value) => new global::Thinktecture.Tests.TestValueObject(@value),
         TryGetFromKey = 
            (object? key,
             out object? obj,
             [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(true)] out object error) =>
            {
               error = global::Thinktecture.Tests.TestValueObject.Validate(key is global::Thinktecture.Tests.Foo typedKey ? typedKey : default, null, out var item);
               obj = item;

               return error is null;
            }
      };

      private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestValueObject).GetHashCode();

      /// <summary>
      /// The identifier of this object.
      /// </summary>
      private readonly global::Thinktecture.Tests.Foo _value;

      public static global::Thinktecture.ValidationError? Validate(global::Thinktecture.Tests.Foo? @value, global::System.IFormatProvider? @provider, out global::Thinktecture.Tests.TestValueObject? obj)
      {
         if(@value is null)
         {
            obj = default;
            return global::Thinktecture.Internal.ValidationErrorCreator.CreateValidationError<global::Thinktecture.ValidationError>("The argument 'value' must not be null.");
         }

         global::Thinktecture.ValidationError? validationError = null;
         ValidateFactoryArguments(ref validationError, ref @value);

         if (validationError is null)
         {
            obj = new global::Thinktecture.Tests.TestValueObject(@value);
            obj.FactoryPostInit();
         }
         else
         {
            obj = default;
         }

         return validationError;
      }

      public static global::Thinktecture.Tests.TestValueObject Create(global::Thinktecture.Tests.Foo @value)
      {
         var validationError = Validate(@value, null, out global::Thinktecture.Tests.TestValueObject? obj);

         if (validationError is not null)
            throw new global::System.ComponentModel.DataAnnotations.ValidationException(validationError.ToString() ?? "Validation failed.");

         return obj!;
      }

      public static bool TryCreate(global::Thinktecture.Tests.Foo @value, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Thinktecture.Tests.TestValueObject? obj)
      {
         return TryCreate(@value, out obj, out _);
      }

      public static bool TryCreate(
         global::Thinktecture.Tests.Foo @value,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Thinktecture.Tests.TestValueObject? obj,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(false)] out global::Thinktecture.ValidationError? validationError)
      {
         validationError = Validate(@value, null, out obj);

         return validationError is null;
      }

      static partial void ValidateFactoryArguments(ref global::Thinktecture.ValidationError? validationError, ref global::Thinktecture.Tests.Foo @value);

      partial void FactoryPostInit();

      /// <summary>
      /// Gets the identifier of the item.
      /// </summary>
      [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
      global::Thinktecture.Tests.Foo global::Thinktecture.IConvertible<global::Thinktecture.Tests.Foo>.ToValue()
      {
         return this._value;
      }

      /// <summary>
      /// Implicit conversion to the type <see cref="global::Thinktecture.Tests.Foo"/>.
      /// </summary>
      /// <param name="obj">Object to covert.</param>
      /// <returns>The <see cref="_value"/> of provided <paramref name="obj"/> or <c>default</c> if <paramref name="obj"/> is <c>null</c>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("obj")]
      public static implicit operator global::Thinktecture.Tests.Foo?(global::Thinktecture.Tests.TestValueObject? obj)
      {
         return obj?._value;
      }

      /// <summary>
      /// Explicit conversion from the type <see cref="global::Thinktecture.Tests.Foo"/>.
      /// </summary>
      /// <param name="value">Value to covert.</param>
      /// <returns>An instance of <see cref="TestValueObject"/>.</returns>
      [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull("value")]
      public static explicit operator global::Thinktecture.Tests.TestValueObject?(global::Thinktecture.Tests.Foo? @value)
      {
         if(@value is null)
            return null;

         return global::Thinktecture.Tests.TestValueObject.Create(@value);
      }

      private TestValueObject(global::Thinktecture.Tests.Foo @value)
      {
         ValidateConstructorArguments(ref @value);

         this._value = @value;
      }

      static partial void ValidateConstructorArguments(ref global::Thinktecture.Tests.Foo @value);

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestValueObject obj && Equals(obj);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestValueObject? other)
      {
         if (other is null)
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         return global::Thinktecture.ComparerAccessors.Default<global::Thinktecture.Tests.Foo>.EqualityComparer.Equals(this._value, other._value);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return global::System.HashCode.Combine(_typeHashCode, global::Thinktecture.ComparerAccessors.Default<global::Thinktecture.Tests.Foo>.EqualityComparer.GetHashCode(this._value));
      }

      /// <inheritdoc />
      public override string? ToString()
      {
         return this._value.ToString();
      }
   }
}
