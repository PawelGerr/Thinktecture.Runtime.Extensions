// <auto-generated />
#nullable enable

namespace Thinktecture.Tests
{
   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("ThinktectureRuntimeExtensionsAnalyzer", "TTRESG1000:Internal Thinktecture.Runtime.Extensions API usage")]
   sealed partial class TestValueObject : global::System.IEquatable<global::Thinktecture.Tests.TestValueObject?>,
      global::System.Numerics.IEqualityOperators<global::Thinktecture.Tests.TestValueObject, global::Thinktecture.Tests.TestValueObject, bool>,
      global::Thinktecture.Internal.IMetadataOwner
   {
      static global::Thinktecture.Internal.Metadata global::Thinktecture.Internal.IMetadataOwner.Metadata { get; } = new global::Thinktecture.Internal.Metadata.ComplexValueObject
      {
         Type = typeof(global::Thinktecture.Tests.TestValueObject),
         AssignableMembers = new global::System.Collections.Generic.List<global::System.Reflection.MemberInfo>(
               global::System.Linq.Enumerable.Select(
                  ((global::System.Linq.Expressions.NewExpression)
                     ((global::System.Linq.Expressions.Expression<global::System.Func<global::Thinktecture.Tests.TestValueObject, object>>)
                        (object (global::Thinktecture.Tests.TestValueObject o) => new
                           {
                              o._value1,
                              o._value2,
                              o._value3,
                              o._value4,
                              o._value5,
                              o._value6,
                              o._value7,
                              o._value8,
                              o._value9
                           })).Body).Arguments,
                  arg => ((global::System.Linq.Expressions.MemberExpression)arg).Member)
            )
            .AsReadOnly()
      };

      private static readonly int _typeHashCode = typeof(global::Thinktecture.Tests.TestValueObject).GetHashCode();

      public static global::Thinktecture.ValidationError? Validate(
         string @value1,
         string @value2,
         string @value3,
         string @value4,
         string @value5,
         string @value6,
         string @value7,
         string @value8,
         string @value9,
         out global::Thinktecture.Tests.TestValueObject? obj)
      {
         if (@value1 is null)
         {
            obj = default;
            return global::Thinktecture.ValidationError.Create("The member \"_value1\" of type \"TestValueObject\" must not be null.");
         }

         if (@value2 is null)
         {
            obj = default;
            return global::Thinktecture.ValidationError.Create("The member \"_value2\" of type \"TestValueObject\" must not be null.");
         }

         if (@value3 is null)
         {
            obj = default;
            return global::Thinktecture.ValidationError.Create("The member \"_value3\" of type \"TestValueObject\" must not be null.");
         }

         if (@value4 is null)
         {
            obj = default;
            return global::Thinktecture.ValidationError.Create("The member \"_value4\" of type \"TestValueObject\" must not be null.");
         }

         if (@value5 is null)
         {
            obj = default;
            return global::Thinktecture.ValidationError.Create("The member \"_value5\" of type \"TestValueObject\" must not be null.");
         }

         if (@value6 is null)
         {
            obj = default;
            return global::Thinktecture.ValidationError.Create("The member \"_value6\" of type \"TestValueObject\" must not be null.");
         }

         if (@value7 is null)
         {
            obj = default;
            return global::Thinktecture.ValidationError.Create("The member \"_value7\" of type \"TestValueObject\" must not be null.");
         }

         if (@value8 is null)
         {
            obj = default;
            return global::Thinktecture.ValidationError.Create("The member \"_value8\" of type \"TestValueObject\" must not be null.");
         }

         if (@value9 is null)
         {
            obj = default;
            return global::Thinktecture.ValidationError.Create("The member \"_value9\" of type \"TestValueObject\" must not be null.");
         }

         global::Thinktecture.ValidationError? validationError = null;

         ValidateFactoryArguments(
            ref validationError,
            ref @value1,
            ref @value2,
            ref @value3,
            ref @value4,
            ref @value5,
            ref @value6,
            ref @value7,
            ref @value8,
            ref @value9);

         if (validationError is null)
         {
            obj = new global::Thinktecture.Tests.TestValueObject(
               @value1,
               @value2,
               @value3,
               @value4,
               @value5,
               @value6,
               @value7,
               @value8,
               @value9);
            obj.FactoryPostInit();
         }
         else
         {
            obj = default;
         }

         return validationError;
      }

      public static global::Thinktecture.Tests.TestValueObject Create(
         string @value1,
         string @value2,
         string @value3,
         string @value4,
         string @value5,
         string @value6,
         string @value7,
         string @value8,
         string @value9)
      {
         var validationError = Validate(
            @value1,
            @value2,
            @value3,
            @value4,
            @value5,
            @value6,
            @value7,
            @value8,
            @value9,
            out global::Thinktecture.Tests.TestValueObject? obj);

         if (validationError is not null)
            throw new global::System.ComponentModel.DataAnnotations.ValidationException(validationError.ToString() ?? "Validation failed.");

         return obj!;
      }

      public static bool TryCreate(
         string @value1,
         string @value2,
         string @value3,
         string @value4,
         string @value5,
         string @value6,
         string @value7,
         string @value8,
         string @value9,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Thinktecture.Tests.TestValueObject? obj)
      {
         return TryCreate(
            @value1,
            @value2,
            @value3,
            @value4,
            @value5,
            @value6,
            @value7,
            @value8,
            @value9,
            out obj,
            out _);
      }

      public static bool TryCreate(
         string @value1,
         string @value2,
         string @value3,
         string @value4,
         string @value5,
         string @value6,
         string @value7,
         string @value8,
         string @value9,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Thinktecture.Tests.TestValueObject? obj,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(false)] out global::Thinktecture.ValidationError? validationError)
      {
         validationError = Validate(
            @value1,
            @value2,
            @value3,
            @value4,
            @value5,
            @value6,
            @value7,
            @value8,
            @value9,
            out obj);

         return validationError is null;
      }

      static partial void ValidateFactoryArguments(
         ref global::Thinktecture.ValidationError? validationError,
         ref string @value1,
         ref string @value2,
         ref string @value3,
         ref string @value4,
         ref string @value5,
         ref string @value6,
         ref string @value7,
         ref string @value8,
         ref string @value9);

      partial void FactoryPostInit();

      private TestValueObject(
         string @value1,
         string @value2,
         string @value3,
         string @value4,
         string @value5,
         string @value6,
         string @value7,
         string @value8,
         string @value9)
      {
         ValidateConstructorArguments(
            ref @value1,
            ref @value2,
            ref @value3,
            ref @value4,
            ref @value5,
            ref @value6,
            ref @value7,
            ref @value8,
            ref @value9);

         this._value1 = @value1;
         this._value2 = @value2;
         this._value3 = @value3;
         this._value4 = @value4;
         this._value5 = @value5;
         this._value6 = @value6;
         this._value7 = @value7;
         this._value8 = @value8;
         this._value9 = @value9;
      }

      static partial void ValidateConstructorArguments(
         ref string @value1,
         ref string @value2,
         ref string @value3,
         ref string @value4,
         ref string @value5,
         ref string @value6,
         ref string @value7,
         ref string @value8,
         ref string @value9);

      /// <summary>
      /// Compares two instances of <see cref="TestValueObject"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::Thinktecture.Tests.TestValueObject? obj, global::Thinktecture.Tests.TestValueObject? other)
      {
         if (obj is null)
            return other is null;

         return obj.Equals(other);
      }

      /// <summary>
      /// Compares two instances of <see cref="TestValueObject"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::Thinktecture.Tests.TestValueObject? obj, global::Thinktecture.Tests.TestValueObject? other)
      {
         return !(obj == other);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::Thinktecture.Tests.TestValueObject obj && Equals(obj);
      }

      /// <inheritdoc />
      public bool Equals(global::Thinktecture.Tests.TestValueObject? other)
      {
         if (other is null)
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         return global::System.StringComparer.OrdinalIgnoreCase.Equals(this._value1, other._value1)
             && global::System.StringComparer.OrdinalIgnoreCase.Equals(this._value2, other._value2)
             && global::System.StringComparer.OrdinalIgnoreCase.Equals(this._value3, other._value3)
             && global::System.StringComparer.OrdinalIgnoreCase.Equals(this._value4, other._value4)
             && global::System.StringComparer.OrdinalIgnoreCase.Equals(this._value5, other._value5)
             && global::System.StringComparer.OrdinalIgnoreCase.Equals(this._value6, other._value6)
             && global::System.StringComparer.OrdinalIgnoreCase.Equals(this._value7, other._value7)
             && global::System.StringComparer.OrdinalIgnoreCase.Equals(this._value8, other._value8)
             && global::System.StringComparer.OrdinalIgnoreCase.Equals(this._value9, other._value9);
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         var hashCode = new global::System.HashCode();
         hashCode.Add(_typeHashCode);
         hashCode.Add(this._value1, global::System.StringComparer.OrdinalIgnoreCase);
         hashCode.Add(this._value2, global::System.StringComparer.OrdinalIgnoreCase);
         hashCode.Add(this._value3, global::System.StringComparer.OrdinalIgnoreCase);
         hashCode.Add(this._value4, global::System.StringComparer.OrdinalIgnoreCase);
         hashCode.Add(this._value5, global::System.StringComparer.OrdinalIgnoreCase);
         hashCode.Add(this._value6, global::System.StringComparer.OrdinalIgnoreCase);
         hashCode.Add(this._value7, global::System.StringComparer.OrdinalIgnoreCase);
         hashCode.Add(this._value8, global::System.StringComparer.OrdinalIgnoreCase);
         hashCode.Add(this._value9, global::System.StringComparer.OrdinalIgnoreCase);
         return hashCode.ToHashCode();
      }

      /// <inheritdoc />
      public override string ToString()
      {
         return $"{{ _value1 = {this._value1}, _value2 = {this._value2}, _value3 = {this._value3}, _value4 = {this._value4}, _value5 = {this._value5}, _value6 = {this._value6}, _value7 = {this._value7}, _value8 = {this._value8}, _value9 = {this._value9} }}";
      }
   }
}
