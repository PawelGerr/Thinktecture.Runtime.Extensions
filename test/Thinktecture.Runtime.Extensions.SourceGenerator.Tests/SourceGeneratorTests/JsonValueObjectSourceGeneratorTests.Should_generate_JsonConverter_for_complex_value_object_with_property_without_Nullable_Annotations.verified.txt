// <auto-generated />
#nullable enable

namespace Thinktecture.Tests;

[global::Newtonsoft.Json.JsonConverterAttribute(typeof(ValueObjectNewtonsoftJsonConverter))]
partial struct ComplexValueObjectWithNonNullProperty
{
   public sealed class ValueObjectNewtonsoftJsonConverter : global::Newtonsoft.Json.JsonConverter
   {
      private static readonly global::System.Type _type = typeof(global::Thinktecture.Tests.ComplexValueObjectWithNonNullProperty);

      /// <inheritdoc />
      public override bool CanConvert(global::System.Type objectType)
      {
         return _type.IsAssignableFrom(objectType);
      }

      /// <inheritdoc />
      public override object? ReadJson(global::Newtonsoft.Json.JsonReader reader, global::System.Type objectType, object? existingValue, global::Newtonsoft.Json.JsonSerializer serializer)
      {
         if (reader is null)
            throw new global::System.ArgumentNullException(nameof(reader));
         if (serializer is null)
            throw new global::System.ArgumentNullException(nameof(serializer));

         if (reader.TokenType == global::Newtonsoft.Json.JsonToken.Null)
         {
            if(global::System.Nullable.GetUnderlyingType(objectType) == _type)
               return null;

            var (lineNumber, linePosition) = GetLineInfo(reader);

            throw new global::Newtonsoft.Json.JsonReaderException(
               $"Cannot convert null to type \"ComplexValueObjectWithNonNullProperty\" because it doesn't allow default values.",
               reader.Path,
               lineNumber,
               linePosition,
               null);
         }

         if (reader.TokenType != global::Newtonsoft.Json.JsonToken.StartObject)
         {
            var (lineNumber, linePosition) = GetLineInfo(reader);

            throw new global::Newtonsoft.Json.JsonReaderException(
               $"Unexpected token \"{reader.TokenType}\" when trying to deserialize \"ComplexValueObjectWithNonNullProperty\". Expected token: \"{(global::Newtonsoft.Json.JsonToken.StartObject)}\".",
               reader.Path,
               lineNumber,
               linePosition,
               null);
         }

         string? @property = default;

         var comparer = global::System.StringComparer.OrdinalIgnoreCase;

         while (reader.Read())
         {
            if (reader.TokenType == global::Newtonsoft.Json.JsonToken.EndObject)
               break;

            if (reader.TokenType != global::Newtonsoft.Json.JsonToken.PropertyName)
            {
               var (lineNumber, linePosition) = GetLineInfo(reader);

               throw new global::Newtonsoft.Json.JsonReaderException(
                  $"Unexpected token \"{reader.TokenType}\" when trying to deserialize \"ComplexValueObjectWithNonNullProperty\". Expected token: \"{(global::Newtonsoft.Json.JsonToken.PropertyName)}\".",
                  reader.Path,
                  lineNumber,
                  linePosition,
                  null);
            }

            var propName = reader.Value!.ToString();

            if(!reader.Read())
            {
               var (lineNumber, linePosition) = GetLineInfo(reader);

               throw new global::Newtonsoft.Json.JsonReaderException(
                  $"Unexpected end of the JSON message when trying the read the value of \"{propName}\" during deserialization of \"ComplexValueObjectWithNonNullProperty\".",
                  reader.Path,
                  lineNumber,
                  linePosition,
                  null);
            }

            if (comparer.Equals(propName, "property"))
            {
               @property = serializer.Deserialize<string>(reader);
            }
            else
            {
               var (lineNumber, linePosition) = GetLineInfo(reader);

               throw new global::Newtonsoft.Json.JsonReaderException(
                  $"Unknown member \"{propName}\" encountered when trying to deserialize \"ComplexValueObjectWithNonNullProperty\".",
                  reader.Path,
                  lineNumber,
                  linePosition,
                  null);
            }
         }

         var validationError = global::Thinktecture.Tests.ComplexValueObjectWithNonNullProperty.Validate(
                                    @property!,
                                    out var obj);

         if (validationError is not null)
         {
            var (lineNumber, linePosition) = GetLineInfo(reader);

            throw new global::Newtonsoft.Json.JsonSerializationException(
               validationError.ToString() ?? "Unable to deserialize \"ComplexValueObjectWithNonNullProperty\".",
               reader.Path,
               lineNumber,
               linePosition,
               null);
         }

         return obj;
      }

      /// <inheritdoc />
      public override void WriteJson(global::Newtonsoft.Json.JsonWriter writer, object? value, global::Newtonsoft.Json.JsonSerializer serializer)
      {
         if (value is null)
         {
            writer.WriteNull();
            return;
         }

         var obj = (global::Thinktecture.Tests.ComplexValueObjectWithNonNullProperty)value;
         var resolver = serializer.ContractResolver as global::Newtonsoft.Json.Serialization.DefaultContractResolver;

         writer.WriteStartObject();
         var @propertyPropertyValue = obj.Property;

         if(serializer.NullValueHandling != global::Newtonsoft.Json.NullValueHandling.Ignore || @propertyPropertyValue is not null)
         {
            writer.WritePropertyName((resolver != null) ? resolver.GetResolvedPropertyName("Property") : "Property");
            writer.WriteValue(@propertyPropertyValue);
         }
         writer.WriteEndObject();
      }

      private static (int Number, int Position) GetLineInfo(global::Newtonsoft.Json.JsonReader reader)
      {
         var lineInfo = (reader as global::Newtonsoft.Json.IJsonLineInfo);

         if (lineInfo?.HasLineInfo() == true)
         {
            return (lineInfo.LineNumber, lineInfo.LinePosition);
         }
         else
         {
            return (0, 0);
         }
      }
   }
}
