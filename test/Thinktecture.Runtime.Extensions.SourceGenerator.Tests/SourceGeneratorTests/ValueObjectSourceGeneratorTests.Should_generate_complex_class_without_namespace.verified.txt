// <auto-generated />
#nullable enable

   sealed partial class TestValueObject : global::System.IEquatable<global::TestValueObject?>,
      global::System.Numerics.IEqualityOperators<global::TestValueObject, global::TestValueObject, bool>,
      global::Thinktecture.IComplexValueObject
   {
      [global::System.Runtime.CompilerServices.ModuleInitializer]
      internal static void ModuleInit()
      {
         global::System.Linq.Expressions.Expression<global::System.Func<TestValueObject, object>> action = o => new
                                                                                                            {
                                                                                                            };

         var members = new global::System.Collections.Generic.List<global::System.Reflection.MemberInfo>();

         foreach (var arg in ((global::System.Linq.Expressions.NewExpression)action.Body).Arguments)
         {
            members.Add(((global::System.Linq.Expressions.MemberExpression)arg).Member);
         }

         var type = typeof(global::TestValueObject);
         var metadata = new global::Thinktecture.Internal.ComplexValueObjectMetadata(type, members.AsReadOnly());

         global::Thinktecture.Internal.ComplexValueObjectMetadataLookup.AddMetadata(type, metadata);
      }

      private static readonly int _typeHashCode = typeof(global::TestValueObject).GetHashCode();

      public static global::Thinktecture.ValidationError? Validate(
         out global::TestValueObject? obj)
      {
         global::Thinktecture.ValidationError? validationError = null;
         ValidateFactoryArguments(
            ref validationError);

         if (validationError is null)
         {
            obj = new global::TestValueObject();
            obj.FactoryPostInit();
         }
         else
         {
            obj = default;
         }

         return validationError;
      }

      public static global::TestValueObject Create()
      {
         var validationError = Validate(
            out global::TestValueObject? obj);

         if (validationError is not null)
            throw new global::System.ComponentModel.DataAnnotations.ValidationException(validationError.ToString() ?? "Validation failed.");

         return obj!;
      }

      public static bool TryCreate(
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::TestValueObject? obj)
      {
         return TryCreate(
            out obj,
            out _);
      }

      public static bool TryCreate(
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::TestValueObject? obj,
         [global::System.Diagnostics.CodeAnalysis.NotNullWhen(false)] out global::Thinktecture.ValidationError? validationError)
      {
         validationError = Validate(
            out obj);

         return validationError is null;
      }

      static partial void ValidateFactoryArguments(
         ref global::Thinktecture.ValidationError? validationError);

      partial void FactoryPostInit();

      private TestValueObject()
      {
      }

      /// <summary>
      /// Compares two instances of <see cref="TestValueObject"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>true</c> if objects are equal; otherwise <c>false</c>.</returns>
      public static bool operator ==(global::TestValueObject? obj, global::TestValueObject? other)
      {
         if (obj is null)
            return other is null;

         return obj.Equals(other);
      }

      /// <summary>
      /// Compares two instances of <see cref="TestValueObject"/>.
      /// </summary>
      /// <param name="obj">Instance to compare.</param>
      /// <param name="other">Another instance to compare.</param>
      /// <returns><c>false</c> if objects are equal; otherwise <c>true</c>.</returns>
      public static bool operator !=(global::TestValueObject? obj, global::TestValueObject? other)
      {
         return !(obj == other);
      }

      /// <inheritdoc />
      public override bool Equals(object? other)
      {
         return other is global::TestValueObject obj && Equals(obj);
      }

      /// <inheritdoc />
      public bool Equals(global::TestValueObject? other)
      {
         if (other is null)
            return false;

         if (global::System.Object.ReferenceEquals(this, other))
            return true;

         return true;
      }

      /// <inheritdoc />
      public override int GetHashCode()
      {
         return _typeHashCode;
      }

      /// <inheritdoc />
      public override string ToString()
      {
         return "TestValueObject";
      }
   }
