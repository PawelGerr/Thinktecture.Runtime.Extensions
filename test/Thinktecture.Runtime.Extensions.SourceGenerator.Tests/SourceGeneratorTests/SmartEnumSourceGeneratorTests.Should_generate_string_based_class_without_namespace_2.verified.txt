// <auto-generated />
#nullable enable

partial class TestEnum :
   global::System.IParsable<global::TestEnum>
#if NET9_0_OR_GREATER
   , global::System.ISpanParsable<global::TestEnum>
#endif
{
   private static global::Thinktecture.ValidationError? Validate<T>(string key, global::System.IFormatProvider? provider, out global::TestEnum? result)
      where T : global::Thinktecture.IValueObjectFactory<global::TestEnum, string, global::Thinktecture.ValidationError>
   {
      return T.Validate(key, provider, out result);
   }

#if NET9_0_OR_GREATER
   private static global::Thinktecture.ValidationError? Validate<T>(global::System.ReadOnlySpan<char> key, global::System.IFormatProvider? provider, out global::TestEnum? result)
      where T : global::Thinktecture.IValueObjectFactory<global::TestEnum, global::System.ReadOnlySpan<char>, global::Thinktecture.ValidationError>
   {
      return T.Validate(key, provider, out result);
   }
#endif

   /// <inheritdoc />
   public static global::TestEnum Parse(string s, global::System.IFormatProvider? provider)
   {
      var validationError = Validate<global::TestEnum>(s, provider, out var result);

      if(validationError is null)
         return result!;

      throw new global::System.FormatException(validationError.ToString() ?? "Unable to parse \"TestEnum\".");
   }

#if NET9_0_OR_GREATER
   /// <inheritdoc />
   public static global::TestEnum Parse(global::System.ReadOnlySpan<char> s, global::System.IFormatProvider? provider)
   {
      var validationError = Validate<global::TestEnum>(s, provider, out var result);

      if(validationError is null)
         return result!;

      throw new global::System.FormatException(validationError.ToString() ?? "Unable to parse \"TestEnum\".");
   }
#endif

   /// <inheritdoc />
   public static bool TryParse(
      string? s,
      global::System.IFormatProvider? provider,
      [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::TestEnum result)
   {
      if(s is null)
      {
         result = default;
         return false;
      }

      var validationError = Validate<global::TestEnum>(s, provider, out result!);
      return validationError is null;
   }

#if NET9_0_OR_GREATER
   /// <inheritdoc />
   public static bool TryParse(
      global::System.ReadOnlySpan<char> s,
      global::System.IFormatProvider? provider,
      [global::System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)] out global::TestEnum result)
   {
      var validationError = Validate<global::TestEnum>(s, provider, out result!);
      return validationError is null;
   }
#endif
}
